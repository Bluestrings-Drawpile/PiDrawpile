#!/bin/bash
drawpilescriptversion=2.71
scriptname=drawpile-update
echo
echo 'Made with the assistance of the Creator of Drawpile! His PayPal E-mail if'
echo 'you want to donate some money as thanks for all that he does!'
echo 'laakkonenc@gmail.com'
echo
echo "Script Version $drawpilescriptversion"
echo 'Google Doc --> http://tinyurl.com/jx5oe4h'
echo
echo 'Please make sure you are using the latest version of this script before'
echo 'continuing by making sure the script number above matches the Drawpile Google'
echo 'Document version number in the upper right of every page where this script was'
echo 'obtained. If you do not have the newest version, close this window and'
echo 'get the newest version before proceeding.'
echo
read -p 'Press [Enter] key to continue...'
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo 'Pick the installed location of the Programs folder.'
echo
echo 'As a reminder, this is the location your Programs folder is located'
echo 'within, which contains Drawpile and is also the location where your'
echo 'scripts for managing the server are located.'
echo
echo '1 - Public Folder					- /home/pi/Public'
echo '2 - Desktop Folder				- /home/pi/Desktop'
echo '3 - Documents Folder				- /home/pi/Documents'
echo '4 - Pictures Folder				- /home/pi/Pictures'
echo '  - Other, simply enter the exact location desired without a / at the end.'
echo '    This is an advanced option and not suggested for average users.'
echo '    If using a path with spaces, do NOT use double or single quotes as'
echo '        the script will not work if you do.'
echo '    Acceptable Example: /home/pi/Desktop/My Drawpile Server'
echo
echo 'Please make your selection now by entering the number or folder path:'
echo 
read dpinstallloc
echo
if [ "$dpinstallloc" == "1" ]; then
  dpinstallloc=/home/pi/Public
  echo "Install location chosen is $dpinstallloc"
elif [ "$dpinstallloc" == "2" ]; then
  dpinstallloc=/home/pi/Desktop
  echo "Install location chosen is $dpinstallloc"
elif [ "$dpinstallloc" == "3" ]; then
  dpinstallloc=/home/pi/Documents
  echo "Install location chosen is $dpinstallloc"
elif [ "$dpinstallloc" == "4" ]; then
  dpinstallloc=/home/pi/Pictures
  echo "Install location chosen is $dpinstallloc"
else
  echo "Install location chosen is $dpinstallloc"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
cd "$dpinstallloc/"
sudo mkdir -p -v Programs
cd "$dpinstallloc/Programs"
sudo rm -rf "$dpinstallloc/Programs/PiDrawpile/"
git clone https://github.com/Wade821/PiDrawpile.git
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
dpcheckversion=$(grep -m 1 "drawpilescriptversion=" "$dpinstallloc/Programs/PiDrawpile/$scriptname" | cut -c 23-26)

if [[ "$drawpilescriptversion" < "$dpcheckversion" ]]; then
	echo "Newest Script is using version $dpcheckversion."
	echo "Newer version of script available, terminating script."
	cd "$dpinstallloc"
	sudo rm -rf "$dpinstallloc/$scriptname"
	sudo cp "$dpinstallloc/Programs/PiDrawpile/$scriptname" "$dpinstallloc/$scriptname"
	sudo chmod 777 "$dpinstallloc/$scriptname"
	sudo rm -rf "$dpinstallloc/Programs/PiDrawpile/"
	echo "Please run new script."
	echo
	sleep 30s
	exit
elif [[ "$drawpilescriptversion" = "$dpcheckversion" ]]; then
	echo "Script is newest version available."
	sudo rm -rf "$dpinstallloc/Programs/PiDrawpile/"
else
	echo "It appears the creator of the script has failed to update github with the newest version."
	echo "Please contact him to update the script there by emailing him at wadeschlueter@gmail.com"
	echo
	echo "Script in use: $drawpilescriptversion"
	echo "Github Script: $dpcheckversion"
	sudo rm -rf "$dpinstallloc/Programs/PiDrawpile/"
	sleep 30s
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
sudo systemctl stop --now drawpile-srv.socket
sudo systemctl stop --now drawpile-srv.service
sudo pkill drawpile-srv
sudo pkill -9 drawpile-srv
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo '*****Updating software list available for updates and new packages. . . .*****'
echo
sudo apt-get -q -y update
echo
echo 'Would you like to update all installed packages? This step may take a while' 
echo 'to complete if you choose to do this. It is highly recommended to do so'
echo 'however as the upgrade may fail if it relies on newer versions of installed'
echo 'system packages. Required packages are upgraded in the next step.'
echo
echo 'Enter a letter and hit enter to continue.'
echo
echo 'y for yes'
echo 'n for no'
echo
read x
echo
if [ "$x" == "y" ]; then
  echo 'Updating already installed packages . . .'
  echo
  sudo apt-get -q -y upgrade
else
  echo 'Skipping update of all installed packages.'
fi
echo
echo 'Upgrading dependencies . . .'
echo
sudo apt-get -q -y install cmake libqt5network5 libkf5dnssd-dev libkf5archive-dev libqt5svg5-dev qtmultimedia5-dev libsystemd-dev libminiupnpc-dev  libsodium-dev
echo
sudo apt-get -q -y install qtbase5-dev g++ miniupnpc libgif-dev qttools5-dev libmicrohttpd-dev extra-cmake-modules mini-httpd nginx openssl
echo
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo '*****Updating Repository...*****'
echo
cd "$dpinstallloc/Programs/"
sudo rm Drawpile -R
git clone https://github.com/drawpile/Drawpile.git
echo
#
# Read more (Answer at the bottom)
# https://stackoverflow.com/questions/4068453/git-how-to-overwrite-local-change
# And read more here
# https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree
#
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo
echo '*****Building Drawpile . . .*****'
cd "$dpinstallloc/Programs/Drawpile/"
mkdir -p -v build
cd "$dpinstallloc/Programs/Drawpile/build"
#
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
# These lines are to fix an issue with an older version of KArchive which cannot be easily upgraded.
# KArchive apparently doesn't supply a version number macro so this can't be detected at compile time as a problem.
# File is located under Drawpile/src/client/ora/orawriter.cpp and replaces the following text
# zip.errorLine() 
# zf.errorLine() 
#
# with this instead as per the creator of Drawpile
#
# QString("ZIP error")
#
# It is presumable that the current (09/18/2017)  stable release of KArchive at 5.28.0-2 has this issue fixed with 
# the testing version of KArchive which is 5.37.0-2. Once updated to or past that number, this section below should
# no longer be necessary to use.
#
# Page for newest KArchive download ---> https://api.kde.org/frameworks/karchive/html/index.html
# Also see https://tracker.debian.org/pkg/karchive
# Or see https://packages.qa.debian.org/k/karchive.html
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
echo
version=$(apt-cache policy libkf5archive-dev | grep "Installed:" | cut -c 14-40)
echo "K Archive is using version $version"
echo

if [[ "$version" > "5.29" ]]; then
	echo "Installed version of K Archive is greater than 5.29."
	echo "No modification of source files required."
elif [[ "$version" = "5.29" ]]; then
	echo "Installed version of K Archive is equal to 5.29."
	echo "No modification of source files required."
elif [[ "$version" < "5.29" ]]; then
	echo "Installed version of K Archive is less than 5.29."
	echo "Modification of source files required."
	echo
	echo 'Creating backup of file orawriter.cpp before modification.'
	cp "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp" "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp.backup"
	echo
	echo 'Modifying file orawriter.cpp for use with older version of KArchive (5.28.0-2).'
	sed -i -e 's/zip.errorString()/QString("ZIP error")/g' "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp"
	sed -i -e 's/zf.errorString()/QString("ZIP error")/g' "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp"
else
	echo "Unable to make a determination of which version of K Archive is installed."
fi
echo
echo
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
echo
echo '*****Preparing to build drawpile . . .*****'
echo
echo 'Do you want to use only the Drawpile Server on the Raspberry Pi?'
echo
echo 'Enter a number and hit enter to continue.'
echo
echo '1 for Drawpile Server Only - connect from a desktop or laptop.'
echo '2 for Drawpile Server and Drawpile Client with Wacom'
echo '3 for Drawpile Server and Drawpile Client'
echo
read x
echo
if [ "$x" == "2" ]; then
  cmake .. -DINITSYS=systemd
  sudo apt-get -q -y install libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
  echo
  xsetwacom --list devices
  echo
  xsetwacom --list parameters
  echo
  echo 'Use the following in the terminal more information.'
  echo 'man wacom'
  echo
  echo 'You can set the tablet from absolute positioning to relative via this command.'
  echo 'xsetwacom set stylus mode relative'
  echo
  echo 'You may have to replace stylus with the ID listed for the device, which you'
  echo 'can find by typing the following: xwacom --list devices'
  echo 'Additionally, you may use the full name of the device in single quotes as well'
  echo 'To represent the device. For example, the following could be used . . .'
  echo 'Wacom Intuos3 6x8 Pen stylus'
  echo
  echo 'There does not appear to be any working graphical based configuration program'
  echo 'for the wacom tablet that I have been able to find as of yet.'
  echo
  echo 'Read more on configuring your Wacom Tablet here --> http://tinyurl.com/blhyk7m'
  echo 'write the following command in the terminal to read more on Wacom Configuration:'
  echo 'man wacom'
  echo
elif [ "$x" == "3" ]; then
  cmake .. -DINITSYS=systemd
else
  cmake .. -DINITSYS=systemd -DCLIENT=OFF
fi

echo
#
echo '*****Building drawpile now . . .*****'
echo
tMax=$(grep -c ^processor /proc/cpuinfo)

echo 'You can hit enter to continue here, as it will pick the maximum amount of'
echo 'threads available from the processor. If the script froze at this stage, try'
echo "a lower number than $tMax. This uses less system resources on the Pi and is "
echo 'more likely to complete without freezing up.'
echo
echo 'This is the command to be run, where # is a number input by you:'
echo 'sudo make -j #'
echo
read -p "Enter compiling thread count (blank for maximum of $tMax): " threadCount
echo
while [ true ] ; do
    if [ -z "$threadCount"  ] ; then
		echo "Compiling using maximum"
        threadCount=$tMax
		echo
        break
    elif [[ $threadCount =~ ^[0-9]+$ ]] ; then
        if (($threadCount>0)) && (($threadCount<=$tMax)) ; then
            break
        else
			echo "Value: '$threadCount' is not within the range [1,$tMax]"
			echo
        fi
    else
		echo "Value: '$threadCount' is not a positive integer"
		echo
    fi
    read -p "Enter compiling thread count (blank for maximum of $tMax): " threadCount
	echo
done
echo "Compiling with $threadCount threads."
echo
sudo make -j $threadCount
echo
echo 'Making installation of compiled program, libraries, and documentation to proper locations.'
echo
sudo make install
#
#Location of created executable --> /usr/local/bin/
echo
echo '--------------------------------------------------------------------------------'
echo
echo 'Drawpile is compiled. Now setting up for automated startup . . .'
echo
echo
echo 'Making backup of drawpile-srv.service before modification.'
echo
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service" "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service.backup"
echo
echo 'Modifying drawpile-srv.service . . .'
echo
sudo chmod 777 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service"
#
cd "$dpinstallloc"
sudo chmod 777 "$dpinstallloc" -R
cd "$dpinstallloc/Programs"
mkdir -p -v Drawpile-Srv-Files
cd Drawpile-Srv-Files
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/" -R
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo '*****Drawpile is compiled.*****'
echo
echo
echo '***** Now setting up for automated startup . . .*****'
echo
echo 'This script assumes you have a hostname, and it is required for'
echo 'encrypted server connections to protect private conversations'
echo 'and also to mask your Public IP address when connecting to the'
echo 'server.'
echo
echo 'Make sure this is correctly typed both times before proceeding'
echo 'with the script. If you do not enter it correctly, users will'
echo 'not be able to connect to hosted sessions with the server using'
echo 'encryption by SSL.'
echo
echo 'For example:'
echo 'example.hostwebsite.com'
echo
echo 'If you do not have one, simply leave it blank and hit enter'
echo 'twice. However, it is highly recommended to have one, they'
echo 'are free after all!'
echo
echo 'Note: If you do make a mistake, you can always run'
echo 'Option "4 - Change all startup options." via the script'
echo 'drawpile-server.sh later on.'
echo
echo 'If you have a hostname please enter it now.'
echo
read -p "Enter hostname: " hostname1
read -p "Enter hostname again: " hostname2
while [[ $hostname1 != $hostname2 ]]
do
	echo
        echo "Hostnames entered do not match!"
	echo
        read -p "Enter hostname: " hostname1
        read -p "Enter hostname again: " hostname2
done
#
hostname=$hostname1
echo
echo "Your hostname is: $hostname"
echo
echo 'This will be used to display in the session listing instead of your'
echo 'public IP address.'
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
#
# This is for session recordings, however it is not necessary when using file backed sessions. 
# --record "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec"
#
# Code to place after the database file in order to use httpd to authenticate instead. Username and password is plain text, no hash.
# --web-admin-port 8080 --web-admin-access all --web-admin-auth user:pass
#
# Default location of the GUI Database if no location is specified.
# /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
# sudo chmod 777 /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
#
# Location provided by Calle for drawpileuser database. Can be used when drawpile-srv supports socket activation for web admin.
# /home/drawpileuser/server.db

echo 'Determine how you want drawpile-srv to run now. Option 2 is recommended'
echo 'if you have a hostname. If you do not have a hostname, option 15 instead.'
echo 'All settings will automatically work, though some additional setup for'
echo 'session templates is required. Read more on the hyperlink below.'
echo
echo 'Short summary of options:'
echo '    Read more --> https://drawpile.net/help/server/'
echo 'web remote admin - add users, ban users, set auto session reset, etc.'
echo 'file backed sessions - write sessions to file, helps sessions to survive'
echo '    power outages and server crashes. Can serve as a recording if server'
echo '    database set to Archive terminated sessions, however filenames are'
echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
echo '    corresponding text file, the session title is inside the text file.'
echo 'recording - records all sessions, may not be necessary with above option'
echo '    turned on.'
echo 'templates - provide default sessions that always exist on the server'
echo 'ssl - Encrypt data sent so conversations and drawings are kept private.'
echo '    If you do not have this option on, sensitive information should not'
echo '    be shared in sessions. I.E. credit cards.'
echo
echo 'Note:'
echo ' Be aware that systemd socket activation for web administration is not'
echo ' yet implemented in the drawpile server, which means you cannot'
echo ' administer the server remotely. You will have to do it by script or '
echo ' locally using a supplied script. This is not a problem if you decide '
echo ' to use drawpile-srv.service instead of drawpile-srv.socket later'
echo ' in this script.'
echo
echo 'These options assume you have a host name.'
echo '  1  - all options.'
echo '  2  - all options except session recording - recommended'
echo '  3  - web admin, session recording, ssl, & templates'
echo '  4  - web admin, file backed sessions, & ssl'
echo '  5  - web admin, file backed sessions, & templates'
echo '  6  - web admin, session recording, & ssl'
echo '  7  - web admin, session recording, & templates'
echo '  8  - web admin, ssl, & templates'
echo '  9  - web admin & file backed sessions'
echo '  10 - web admin & session recording'
echo '  11 - web admin & ssl'
echo '  12 - web admin & templates'
echo '  13 - web admin'
echo
echo 'These options assume you do not have a host name.'
echo '  14  - all options.'
echo '  15  - all options except session recording'
echo '  16  - web admin, session recording, & templates'
echo '  17  - web admin & file backed sessions'
echo '  18  - web admin & session recording'
echo '  19  - web admin & templates'
echo '  20  - web admin'
echo
read systemd
echo
if [ "$systemd" == "1" ]; then
  echo 'Selected - 1 - all options.'
  mkdir -p -v sessions
  mkdir -p -v templates
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "2" ]; then
  echo 'Selected - 2 - all options except session recording'
  echo '         - recommended'
  mkdir -p -v sessions
  mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "3" ]; then
  echo 'Selected - 3 - web admin, session recording, ssl, & templates'
  mkdir -p -v templates
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "4" ]; then
  echo 'Selected - 4 - web admin, file backed sessions, & ssl'
  mkdir -p -v sessions
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  systemd="--web-admin-port 8080 --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "5" ]; then
  echo 'Selected - 5  - web admin, file backed sessions, & templates'
  mkdir -p -v sessions
  mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" $hostname"
elif [ "$systemd" == "6" ]; then
  echo 'Selected - 6  - web admin, session recording, & ssl'
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "7" ]; then
  echo 'Selected - 7  - web admin, session recording, & templates'
  mkdir -p -v templates
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" $hostname"
elif [ "$systemd" == "8" ]; then
  echo 'Selected - 8  - web admin, ssl, & templates'
  mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "9" ]; then
  echo 'Selected - 9  - web admin & file backed sessions'
  mkdir -p -v sessions
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  systemd="--web-admin-port 8080 --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" $hostname"
elif [ "$systemd" == "10" ]; then
  echo 'Selected - 10 - web admin & session recording'
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" $hostname"
elif [ "$systemd" == "11" ]; then
  echo 'Selected - 11 - web admin & ssl'
  systemd="--web-admin-port 8080 --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname"
elif [ "$systemd" == "12" ]; then
  echo 'Selected - 12 - web admin & templates'
  mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" $hostname"
elif [ "$systemd" == "13" ]; then
  echo 'Selected - 13 - w web admin'
  systemd="--web-admin-port 8080 $hostname"
elif [ "$systemd" == "14" ]; then
  echo 'Selected - 14 - all options.'
  mkdir -p -v sessions
  mkdir -p -v templates
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\""
elif [ "$systemd" == "15" ]; then
  echo 'Selected - 15 - all options except session recording'
  echo '         - recommended'
  mkdir -p -v sessions
  mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\"" 
  elif [ "$systemd" == "16" ]; then
  echo 'Selected - 16 - web admin, session recording, & templates'
  mkdir -p -v templates
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\""
elif [ "$systemd" == "17" ]; then
  echo 'Selected - 17 - web admin & file backed sessions'
  mkdir -p -v sessions
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions"
  systemd="--web-admin-port 8080 --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\""
elif [ "$systemd" == "18" ]; then
  echo 'Selected - 18  - web admin, session recording'
  mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record"
  systemd="--web-admin-port 8080 --record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\""
elif [ "$systemd" == "19" ]; then
  echo 'Selected - 19  - web admin & templates'
  mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates"
  systemd="--web-admin-port 8080 --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\""
else [ "$systemd" == "20" ]
  echo 'Selected - 20 - web admin'
  systemd="--web-admin-port 8080"
fi
#
#
#1 - Socket Activation
echo "[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv

[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=/usr/local/bin/drawpile-srv -d /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db $systemd

# The AppImage is not built with systemd integration at the moment,
# so type=simple should be used with it:
# Type=simple
Restart=always

# If you're using a self-built or distribution provided version with
# systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main

# Note: in order to use session recording and SSL safely,
# a dedicated user account should be created for drawpile-srv.
User=drawpileuser

[Install]
WantedBy=multi-user.target" > "$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service"
#
#
#2 - Server starts on Raspberry Pi power up
echo "[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv

[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=/usr/local/bin/drawpile-srv -d /home/drawpileuser/server.db $systemd

# The AppImage is not built with systemd integration at the moment,
# so type=simple should be used with it:
Type=simple
Restart=always

# If you're using a self-built or distribution provided version with
# systemd integration, use this to enable socket activation:
#Type=notify
#NotifyAccess=main

# Note: in order to use session recording and SSL safely,
# a dedicated user account should be created for drawpile-srv.
User=drawpileuser

[Install]
WantedBy=multi-user.target" > "$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service"
echo
sudo chmod 655 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service.backup"
sudo chmod 655 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service"
sudo chmod 655 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service"
echo
echo 'Copying files drawpile-srv.service and drawpile-srv.socket to make systemd work.'
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service" /etc/systemd/system/
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service" /etc/systemd/system/
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.socket" /etc/systemd/system/
echo
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
#
echo '*****Starting Drawpile Server . . .*****'
echo
if [ "`systemctl is-active drawpile-srv.socket`" = "enabled; vendor preset" ] 
then 
	sudo cp "/etc/systemd/system/drawpile-srv01.service" /etc/systemd/system/drawpile-srv.service
	echo
	echo 'Reloading systemctl and systemd.'
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	echo
	echo "drawpile-srv.socket previously enabled, starting up server."
	sudo systemctl start drawpile-srv.socket
else [ "`systemctl is-active drawpile-srv.service`" = "enabled; vendor preset" ] 
	sudo cp "/etc/systemd/system/drawpile-srv02.service" /etc/systemd/system/drawpile-srv.service
	echo
	echo 'Reloading systemctl and systemd.'
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	echo
	echo "drawpile-srv.service previously enabled, starting up server."
	sudo systemctl start drawpile-srv.service
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo '*****Drawpile Server Installation and Setup Complete . . .*****'
echo
echo 'Made with the assistance of the Creator of Drawpile! His PayPal E-mail if'
echo 'you want to donate some money as thanks for all that he does!'
echo 'laakkonenc@gmail.com'
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo 'If socket activation is enabled, it will say enabled on the line starting with'
echo '\"Loaded:\" and it should be running. Ignore the part after vendor preset.'
echo
systemctl status drawpile-srv.socket --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo 'If start up on Pi power up is enabled, it will say enabled on the line starting'
echo 'with \"Loaded:\" and it should be running. Ignore the part after vendor preset.'
echo
systemctl status drawpile-srv.service --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
read -p 'Press [Enter] key to close window...'
echo
#
#
# - End of Script. -