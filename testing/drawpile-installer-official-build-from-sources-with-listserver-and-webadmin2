#!/bin/bash
drawpilescriptversion=2.9899
drawpile_script_version=$drawpilescriptversion
script_name=drawpile-installer-official-build-from-sources-with-listserver-and-webadmin2
script_name2=drawpile-installer-official-build-from-sources-server-mgmt
script_main_url=https://raw.githubusercontent.com/Wade821/PiDrawpile/master
script_directory="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
#In case I decide to change the name
github_account_name=Wade821
github_project_name=PiDrawpile
# When no path being used, should look like github_sub_folder_path=""
github_main_script_only_sub_folder_path=testing/
# Normal line
# sudo wget -q --show-progress "https://raw.githubusercontent.com/Wade821/PiDrawpile/master/testing/drawpile-installer-official-build-from-sources-with-listserver-and-webadmin2"
# Example line
# sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/$github_main_script_only_sub_folder_path$script_name"
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# script_name=drawpile-installer-official-build-from-sources
# drawpile_script_overall_master_version_URL=https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/version.txt
# Do not alter script_main_url... instead, include subfolder in script_name variable. 
# See example included below for reference code.
#		sudo wget -q "$script_main_url/$script_name" --show-progress
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# Text Formatting
# https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash
# Refer to this link for lots of details and samples of colors (text + backgrounds)
# http://linuxcommand.org/lc3_adv_tput.php
#
bold=$(tput bold)
underline=$(tput smul)
blink=$(tput blink)
# black text on white background
standout=$(tput smso)
# Useful for hiding output I guess???
invis=$(tput invis)

# Text Colors
red=$(tput setaf 1)
green=$(tput setaf 2)
# Text Formatting - Yellow looks orange unless used in bold mode. Also looks brown in Fedora.
# yellow=$(tput setaf 3)
yellow=$(tput setaf 11)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)

#Background Colors
red_b=$(tput setab 1)
green_b=$(tput setab 2)
# Text Formatting - Yellow looks orange unless used in bold mode. Also looks brown in Fedora.
# yellow_b=$(tput setab 3)
yellow_b=$(tput setab 11)
blue_b=$(tput setab 4)
magenta_b=$(tput setab 5)
cyan_b=$(tput setab 6)

normal=$(tput sgr0)

TICK=$( printf '\u2714\n' )
CROSS=$( printf '\u274c\n' )
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
app_installation_status_file=/home/drawpileuser/App-Installation-Status.txt
app_installation_status_file_bak=/home/drawpileuser/App-Installation-Status_bak.txt
# See the section below for the creation of the file in script.
# Cannot use sed on an empty file containing no characters or new lines. 
drawpile_configuration_values_file=/home/drawpileuser/Drawpile_Configuration_Values.txt
drawpile_configuration_values_file_bak=/home/drawpileuser/Drawpile_Configuration_Values_bak.txt
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
<<comment_VNC_EOF
sudo apt-get install -y -q realvnc-vnc-server
apt-cache policy realvnc-vnc-server
comment_VNC_EOF
# ----------------------------------------------------------------------------------
<<comment_VMware_EOF
If running a VM with VMWare ... 
     https://docs.vmware.com/en/VMware-Tools/12.2.0/com.vmware.vsphere.vmwaretools.doc/GUID-C48E1F14-240D-4DD1-8D4C-25B6EBE4BB0F.html
sudo apt-get update
sudo apt-get install open-vm-tools-desktop
sudo apt-get install open-vm-tools
comment_VMware_EOF
# ----------------------------------------------------------------------------------
<<comment_DarkMode_EOF
If Dark mode preferred:
Start, Preferences, Main Menu Editor. Go to Preferences, turn on Theme and Appearance Settings. Click Ok.
Go back to Start, Preferences, Theme and Appearance Settings. Turn on "Adwaita-Dark". 
 
For the title bars, go to "Window Boarder" and select one of the following:
Dark Options:			Artwiz-boxed, Nightmware, Nightmware-01, Nightmware-02, Nightmware-03, Onyx, Onyx-Citrus
Preferred Options: 	Artwiz-boxed, Nightmware, Nightmware-02, Onyx
comment_DarkMode_EOF
# ----------------------------------------------------------------------------------
<<comment_geany_EOF
Enable Dark Themes for Geany Text: View, Change Color Scheme...

mkdir -p -v /home/$USER/Public/Programs && cd "/home/$USER/Public/Programs"
git clone https://github.com/codebrainz/geany-themes.git
cd geany-themes
./install.sh
cp -r /home/$USER/Public/Programs/geany-themes/colorschemes ~/.config/geany/colorschemes/


Enable Dark Themes One-liner Command for Geany Text: View, Change Color Scheme...

mkdir -p -v /home/$USER/Public/Programs && cd "/home/$USER/Public/Programs" && git clone https://github.com/codebrainz/geany-themes.git && cd geany-themes && ./install.sh && cp -r /home/$USER/Public/Programs/geany-themes/colorschemes ~/.config/geany/colorschemes/
comment_geany_EOF
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
function pause () {
	read -s -n 1 -p "Press any key to continue . . ."
	echo ""
}

function command_die () {
    echo "$@" 1>&2
    exit 1
}

function drawpile_credits_function () {
	echo 'Made with the assistance of the Creator of Drawpile! His PayPal E-mail if'
	echo 'you want to donate some money as thanks for all that he does!'
	echo "${underline}laakkonenc@gmail.com${normal}"
	echo
	echo 'If you want to send a Ko-Fi my way'
	echo '     https://ko-fi.com/bluestrings'
	echo
}

function drawpile_credits_urls_functions () {
	echo "Script Ver.	--> ${bold}$drawpile_script_version${normal}"
	echo "Google Doc 	--> ${underline}http://tinyurl.com/jx5oe4h ${normal}"
	echo "GitHub 		--> ${underline}https://github.com/Wade821/PiDrawpile.git ${normal}"
}
echo
drawpile_credits_function
drawpile_credits_urls_functions
echo
pause
echo
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
function language_check_and_verify_not_null_function () {
	# If value is null, check this value.
	lang=$( locale | grep LANGUAGE | cut -d= -f2 | cut -d_ -f1 )
	# echo "Value 01: $lang"
	if [ "$lang" == "" ]; then
		# If previous value is null, check this value instead.
		# Needed in Fedora (LANGUAGE not available), or if LANGUAGE= has nothing beside it.
		lang=$( locale | grep -m 1 LANG | cut -d= -f2 | cut -d_ -f1 )
		# echo "Value 02: $lang"
		if [ "$lang" == "" ]; then
			echo
			echo "${bold}${yellow}************************ POSSIBLE PROBLEM DETECTED *************************${normal}"
			echo 
			echo "${bold}${yellow}Unable to determine system language!${normal}"
			echo "${bold}${yellow}This may cause the script to not function properly!${normal}"
			echo
			echo "You may need to change your system's language in order for the script to"
			echo "     succeed. Certain prompts from text based utilities are checked"
			echo "     against English words, causing the script logic to fail in other"
			echo "     languages. A reboot of the system is required in most cases."
			echo "     "
			echo "${bold}${yellow}Pausing Script for 30 seconds . . . ${normal}"
			echo "     "
			echo "${bold}${yellow}************************ POSSIBLE PROBLEM DETECTED *************************${normal}"
			echo
			sleep 30
		fi
	fi
}

language_check_and_verify_not_null_function

if [ "$lang" == "en" ] || [ "$lang" == "C.UTF-8" ] || [ "$lang" == "" ]; then
	:
else
	echo
	echo "${bold}${red}***************************** PROBLEM DETECTED *****************************${normal}"
	echo 
	echo "${bold}${red}Not using English, currently using: $lang ${normal}"
	echo "${bold}${red}This will cause the script to not function properly!${normal}"
	echo
	echo "You'll need to change your system's language in order for the script to"
	echo "     succeed. Certain prompts from text based utilities are checked"
	echo "     against English words, causing the script logic to fail in other"
	echo "     languages. A reboot of the system is required in most cases."
	echo "     "
	# echo "Also, please check the user-dirs.dirs file to make sure it points at accurate"
	# echo "     folder names after reboot."
	# echo "sudo nano /home/USERNAME-HERE/.config/user-dirs.dirs"
	# Nevermind, the line doesn't appear necessary as it will still work, but just look mis-spelled for some reason... 
	echo "     "
	echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
	echo "     "
	echo "${bold}${red}***************************** PROBLEM DETECTED *****************************${normal}"
	echo
	sleep 30
	exit
fi
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
what_linux_name=$( cat /etc/*-release | grep -i "^NAME=" | awk '{$1=$1};1' )
what_linux_flavor=$( cat /etc/*-release | grep -i "PRETTY_NAME=" | awk '{$1=$1};1' )
what_architecture=$( hostnamectl | grep -i "Architecture" | awk '{$1=$1};1' )
# verify_if_this_is_raspbian_or_debian --> https://raspberrypi.stackexchange.com/questions/6974/how-can-i-determine-which-os-image-i-am-running
verify_if_this_is_raspbian_or_debian=$( cat /etc/rpi-issue 2>/dev/null | grep -i "Raspberry Pi" | awk '{ print $1 " " $2 }' )
verify_pi_model=$( cat /proc/cpuinfo | tr -d '\t' | grep -i "Model:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' | sed 's/Rev.*//' )
# Samples Below WITHOUT editing content
# Raspberry Pi Zero W Rev 1.1
# Raspberry Pi 3 Model B Rev 1.2
# Raspberry Pi 4 Model B Rev 1.1
# Samples Below WITH edited content based on string above
# Raspberry Pi Zero W
# Raspberry Pi 3 Model B
# Raspberry Pi 4 Model B
# ----------------------------------------------------------------------------------
<<comment_EOF
# NOTES ON SYSTEM PACKAGE INSTALLERS
https://docs.fedoraproject.org/en-US/quick-docs/dnf-vs-apt/
https://www.redhat.com/sysadmin/dnf-apt-users
https://www.ubuntubuzz.com/2017/03/comparison-of-common-commands-ubuntu-ubuntu-apt-fedora-dnf.html
apt-get -q -y install					dnf -q -y install
apt-get -q -y update					dnf -q -y check-update
apt-get -q -y upgrade					dnf -q -y upgrade

https://www.techrepublic.com/article/linux-101-how-to-clean-the-dnf-and-apt-caches/
apt-get clean							dnf clean dbcache / sudo dnf clean all

Will need to edit entire queries that use this command, information is formatted differently
apt-cache policy PACKAGENAME			dnf info PACKAGENAME
apt-cache search PACKAGENAME			dnf search PACKAGENAME

Should not need added, only for Pi
apt-key adv --recv-keys --keyserver		

comment_EOF
# ----------------------------------------------------------------------------------
function check_root_or_sudo_access_function () {
	echo
	if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
		echo "     ${bold}${green}Script running as root.${normal}"
	else
		sudo whoami
		root_available_check=$?
		if [ "$root_available_check" -eq "0" ]; then
			echo "     ${bold}${green}User has sudo access.${normal}"
		elif [ "$root_available_check" -eq "1" ]; then
			echo
			echo "${bold}${red}Please run script as root or user with sudoer access.${normal}"
			echo "Can try typing the following to login as root: su"
			echo "Then try running the script again."
			echo
			echo "${bold}${red}Exiting script in 30 seconds.${normal}"
			echo
			sleep 30
			exit
		else
			echo
			echo "${bold}${red}This message should not be visible.${normal}"
			echo "${bold}${red}Please run script as root or user with sudoer access.${normal}"
			echo "Can try typing the following to login as root: su"
			echo "Then try running the script again."
			echo
			echo "${bold}${red}Exiting script in 30 seconds.${normal}"
			echo
			sleep 30
			exit
		fi
	fi
	echo
}

function debian_update_check_online_working_function () {
	apt_sources_list=/etc/apt/sources.list
	if grep -q "^# deb cdrom:" $apt_sources_list; then
		echo "${invis}Debian CD-ROM entry is disabled.${normal}"
	elif grep -q "^deb cdrom:" $apt_sources_list; then
		echo "${bold}${red}Debian CD-ROM entry is enabled.${normal}"
		echo
		echo "Script may not function as intended. Please add a viable update"
		echo "mirror for use by clicking on activities, click on 'Type to search',"
		echo "type in 'Software', open 'Software & Updates', click on"
		echo "'Other Software', and paste in one of the links below. Make sure to"
		echo "disable the 'cdrom' option and click 'Close'."
		echo
		echo "${bold}${cyan}For US-based Users:${normal}"
		echo "deb http://ftp.us.debian.org/debian stable main contrib"
		echo
		echo "${bold}${cyan}For other locations, consult the Debian Mirrors (worldwide) list:${normal}"
		echo "     https://www.debian.org/mirror/list"
		echo
		echo "${bold}${cyan}Re-director Service${normal}"
		echo "The Re-director service aims to solve the problem of choosing a Debian"
		echo "mirror. It uses the geographic location of the user and other information" 
		echo "to choose the best mirror that can serve the files."
		echo
		echo "deb http://httpredir.debian.org/debian stable main contrib"
		echo
		echo 
		echo "When you're ready, press any key to continue."
		echo
		pause
	else
		echo "${bold}${red}Message should not be visible for Debian.${normal}"
		echo "However I can't figure out better way to check if updates are"
		echo "enabled in Debian or not."
	fi
}

function debian_x86_64_vs_arm_function () {
	if [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
		echo "${bold}${green}Running Raspbian on Raspberry Pi (arm64 Processor).${normal}" 
	elif [ "$what_architecture" == "Architecture: x86-64" ]; then
		if [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
			echo "${bold}${green}Running Raspbian for Desktop (x86-64).${normal}"
		elif [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			echo "${bold}${green}Running Debian (x86-64).${normal}"
			check_root_or_sudo_access_function
			debian_update_check_online_working_function
		else
			echo "${bold}${green}Unsure if running Debian or Raspbian for Desktop (x86-64).${normal}"
		fi
	else
		echo "${bold}${red}Unable to identify architecture. Exiting script.${normal}"
		echo
		sleep 30
		exit
	fi
}

function apt_get_function () {
	# Used to verify if command apt is available and exit script if not.
	# Doing this three different ways in order to make sure the command
	# is absolutely available for use as the script depends on it working.
	command -v apt > /dev/null 2>&1 || type apt > /dev/null 2>&1 || hash apt 2>/dev/null || { echo >&2 "Script requires package apt but it's not installed. Exiting script in 30 seconds."; sleep 30; exit 1; }
	#
	package_install_program="apt-get -q -y install"
	packages_update_program="apt-get -q -y update"
	packages_system_upgrade="apt-get -q -y upgrade"
	packages_clean_program="apt-get clean"
	package_info_program="apt-cache policy"
}

function dnf_function () {
	package_install_program="dnf -q -y install"
	packages_update_program="dnf -q -y check-update"
	packages_system_upgrade="dnf -q -y upgrade"
	packages_clean_program="echo ${invis} Skipping 'dnf clean dbcache' ${normal}"
	package_info_program="dnf info"
}

function adduser_and_addgroup_function () {
	# Debian and Ubuntu
	user_add_program="adduser"
	# sudo $user_add_program $current_username drawpileread
	# sudo $user_add_program drawpileuser $user_add_options_program_01 $user_add_options_program_02
	group_add_program="addgroup"
	# sudo $group_add_program drawpileread
	user_add_options_program_01="-ingroup users"
	user_add_options_program_02="--gecos \"\""
	user_add_options_program_03="adduser drawpileuser drawpileread"
}

function useradd_and_groupadd_function () {
	# Fedora
	user_add_program="useradd"
	# sudo $user_add_program $current_username drawpileread
	# sudo $user_add_program drawpileuser $user_add_options_program_01 $user_add_options_program_02
	group_add_program="groupadd"
	# sudo $group_add_program drawpileread
	user_add_options_program_01="-g users"
	user_add_options_program_02=""
	user_add_options_program_03="usermod -a drawpileuser -G drawpileread"
	# sudo userdel drawpileuser
	# sudo rm -R /home/drawpileuser
	# sudo groupdel drawpileread
}

function fedora_end_of_life_function () {
	fedora_release_recommended=38
	fedora_release_minimum=37
	
	echo "${bold}${red}It is not recommended to continue without updating${normal}"
	echo "${bold}${red}to a new, supported version ($fedora_release_minimum or higher).${normal}"
	echo
	echo "${bold}${red}Version 33 at minimum should work with Drawpile Beta 2.2 server${normal}"
	echo "${bold}${red}as of 2023-09-16, though the latest version $fedora_release_recommended ${normal}"
	echo "${bold}${red}is recommended for security reasons. However, don't go up more than 2${normal}"
	echo "${bold}${red}versions at one time (it won't work). You may need to reboot again${normal}"
	echo "${bold}${red}after the update has completed. ${normal}"
	echo 
	echo "${bold}${white}${underline}https://docs.fedoraproject.org/en-US/releases/eol/${normal}"
	echo
	echo
	echo "${bold}${yellow}Use these commands to prep upgrade:${normal}"
	echo "     dnf --refresh upgrade"
	echo "     sudo dnf install -y -q dnf-plugin-system-upgrade"
	echo "     sudo dnf system-upgrade download --releasever=$fedora_release_recommended" # echo "     sudo dnf system-upgrade download --releasever=32"
	echo
	echo "${bold}${yellow}Use this command to start upgrade:${normal}"
	echo "     dnf system-upgrade reboot"
	echo
	echo "${bold}${yellow}Remove cached metadata and transaction:${normal}"
	echo "     dnf system-upgrade clean"
	echo "${bold}${yellow}Remove cached packages:${normal}"
	echo "     dnf clean packages"
	echo
	# Failing that, you may need to remove old kernels.
	# https://haydenjames.io/fix-least-xmb-space-needed-boot-filesystem/
	# df -h
	#
	# https://almalinux.discourse.group/t/cleaning-old-kernels-alternatives-to-package-cleanup-oldkernels/695
	# dnf remove $(dnf repoquery --installonly --latest-limit=-2 -q)
	echo "Waiting 30 seconds before continuing script."
	sleep 30
}
# ----------------------------------------------------------------------------------
if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] || [ "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]; then
	apt_get_function
	adduser_and_addgroup_function
	if [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 9 (stretch)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 9 (stretch)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 9 (stretch)${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 10 (buster)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 10 (buster)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 10 (buster)${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 11 (bullseye)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 11 (bullseye)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 11 (bullseye)${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Debian GNU/Linux 12 (bookworm)\"" ] || [ "$what_linux_flavor" == "PRETTY_NAME=\"Raspbian GNU/Linux 12 (bookworm)\"" ]; then
		debian_x86_64_vs_arm_function
		echo "${bold}${green}Debian GNU/Linux 12 (bookworm)${normal}"
	else
		echo "${bold}${red}Unable to identify. Exiting script.${normal}"
		echo
		sleep 30
		exit
	fi
elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
	apt_get_function
	adduser_and_addgroup_function
	if [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.1 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.1 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.2 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.2 LTS.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Ubuntu 22.04.3 LTS\"" ]; then
		echo "${bold}${green}Running Ubuntu 22.04.3 LTS.${normal}"
	elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
		echo "${bold}${yellow}Running Ubuntu, version may not be supported.${normal}"
		sleep 30
	else
		echo "${bold}${red}Unable to identify. Exiting script.${normal}"
		echo 
		sleep 30
		exit
	fi	
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	what_fedora_variant=$( cat /etc/*-release | grep -i "^VARIANT_ID" )
	dnf_function
	useradd_and_groupadd_function
	check_root_or_sudo_access_function
	if [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 38 (Workstation Edition)\"" ]; then
		echo "${bold}${green}Running Fedora Workstation 38.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 38 (Server Edition)\"" ]; then
		echo "${bold}${green}Running Fedora Server 38.${normal}" && echo && echo "${bold}${yellow}End of Life support is 2024-05-14.${normal}"
	elif [ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 37 (Server Edition)\"" ]; then
		echo "${bold}${green}Running Fedora Server 37.${normal}" && echo && echo "${bold}${yellow}End of Life support is 2023-11-14.${normal}"
	elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 36 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 36 (Server Edition)\"" ]]; then
		echo "${bold}${red}Running Fedora Server 36.${normal}" && echo && echo "${bold}${red}End of Life support since 2023-05-16.${normal}"
		fedora_end_of_life_function
	elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 35 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 35 (Server Edition)\"" ]]; then
		echo "${bold}${red}Running Fedora Server 35.${normal}" && echo && echo "${bold}${red}End of Life support since 2022-12-13.${normal}"
		fedora_end_of_life_function
	elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 34 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 34 (Server Edition)\"" ]]; then
		echo "${bold}${red}Running Fedora Server 34.${normal}" && echo && echo "${bold}${red}End of Life support since 2022-06-07.${normal}"
		fedora_end_of_life_function
	elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 33 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 33 (Server Edition)\"" ]]; then
		echo "${bold}${red}Running Fedora Server 33.${normal}" && echo && echo "${bold}${red}End of Life support since 2021-11-30.${normal}"
		fedora_end_of_life_function
	elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
		echo "${bold}${red}Running Fedora Server 32.${normal}" && echo && echo "${bold}${red}End of Life support since 2021-05-25.${normal}"
		fedora_end_of_life_function
	elif [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" ]]; then
		echo "${bold}${red}Running Fedora Server 31.${normal}" && echo && echo "${bold}${red}End of Life support since 2020-11-24.${normal}"
		fedora_end_of_life_function
	elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		echo "${bold}${yellow}Running Fedora, version may not be supported.${normal}"
		echo
		sleep 30
	else
		echo "${bold}${red}Unable to identify. Exiting script.${normal}"
		echo
		sleep 30
		exit
	fi
else
	echo "${bold}${red}Unable to identify. Exiting script.${normal}"
	echo
	sleep 30
	exit
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
# 
# Used to verify if command sudo is available and warn if not.
# Will warn user to run as root if sudo is not available.
#
# Doing this three different ways in order to make sure the command
# is absolutely available for use as the script depends on it working.
#

echo
[[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || command -v sudo > /dev/null 2>&1 || type sudo > /dev/null 2>&1 || hash sudo 2>/dev/null || { echo >&2 "Script requires sudo or root access. Exiting script in 30 seconds."; sleep 30; exit 1; }
#

# 
# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------

mem_total=$( free -m | grep -i "Mem" | awk '{ print $2 }' )
# mem_free=$( free -m | grep -i "Mem" | awk '{ print $4 }' )
swap_total=$( free -m | grep -i "Swap" | awk '{ print $2 }' )
# swap_free=$( free -m | grep -i "Swap" | awk '{ print $4 }' )

function no_swap_function () {
	# How do I increase swapfile in Ubuntu 18.04? [duplicate]	--> https://askubuntu.com/questions/1075505/how-do-i-increase-swapfile-in-ubuntu-18-04
	# 																https://cdn.discordapp.com/attachments/556300450228338740/1147000402424893570/image.png?ex=6514e9de&is=6513985e&hm=6c4be23be022eacfb1a53526014de22aeadd6f3b3fd4510c4c8be47d7676ac0b&
	# Check Swap File to Prevent npm install From Being Killed	--> https://codentrick.com/check-swap-file-to-prevent-npm-install-can-be-killed/
	# Understanding vm.swappiness 								--> https://linuxhint.com/understanding_vm_swappiness/
	echo "It appears the system memory is less than 512 MB and that your system does"
	echo "not have enough memory to set up certain parts of the script. However, here"
	echo "are some configuration commands which should help, as it permanently"
	echo "increases swap to 1024MB of space."
	echo
	echo "Creates a swap file of the designated size:"
	echo "     sudo fallocate -l 1G /swapfile"
	echo
	echo "Assigns read/write permissions for root only (tightens security)."
	echo "     sudo chmod 600 /swapfile"
	echo
	echo "Formats the file as swap."
	echo "     sudo mkswap /swapfile"
	echo
	echo "The file will be activated on the next reboot, however, if you want to"
	echo "activate it for the current session, use this command: "
	echo "     sudo swapon /swapfile"
	echo
	echo "Configure the swap file usage to prevent application crashes. Setting it to"
	echo "10% means that if there is less than 10% to use the swap file."
	echo "     echo 10 | sudo tee /proc/sys/vm/swappiness"
	echo "     echo vm.swappiness = 10 | sudo tee -a /etc/sysctl.conf"
	echo
	echo "To make the above changes permanent, the script will check /etc/fstab to see"
	echo "if a swapfile line exists already. If it exists, no changes will be made. If"
	echo "it does not exist, then the following line will be added:"
	echo "     /swapfile none swap sw 0 0"
	echo
	echo "Changes can be made manually with: sudo nano /etc/fstab"
	echo
	echo "Would you like to attempt this fix automatically?"
	echo "Script will exit otherwise."
	echo
	while :; do
		read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " ubuntu_pagefile_fix
		echo
		if [ "$ubuntu_pagefile_fix" == "y" ] || [ "$ubuntu_pagefile_fix" == "Y" ] || [ "$ubuntu_pagefile_fix" == "yes" ] || [ "$ubuntu_pagefile_fix" == "YES" ] || [ "$ubuntu_pagefile_fix" == "Yes" ] || [ "$ubuntu_pagefile_fix" == "n" ] || [ "$ubuntu_pagefile_fix" == "N" ] || [ "$ubuntu_pagefile_fix" == "no" ] || [ "$ubuntu_pagefile_fix" == "NO" ] || [ "$ubuntu_pagefile_fix" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [ "$ubuntu_pagefile_fix" == "yes" ] || [ "$ubuntu_pagefile_fix" == "YES" ] || [ "$ubuntu_pagefile_fix" == "Yes" ] || [ "$ubuntu_pagefile_fix" == "Y" ] || [ "$ubuntu_pagefile_fix" == "y" ] ; then
		sudo fallocate -l 1G /swapfile
		sudo chmod 600 /swapfile
		sudo mkswap /swapfile
		sudo swapon /swapfile
		echo 10 | sudo tee /proc/sys/vm/swappiness
		echo vm.swappiness = 10 | sudo tee -a /etc/sysctl.conf
		if grep -qw "/swapfile" /etc/fstab; then
			echo "${bold}${red}Found content indicating swap file already made persistent.${normal}"
			echo "${bold}${red}Skipping addition of content.${normal}"
		else
			echo "${bold}${yellow}Did not find persistent swap file in /etc/fstab${normal}".
			if [ ! -e /etc/fstab.backup ]; then
				echo "${bold}${yellow}Making backup of /etc/fstab${normal}".
				sudo cp -v /etc/fstab /etc/fstab.backup
			else
				echo "${bold}${green}Backup exists of /etc/fstab.backup${normal}".
			fi
			echo
			echo "${bold}${yellow}Appending data to /etc/fstab${normal}".
			echo "     /swapfile none swap sw 0 0"
			#  Might want to add an extra blank line in case someone saved their fstab without a terminating newline.
			cat <<EOF | sudo tee -a /etc/fstab >/dev/null

/swapfile none swap sw 0 0
EOF
		fi
		echo
		echo "Operations complete."
	else
		echo
		echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
		sleep 30
		exit
	fi
}

no_swap_available=false
if (( "$swap_total" == "0" )) && (( "$mem_total" <= "512" )); then
	no_swap_available=true
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "It appears the system memory is less than 512 MB and that your system does"
	echo "not have a swap file. This will probably cause issues with generating"
	echo "Listserver with 'go install'."
	echo
	echo "Sample Problem this attempts to address:"
	echo '--------------------------------------------------------------------------------'
	echo "apt-get install -y -q golang"
	echo "go install 'github.com/drawpile/listserver@latest'"
	echo "crawshaw.io/sqlite"
	echo "gcc: fatal error: Killed signal terminated program cc1"
	echo "Compilation terminated."
	echo '--------------------------------------------------------------------------------'
	echo
	if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
		no_swap_function
	elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] || [ "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]; then
		no_swap_function
	else
		echo "Should consider increasing swap file size to at least 1024 MB to ensure"
		echo "adequate resources available for setup."
		echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
		sleep 30
		exit
	fi
fi

if [ "$ubuntu_pagefile_fix" == "yes" ] || [ "$ubuntu_pagefile_fix" == "YES" ] || [ "$ubuntu_pagefile_fix" == "Yes" ] || [ "$ubuntu_pagefile_fix" == "Y" ] || [ "$ubuntu_pagefile_fix" == "y" ] ; then
	mem_total=$( free -m | grep -i "Mem" | awk '{ print $2 }' )
	# mem_free=$( free -m | grep -i "Mem" | awk '{ print $4 }' )
	swap_total=$( free -m | grep -i "Swap" | awk '{ print $2 }' )
	# swap_free=$( free -m | grep -i "Swap" | awk '{ print $4 }' )
	if (( "$swap_total" == "0" )); then
		echo "${bold}${red}It appears the swap increase attempt failed.${normal}"
		echo "${bold}${red}Please manually adjust and restart the script.${normal}"
		echo
		echo "${bold}${red}Exiting Script in 30 seconds . . . ${normal}"
		sleep 30
		exit
	fi
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'

if [ $(getent group drawpileread) ]; then
	echo "Group: drawpileread - exists."
	drawpileread_test=yes
else
	echo "Group: drawpileread - does not exist."
	sudo $group_add_program drawpileread
	# sudo -s -u ${USER}
	drawpileread_test=no
fi

# Regular Expression - Regex expression - search without ". matches newline" to search for entries in Notepad++
# chmod .* /home/drawpileuser

# Cannot use sed on an empty file containing no characters or new lines. 

function stored_data_creation_files_function () {
	if [[ -e "$app_installation_status_file" ]]; then
		# Do nothing
		:
		# sudo mv "$app_installation_status_file" "$app_installation_status_file_bak"
		sudo chmod 777 $app_installation_status_file
		sudo chown drawpileuser:drawpileread $app_installation_status_file
		# sudo chmod 777 $app_installation_status_file_bak
		# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $app_installation_status_file > /dev/null 2>&1
		# Not sure if I want to update noted script version on new script run
		# sudo sed -i '\!^drawpilescriptversion =!{h;s!=.*!= '"$drawpilescriptversion"'!};${x;\!^$!{s!!drawpilescriptversion = '"$drawpilescriptversion"'!;H};x}' $app_installation_status_file
	elif [[ ! -e "$app_installation_status_file" ]]; then
		echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $app_installation_status_file > /dev/null 2>&1
		sudo chmod 777 $app_installation_status_file
		sudo chown drawpileuser:drawpileread $app_installation_status_file
	else
		echo This message for "$app_installation_status_file" should not be visible.
	fi

	if [[ -e "$drawpile_configuration_values_file" ]]; then
		# sudo mv "$drawpile_configuration_values_file" "$drawpile_configuration_values_file_bak"
		sudo chmod 777 $drawpile_configuration_values_file
		sudo chown drawpileuser:drawpileread $drawpile_configuration_values_file
		# sudo chmod 777 $drawpile_configuration_values_file_bak
		# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $drawpile_configuration_values_file > /dev/null 2>&1
		# Not sure if I want to update noted script version on new script run
		# sudo sed -i '\!^drawpilescriptversion =!{h;s!=.*!= '"$drawpilescriptversion"'!};${x;\!^$!{s!!drawpilescriptversion = '"$drawpilescriptversion"'!;H};x}' $drawpile_configuration_values_file
	elif [[ ! -e "$drawpile_configuration_values_file" ]]; then
		echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $drawpile_configuration_values_file > /dev/null 2>&1
		sudo chmod 777 $drawpile_configuration_values_file
		sudo chown drawpileuser:drawpileread $drawpile_configuration_values_file
	else
		echo This message for "$drawpile_configuration_values_file" should not be visible.
	fi
}

echo
if ! id -u drawpileuser > /dev/null 2>&1; then
	echo "${bold}${cyan}*****Adding user for security purposes for Drawpile . . .*****${normal}"
	echo
	echo 'The server cannot run under a user with root access, so we must create a new'
	echo 'user. This is being created immediately in order to accomodate Drawpile' 
	echo 'specific configuration information which is now saved for later reference.'
	echo
	echo 'This has potential applications, like uninstalling the script changes made'
	echo 'to your machine, reading server specific configuration, making updates and'
	echo 'changes to script features easier in the future.'
	echo
	sudo $user_add_program drawpileuser $user_add_options_program_01 $user_add_options_program_02
	sudo $user_add_options_program_03
	sudo chmod 770 /home/drawpileuser/ -R
	sudo chmod 777 /home/drawpileuser/
	# find /home/drawpileuser/ -type d -exec chmod 755 {} \;
	# sudo chown drawpileuser /home/drawpileuser/ -R
	stored_data_creation_files_function
	# echo "drawpilescriptversion = $drawpilescriptversion" | sudo tee -a $app_installation_status_file > /dev/null 2>&1
	sudo sed -i '\!^drawpileuser =!{h;s!=.*!= no!};${x;\!^$!{s!!drawpileuser = no!;H};x}' $app_installation_status_file
else
	sudo chmod 777 /home/drawpileuser/ -R
	# sudo chown drawpileuser /home/drawpileuser/ -R
	sudo chmod 777 /home/drawpileuser/
	# Clears up an empty line that appears in the file at the beginning.
	sudo sed -i '/^$/d' $app_installation_status_file
	if grep -qw "drawpileuser" $app_installation_status_file; then
		echo "Entry already made for drawpileuser, skipping entry for App Installation Status."
	else
		sudo sed -i '\!^drawpileuser =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpileuser = '"yes"'!;H};x}' $app_installation_status_file
	fi
	stored_data_creation_files_function
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------

function select_non_root_account () {
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "When running script with sudo or su, please specify your user account name"
	echo "with a valid user directory indicated below."
	echo
	echo "Here are a list of folders in the home directory:"
	ls -d /home/*/
	echo
	read -r -p "Enter username: " current_username
	echo
	while [[ ! -e "/home/$current_username" ]]
	do
		echo '--------------------------------------------------------------------------------'
		echo
		echo "Invalid user name entered (no matching home directory). Please "
		echo "enter a valid user name with a user directory indicated below:"
		ls -d /home/*/
		echo
		read -r -p "Enter user name: " current_username
		echo
	done
}

# Prompt for user name change if root detected, first attempting Pi (and verifying), 
#     and requesting user input with verification directory exists.

if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]]; then
	current_username=pi
	if [[ -e "/home/$current_username" ]]; then
		# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	else
		select_non_root_account
	fi
else
	current_username=$USER
fi

if [ "$drawpileread_test" == "yes" ]; then
	# Do nothing, no action required
	:
elif [ "$drawpileread_test" == "no" ]; then
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		sudo $user_add_program $current_username drawpileread
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		sudo usermod -a $current_username -G drawpileread
	fi
fi

# ----------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------

drawpile_script_completed_test=$( grep 'drawpile_script_completed = ' $drawpile_configuration_values_file 2>/dev/null )

if [[ "$drawpile_script_completed_test" == "drawpile_script_completed = no" ]]; then
	echo "${invis}Script not yet completed one run successfully.${normal}"
	# Do nothing, no action required
	:
elif [[ "$drawpile_script_completed_test" == "drawpile_script_completed = yes" ]]; then
	# if grep 'drawpile_script_completed = yes' $drawpile_configuration_values_file > /dev/null; then
	echo "${red}${bold}WOAH BUDDY! THIS SCRIPT WAS NOT INTENDED FOR MULTIPLE RUNS AFTER${normal}"
	echo "${red}${bold}A SUCCESSFUL INSTALLATION/RUN OF THE SCRIPT!!!!!${normal}"
	echo
	echo "You should run the update script or server management scripts."
	echo
	read -r -p "Are you sure you want to re-run this script? (Y)es or (N)o: " drawpile_script_completed_warning
	echo
	if [[ "$drawpile_script_completed_warning" = "yes" ]] || [[ "$drawpile_script_completed_warning" = "YES" ]] || [[ "$drawpile_script_completed_warning" = "Yes" ]] || [[ "$drawpile_script_completed_warning" = "y" ]] || [[ "$drawpile_script_completed_warning" = "Y" ]]; then
		echo "${invis}Ignoring warning: drawpile_script_completed_warning${normal}"
		sudo sed -i '\!^drawpile_script_completed_warning =!{h;s!=.*!= '"ignored"'!};${x;\!^$!{s!!drawpile_script_completed_warning = '"ignored"'!;H};x}' $drawpile_configuration_values_file
	elif [[ "$drawpile_script_completed_warning" = "no" ]] || [[ "$drawpile_script_completed_warning" = "NO" ]] || [[ "$drawpile_script_completed_warning" = "No" ]] || [[ "$drawpile_script_completed_warning" = "n" ]] || [[ "$drawpile_script_completed_warning" = "N" ]]; then
		echo Exiting script.
		sleep 10
		exit
	else
		echo Invalid option selected! Exiting script.
		sleep 10
		exit
	fi
else
	echo "${invis}First time script is running. Adding value for later query.${normal}"
	sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!drawpile_script_completed = '"no"'!;H};x}' $drawpile_configuration_values_file
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo

function read_stored_config_value_query_function () {
	read_stored_config_value_query_1=$( grep -m 1 "$variable_to_read_1 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	[ -z "$variable_to_read_2" ] || read_stored_config_value_query_2=$( grep -m 1 "$variable_to_read_2 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	[ -z "$variable_to_read_3" ] || read_stored_config_value_query_3=$( grep -m 1 "$variable_to_read_3 = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	
	if [ -z "$read_stored_config_value_query_1" ] || [ "$read_stored_config_value_query_1" = "=" ]; then
		echo "${invis}No value read from file: $drawpile_configuration_values_file ${normal}"
		# Force user to insert proper data this way without having to check for null variable.
		maybe_use_config_value=no
	else
		echo "${green}Value located:${normal} $read_stored_config_value_query_1"
		echo
		[ -z "$value_description_1" ] || echo "$value_description_1"
		[ -z "$value_description_2" ] || echo "$value_description_2"
		[ -z "$value_description_3" ] || echo "$value_description_3"
		[ -z "$value_description_4" ] || echo "$value_description_4"
		[ -z "$value_description_5" ] || echo "$value_description_5"
		[ -z "$value_description_1" ] || echo
		[ -z "$variable_to_read_2" ] || echo "Query 02: $read_stored_config_value_query_2"
		[ -z "$variable_to_read_2" ] || echo
		[ -z "$variable_to_read_3" ] || echo "Query 03: $read_stored_config_value_query_3"
		[ -z "$value_description_1" ] || echo
		while :; do
			read -r -p "Would you like to use this value again? (Y)es or (N)o: " maybe_use_config_value
			echo
			if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ] || [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
	fi
	variable_to_read_2=""
	variable_to_read_3=""
	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""
}

<<comment_EOF
variable_to_read_1="freeDNS_input"
variable_to_read_2=""
variable_to_read_3=""
read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	freeDNS_input_1=$read_stored_config_value_query_1
	freeDNS_input_2=$read_stored_config_value_query_2
	freeDNS_input_3=$read_stored_config_value_query_3
	drawpile_build_configuration_number_desc=$read_stored_config_value_query_2
	drawpile_build_configuration_settings=$read_stored_config_value_query_3
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "Not using value. Please insert new value."
else
	echo "This message should not be visible."
fi

echo "derp $freeDNS_input VALUE"
comment_EOF

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

function version_test_by_distro_function () {
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] ; then
		if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" = "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]] || [[ "$what_linux_name" == "NAME=\"Ubuntu\"" ]]; then
			apt-cache show $package_name > /dev/null 2>&1
			not_available_check=$?
			# 0 equals exists, 100 equals does not exist.
			if [ "$not_available_check" == "0" ]; then
				:
			elif [ "$not_available_check" == "100" ]; then
				not_available_check=1
				# echo "Error: No matching Packages to list"			
			else
				test_version="error_02_not_found"
				test_update_version="error_02_not_found"
				test_installation_status="error_02_not_found"
				echo "${bold}${red}This message for does not exist check for Debian/Ubuntu should not be visible.${normal}"
			fi
		else
			dpkg -l $package_name > /dev/null 2>&1
			not_available_check=$?
		fi
		# 0 equals exists, 1 equals does not exist.
		if [ "$not_available_check" == "1" ]; then
			# Package doesn't exist.
			test_version="error_01_does_not_exist"
			test_update_version="error_01_does_not_exist"
			test_installation_status="error_01_does_not_exist"
			# echo "Error: No matching Packages to list"
		elif [ "$not_available_check" == "0" ]; then
			# Now that we know the package exists, it's time to determine if it's even installed.
			installation_status=$( apt-cache policy $package_name | grep "Installed:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
			candidate_status=$( apt-cache policy $package_name | grep "Candidate:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
			if [ "$installation_status" == "(none)" ]; then
				# Not installed.
				test_version="Not Installed"
				test_version_simple="Not Installed"
				test_update_version="$candidate_status"
				test_update_version_simple="$candidate_status"
				test_installation_status="Not Installed"
				# echo "Package $package_name is not installed but can be installed with version: $candidate_status"
			else
				if [ "$candidate_status" = "$installation_status" ]; then
					# Installed and up to date.
					test_version="$installation_status"
					test_version_simple="$installation_status"
					test_update_version="$candidate_status"
					test_update_version_simple="$candidate_status"
					test_installation_status="Installed and up to date"
					# echo "Package $package_name is installed and up to date ($candidate_status)."
				elif [ "$candidate_status" > "$installation_status" ]; then
					# Installed and not up to date.
					test_version="$installation_status"
					test_version_simple="$installation_status"
					test_update_version="$candidate_status"
					test_update_version_simple="$candidate_status"
					test_installation_status="Installed and not up to date"
					# echo "Package $package_name is installed ($installation_status) and there is an update available ($candidate_status)."
				else
					test_version="error_02_not_found"
					test_update_version="error_02_not_found"
					test_installation_status="error_02_not_found"
					echo "${bold}${red}This message for does not exist check should not be visible. (Not Fedora - 1)${normal}"
				fi
			fi
		else
			test_version="error_02_not_found"
			test_update_version="error_02_not_found"
			test_installation_status="error_02_not_found"
			echo "${bold}${red}This message for does not exist check should not be visible. (Not Fedora - 2)${normal}"
		fi
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		# Because the line below always returns the 2nd line output, that means the package is either already installed, not installed (but could be installed), or doesn't exist.
		# 		Installed Packages / Available Packages / Error: No matching Packages to list
		dnf info $package_name > /dev/null 2>&1
		not_available_check=$?
		# 0 equals exists, 1 equals does not exist.
		if [ "$not_available_check" == "1" ]; then
			test_version="error_01_does_not_exist"
			test_update_version="error_01_does_not_exist"
			test_installation_status="error_01_does_not_exist"
			# echo "Error: No matching Packages to list"
		elif [ "$not_available_check" == "0" ]; then
			installation_status=$( dnf info $package_name | sed -n '2 p' )
			installation_status_candidate_check=$( dnf info $package_name | grep -i "Available Packages" )
			if [ "$installation_status" == "Installed Packages" ]; then
				if [ "$installation_status_candidate_check" == "Available Packages" ]; then
					# Package is installed, but an update is available.
					candidate_status=$( dnf info $package_name | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
					candidate_status_02=$( dnf info $package_name | grep -i "Release" | tr -s " " | grep -i "Release :" | tail -1 | awk '{ print $3 }' )
					version=$( dnf info $package_name | grep -i "Version" | tr -s " " | grep -i -m 1 "Version :" | tail -1 | awk '{ print $3 }' )
					version_02=$( dnf info $package_name | grep -i "Release" | tr -s " " | grep -i -m 1 "Release :" | tail -1 | awk '{ print $3 }' )
					test_version="$version-$version_02"
					test_version_simple="$version"
					test_update_version="$candidate_status-$candidate_status_02"
					test_update_version_simple="$candidate_status"
					test_installation_status="Installed and not up to date"
				elif [ "$installation_status_candidate_check" == "" ]; then
					# Package is installed and up to date
					version=$( dnf info $package_name | grep -i "Version" | tr -s " " | grep -i -m 1 "Version :" | tail -1 | awk '{ print $3 }' )
					version_02=$( dnf info $package_name | grep -i "Release" | tr -s " " | grep -i -m 1 "Release :" | tail -1 | awk '{ print $3 }' )
					test_version="$version-$version_02"
					test_version_simple="$version"
					test_update_version="$version-$version_02"
					test_update_version_simple="$version"
					test_installation_status="Installed and up to date"
				else
					test_version="error_02_not_found"
					test_update_version="error_02_not_found"
					test_installation_status="error_02_not_found"
					echo "This not available check for Fedora should not be visible."
				fi
			elif [ "$installation_status" == "Available Packages" ]; then
				# Package is not yet installed.
				candidate_status=$( dnf info $package_name | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
				candidate_status_02=$( dnf info $package_name | grep -i "Release" | tr -s " " | grep -i "Release :" | tail -1 | awk '{ print $3 }' )
				test_version="Not Installed"
				test_update_version="$candidate_status-$candidate_status_02"
				test_update_version_simple="$candidate_status"
				test_installation_status="Not Installed"
			else
				test_version="error_02_not_found"
				test_update_version="error_02_not_found"
				test_installation_status="error_02_not_found"
				echo "${bold}${red}This message for does not exist check should not be visible. (Fedora - 1)${normal}"
			fi
		else
			test_version="error_02_not_found"
			test_update_version="error_02_not_found"
			test_installation_status="error_02_not_found"
			echo "${bold}${red}This message for does not exist check should not be visible. (Fedora - 2)${normal}"
		fi
	fi
}

<<comment_EOF

Example for testing versions. 

package_name=golang
version_test_by_distro_function

if [ "$test_installation_status" == "error_01_does_not_exist" ]; then
	echo "The $package_name was not found for installation."
elif [ "$test_installation_status" == "Not Installed" ]; then
	echo "The $package_name package is not yet installed, can install: $test_update_version"
elif [ "$test_installation_status" == "Installed and up to date" ]; then
	echo "The $package_name package is installed and up to date ($test_version)."
elif [ "$test_installation_status" == "Installed and not up to date" ]; then
	echo "Package $package_name is installed ($test_version) and there is an update available ($test_update_version)."
else
	echo "This not available check for Fedora/Debian should not be visible."
fi

comment_EOF

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# 
# This section checks for language specific folder names
# 
<<comment_EOF

/home/pi/.config/user-dirs.dirs
# --------------------------------------------------------------------------------
# This file is written by xdg-user-dirs-update
# If you want to change or add directories, just edit the line you're
# interested in. All local changes will be retained on the next run.
# Format is XDG_xxx_DIR="$HOME/yyy", where yyy is a shell-escaped
# homedir-relative path, or XDG_xxx_DIR="/yyy", where /yyy is an
# absolute path. No other format is supported.
# 
XDG_DESKTOP_DIR="$HOME/Desktop"
XDG_DOWNLOAD_DIR="$HOME/Downloads"
XDG_TEMPLATES_DIR="$HOME/Templates"
XDG_PUBLICSHARE_DIR="$HOME/Public"
XDG_DOCUMENTS_DIR="$HOME/Documents"
XDG_MUSIC_DIR="$HOME/Music"
XDG_PICTURES_DIR="$HOME/Pictures"
XDG_VIDEOS_DIR="$HOME/Videos"
# --------------------------------------------------------------------------------
grep -m 1 "XDG_DOCUMENTS_DIR=" "/home/$current_username/.config/user-dirs.dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//'

comment_EOF

local_user_dirs="/home/$current_username/.config/user-dirs.dirs"

if [[ -e "$local_user_dirs" ]]; then
	XDG_PUBLICSHARE_DIR=$( grep -m 1 "XDG_PUBLICSHARE_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_DESKTOP_DIR=$( grep -m 1 "XDG_DESKTOP_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_DOCUMENTS_DIR=$( grep -m 1 "XDG_DOCUMENTS_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_PICTURES_DIR=$( grep -m 1 "XDG_PICTURES_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	
	XDG_MUSIC_DIR=$( grep -m 1 "XDG_MUSIC_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_VIDEOS_DIR=$( grep -m 1 "XDG_VIDEOS_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	XDG_DOWNLOAD_DIR=$( grep -m 1 "XDG_DOWNLOAD_DIR=" "$local_user_dirs" | cut -d "=" -f2- | sed s/"\$HOME\/"// | sed -e 's/^"//' -e 's/"$//' )
	
	option_loc_1="/home/$current_username/$XDG_PUBLICSHARE_DIR"
	option_loc_2="/home/$current_username/$XDG_DESKTOP_DIR"
	option_loc_3="/home/$current_username/$XDG_DOCUMENTS_DIR"
	option_loc_4="/home/$current_username/$XDG_PICTURES_DIR"
	option_loc_5="/usr/local/bin"
	option_loc_6="/home/drawpileuser"
	dp_install_loc_9_custom=""

	# The locations below are used with Samba file sharing set up.
	option_loc_10="/home/$current_username/$XDG_MUSIC_DIR"
	option_loc_11="/home/$current_username/$XDG_VIDEOS_DIR"
	option_loc_12="/home/$current_username/$XDG_DOWNLOAD_DIR"
else
	option_loc_1="/home/$current_username/Public"
	option_loc_2="/home/$current_username/Desktop"
	option_loc_3="/home/$current_username/Documents"
	option_loc_4="/home/$current_username/Pictures"
	option_loc_5="/usr/local/bin"
	option_loc_6="/home/drawpileuser"
	dp_install_loc_9_custom=""

	# The locations below are used with Samba file sharing set up.
	option_loc_10="/home/$current_username/Music"
	option_loc_11="/home/$current_username/Videos"
	option_loc_12="/home/$current_username/Downloads"
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

invalid_path_text="${red}${bold}X - Automatic local path selection is invalid -${normal}"

function display_location_selection_options () {
	echo "${bold}${cyan}*****Select a location for build and server files . . .*****${normal}"
	echo
	echo 'Pick an install location for the use of the Drawpile Server folders.'
	echo 'This includes session recordings, file backed sessions which help the'
	echo 'server survive crashes or power outages, or template files which help'
	echo 'create rooms with specific settings that exist on the server at all'
	echo 'times.'
	echo
	[[ -d "$option_loc_1" ]] && echo "1 - Public Folder      ${underline}(Recommended for Pi)${normal}		- $option_loc_1" || echo "$invalid_path_text $option_loc_1"
	[[ -d "$option_loc_2" ]] && echo "2 - Desktop Folder					- $option_loc_2" || echo "$invalid_path_text $option_loc_2"
	[[ -d "$option_loc_3" ]] && echo "3 - Documents Folder					- $option_loc_3" || echo "$invalid_path_text $option_loc_3"
	[[ -d "$option_loc_4" ]] && echo "4 - Pictures Folder					- $option_loc_4" || echo "$invalid_path_text $option_loc_4"
	[[ -d "$option_loc_5" ]] && echo "5 - /usr/local/bin     ${underline}(Recommended for other systems)${normal}" || echo "$invalid_path_text $option_loc_5"
	[[ -d "$option_loc_6" ]] && echo "6 - /home/drawpileuser ${underline}(Recommended for other systems)${normal}" || echo "$invalid_path_text $option_loc_6"
	echo
	echo "9 - Enter your own location and create the folders if they do not exist."
	echo '  - Specify an already existing location: simply enter the exact location'
	echo '        desired without a / at the end. This is an advanced option and not'
	echo '        suggested for average users. If using a path with spaces, do NOT '
	echo '        use double or single quotes as the script will not work if you do.'
	echo '        This directory must already exist. If not, create it manually '
	echo '        before using this script.'
	echo
	echo "      ${underline}Acceptable Example:${normal} $option_loc_2/My Drawpile Server"
	echo "	${underline}Note:${normal} This location is an example and may not exist on your computer."
	echo
	echo "${bold}Note:${normal} If you use Windows and Share files across the network, this script"
	echo '     will give you the option later to share just the Public folder, or'
	echo '     the Music, Pictures, Public, and Videos folders, or the other'
	echo '     location personally specified, or no folders.'
	echo
}

# The below verifies the input as either a number 1-4, or existing folder location without a / at the end.
# If there is a / at the end, it will break the script.
# 2nd line below is an old line after the line above it, left for reference. 
# [[ $dp_install_loc =~ ^[0-9]+$ ]] || [[ -d "$dp_install_loc" ]] || { echo; echo "Enter a valid number or existing path location."; echo "Don't use double or single quotes."; echo ; echo 'If selecting a path, simply enter the exact location desired without a / at'; echo '        the end. If using a path with spaces, do NOT use double or single '; echo '        quotes as the script will not work if you do. This directory must'; echo '        already exist. If not, create it manually before using this script.'; echo; continue; } 
# if [[ -d "$dp_install_loc" ]] && [ "${dp_install_loc: -1}" != \" ] && [ "${dp_install_loc: -1}" != \' ] && [ "${dp_install_loc: -1}" != / ] || (( "$dp_install_loc" >= 1 && "$dp_install_loc" <= 5 )) ; then
function invalid_path_selection_01 () {
	echo
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${red}${bold}Invalid number or the path selection does not exist, try again. ${normal}"
	echo
	echo "${red}${bold}If selecting a path, simply enter the exact location desired without a / at${normal}"
	echo "${red}${bold}        the end. If using a path with spaces, do NOT use double or single ${normal}"
	echo "${red}${bold}        quotes as the script will not work if you do. This directory must${normal}"
	echo "${red}${bold}        already exist. If not, create it manually before using this script.${normal}"
	echo
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
	echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo 
}

variable_to_read_1=dp_install_loc
variable_to_read_2=""
variable_to_read_3=""

value_description_1="Set location to download source files, server scripts, server files, etc..."
value_description_2="Will create sub-folder called programs and put files in there."

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	dp_install_loc=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	display_location_selection_options
	while :; do
		read -r -p "${bold}Please make your selection now by entering the number or folder path:${normal} " dp_install_loc
		[[ $dp_install_loc =~ ^[0-9]+$ ]] || [[ -d "$dp_install_loc" ]] || { invalid_path_selection_01; display_location_selection_options; continue; }
		if [[ -d "$dp_install_loc" ]] && [ "${dp_install_loc: -1}" != \" ] && [ "${dp_install_loc: -1}" != \' ] && [ "${dp_install_loc: -1}" != / ] ; then
			break
		elif (( "$dp_install_loc" >= "1" && "$dp_install_loc" <= "6" )) ; then
			if [[ -d "$option_loc_1" ]] || [[ -d "$option_loc_2" ]] || [[ -d "$option_loc_3" ]] || [[ -d "$option_loc_4" ]] || [[ -d "$option_loc_5" ]] || [[ -d "$option_loc_6" ]]; then
				sudo sed -i '\!^option_loc_num =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!option_loc_num = '"$dp_install_loc"'!;H};x}' $drawpile_configuration_values_file
				break
			else
				invalid_path_selection_01
				display_location_selection_options
			fi
		elif [ "$dp_install_loc" = "9" ] ; then
			sudo sed -i '\!^option_loc_num =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!option_loc_num = '"$dp_install_loc"'!;H};x}' $drawpile_configuration_values_file
			echo
			echo "This is your current working directory."
			echo
			pwd
			echo
			echo "This is a list of paths in the home directory:"
			echo
			ls -d /home/*
			echo
			echo "You can enter this path and any folders you wish to create the server "
			echo "files within or enter the full path of your choosing . . . "
			echo
			read -r -p "${bold}Please enter your desired folder path location:${normal} " dp_install_loc_9_custom
			echo
			echo
			echo "${bold}Is this path correct?: $dp_install_loc_9_custom ${normal}"
			while :; do
				read -r -p "${bold}Please make your selection now by entering y or n:${normal} " verify_dp_install_loc
				if [ "$verify_dp_install_loc" == "y" ] || [ "$verify_dp_install_loc" == "Y" ] || [ "$verify_dp_install_loc" == "yes" ] || [ "$verify_dp_install_loc" == "YES" ] || [ "$verify_dp_install_loc" == "Yes" ] || [ "$verify_dp_install_loc" == "n" ] || [ "$verify_dp_install_loc" == "N" ] || [ "$verify_dp_install_loc" == "no" ] || [ "$verify_dp_install_loc" == "NO" ] || [ "$verify_dp_install_loc" == "No" ]; then
					break
				else
					echo
					echo "Invalid input selection, try again."
					echo
					continue
				fi
			done
			if [ "$verify_dp_install_loc" == "y" ] || [ "$verify_dp_install_loc" == "Y" ] || [ "$verify_dp_install_loc" == "yes" ] || [ "$verify_dp_install_loc" == "YES" ] || [ "$verify_dp_install_loc" == "Yes" ]; then
				echo
				sudo mkdir -p -v "$dp_install_loc_9_custom"
				sudo sed -i '\!^dp_install_loc_9_custom =!{h;s!=.*!= '"$dp_install_loc_9_custom"'!};${x;\!^$!{s!!dp_install_loc_9_custom = '"$dp_install_loc_9_custom"'!;H};x}' $drawpile_configuration_values_file
				break
			elif [ "$verify_dp_install_loc" == "n" ] || [ "$verify_dp_install_loc" == "N" ] || [ "$verify_dp_install_loc" == "no" ] || [ "$verify_dp_install_loc" == "NO" ] || [ "$verify_dp_install_loc" == "No" ]; then
				echo
				invalid_path_selection_01
				display_location_selection_options
			else
				echo
				echo "This message should not be visible as an invalid option was provided."
			fi
		else
			invalid_path_selection_01
			display_location_selection_options
		fi
	done
	echo
	if [ "$dp_install_loc" == "1" ]; then
		dp_install_loc=$option_loc_1
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "2" ]; then
		dp_install_loc=$option_loc_2
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "3" ]; then
		dp_install_loc=$option_loc_3
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "4" ]; then
		dp_install_loc=$option_loc_4
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "5" ]; then
		dp_install_loc=$option_loc_5
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "6" ]; then
		dp_install_loc=$option_loc_6
		echo "Install location chosen is $dp_install_loc"
	elif [ "$dp_install_loc" == "9" ]; then
		dp_install_loc=dp_install_loc_9_custom
		echo "Install location chosen is $dp_install_loc"
	else
		sudo mkdir -p -v "$dp_install_loc"
		echo "Install location chosen is $dp_install_loc"
	fi
	sudo sed -i '\!^dp_install_loc =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!dp_install_loc = '"$dp_install_loc"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^dp_install_loc =!{h;s!=.*!= '"$dp_install_loc"'!};${x;\!^$!{s!!dp_install_loc = '"$dp_install_loc"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi

echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Auto Verifying if Script is Up to Date . . .*****${normal}"
echo
function script_update_check_function () {
	sudo mkdir -p -v "$dp_install_loc/Programs"
	cd "$dp_install_loc/Programs" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
	sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/$github_main_script_only_sub_folder_path$script_name" || { echo "${bold}${red}If the server cannot reach the web, then this script will fail to run.${normal}"; echo ""; echo "Terminating script in 30 seconds."; echo ""; sleep 30; exit; }
	sudo chmod 777 "$dp_install_loc/Programs" -R
	# --------------------------------------------------------------------------------
	# The purpose of this check is for compatibility with older version of the scripts. 
	dpcheckversion=$(grep -m 1 "drawpilescriptversion=" "$dp_install_loc/Programs/$script_name" | cut -c 23-40)
	dp_check_version=$(grep -m 1 "drawpile_script_version=" "$dp_install_loc/Programs/$script_name" | cut -c 25-40)
	# This is a check in case the user changed the name of the script from the default, so it overwrites it successfully.
	current_script_name="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"
	echo

	if [[ "$dpcheckversion" != "" ]]; then
		dp_check_version=$dpcheckversion
	elif [[ "$dp_check_version" != "" ]]; then
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	else
		echo
		echo This update test should not be visible.
		echo
	fi
	# --------------------------------------------------------------------------------
	if [[ "$drawpile_script_version" < "$dp_check_version" ]]; then
		validate_script_download_complete=$( tail -10 "$dp_install_loc/Programs/$script_name" | grep -io -m 1 '} # this ensures the entire script is downloaded, the other part of this is located just after the script update and wget check. #' )
		if [[ "$validate_script_download_complete" == '} # this ensures the entire script is downloaded, the other part of this is located just after the script update and wget check. #' ]]; then
			# Do nothing, entire file is present presumably.
			echo "${invis}Verified that the download of updated script is successful.${normal}"
		else
			echo "${bold}${yellow}Newest Script is using version $dp_check_version.${normal}"
			echo "${bold}${red}However, download of updated script failed. Removing file and exiting script.${normal}"
			echo
			echo "Please try running the script again to re-attempt the download."
			echo
			sudo rm -rf "$dp_install_loc/Programs/$script_name"
			pause
			exit
		fi
		echo "${bold}${yellow}Newest Script is using version $dp_check_version.${normal}"
		echo "Newer version of script available, the old script has been copied over"
		echo "the old script. Please re-run this script to use newest version."
		echo
		echo "Terminating script in 30 seconds."
		echo
		cd "$dp_install_loc" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo rm -rf "$script_directory/$current_script_name"
		sudo cp "$dp_install_loc/Programs/$script_name" "$script_directory/$current_script_name"
		sudo chmod 777 "$script_directory/$current_script_name"
		sudo rm -rf "$dp_install_loc/Programs/$script_name"
		echo
		sleep 30
		exit
	elif [[ "$drawpile_script_version" = "$dp_check_version" ]]; then
		echo "${bold}${green}Script is newest version available.${normal}"
		sudo rm -rf "$dp_install_loc/Programs/$script_name"
	elif [[ "$drawpile_script_version" > "$dp_check_version" ]]; then
		echo "${bold}${yellow}It appears the creator of the script has failed to update github with the newest version.${normal}"
		echo "Please reach on github or reach out to Bluestrings on the official Drawpile Discord"
		echo "server. Invite link is found on the lower left corner of the website."
		echo
		echo "Script in use: $drawpile_script_version"
		echo "Github Script: $dp_check_version"
		echo
		echo "Pausing script for 5 seconds before continuing."
		echo
		sudo rm -rf "$dp_install_loc/Programs/$script_name"
		sleep 5s
	else
		echo "${bold}${red}Unable to determine script version, proceeding with script.${normal}"
	fi
}
# ----------------------------------------------------------------------------------
# Verify wget is installed.
# ----------------------------------------------------------------------------------

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	version_wget=$( apt-cache policy wget | grep "Installed:" | cut -c 14-19 )
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	version_wget=$( dnf info wget | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
	installation_status_wget=$( dnf info wget | sed -n '2 p' )
	# Installed Packages
	# Available Packages
	# Error: No matching Packages to list
fi
minimum_version_wget=1.18-5

if [[ "$version_wget" = "(none)" ]] || [[ "$installation_status_wget" = "Available Packages" ]]; then
	echo "Package ${bold}wget${normal} is not installed."
	echo "Installing package, used for verifying script is"
	echo "up to date."
	echo
	sudo $packages_update_program
	sudo $package_install_program wget # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
	echo
	if [[ "$version_wget" = "(none)" ]] || [[ "$installation_status_wget" = "Error: No matching Packages to list" ]]; then
		echo "${bold}${red}Package wget is not available in your distribution's repository.${normal}"
		echo
		echo "This is an optional package used to verify that the script"
		echo "is up to date. You must manually check GitHub to verify"
		echo "the script being used is up to date. You may experience"
		echo "problems installing Drawpile if not up to date."
		echo
		echo "https://github.com/Wade821/PiDrawpile"
		echo 
		echo "Continuing script in 30 seconds."
		echo
		echo
		sleep 30
	elif [[ "$version_wget" > "$minimum_version_wget" ]] || [[ "$version_wget" = "$minimum_version_wget" ]]; then
		script_update_check_function
	elif [[ "$version_wget" < "$minimum_version_wget" ]]; then
		echo "${bold}${yellow}Package wget is not the minimum version ($minimum_version_wget)${normal}."
		echo
		echo "This is an optional package used to verify that the script"
		echo "is up to date. Script may not work as intended."
		echo
		echo "You should manually check GitHub to verify the script being"
		echo "used is up to date. You may experience problems installing"
		echo "Drawpile if not up to date."
		echo
		echo "https://github.com/Wade821/PiDrawpile"
		echo 
		echo "Continuing script in 30 seconds."
		echo
		echo
		sleep 30
		echo
		script_update_check_function
	else
		echo "Unable to make a determination of which version of wget is installed."
		echo "This message should not be visible."
	fi
elif [[ "$version_wget" > "$minimum_version_wget" ]] || [[ "$version_wget" = "$minimum_version_wget" ]]; then
	echo
	script_update_check_function
elif [[ "$version_wget" < "$minimum_version_wget" ]]; then
	echo "${bold}${yellow}Package wget is not the minimum version ($minimum_version_wget)${normal}."
	echo
	echo "This is an optional package used to verify that the script"
	echo "is up to date. Attempting to update."
	echo
	sudo $packages_update_program
	sudo $package_install_program wget # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
	echo
	if [[ "$version_wget" > "$minimum_version_wget" ]] || [[ "$version_wget" = "$minimum_version_wget" ]]; then
		echo
		script_update_check_function
	elif [[ "$version_wget" < "$minimum_version_wget" ]]; then
		echo "${bold}${yellow}Package wget is not the minimum version ($minimum_version_wget)${normal}."
		echo
		echo "This is an optional package used to verify that the script"
		echo "is up to date. Script may not work as intended since updated"
		echo "version is not available for install."
		echo
		echo "You should manually check GitHub to verify the script being"
		echo "used is up to date. You may experience problems installing"
		echo "Drawpile if not up to date."
		echo
		echo "https://github.com/Wade821/PiDrawpile"
		echo 
		echo "Continuing script in 30 seconds."
		echo
		echo
		sleep 30
		echo
		script_update_check_function
	else
		echo "Unable to make a determination of which version of wget is installed."
		echo "This message should not be visible."
	fi
else
	echo "Unable to make a determination of which version of wget is installed."
	echo "This message should not be visible."
fi

{ # this ensures the entire script is downloaded, other part is at very end of script #

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Consider Addition of Testing Distro If Drawpile failed to compile
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Old command below, too specific results and won't pull accurate info.
# using_what_rasp_codename=$( lsb_release -a 2>/dev/null | grep -oh -m 1 stretch )
# lsb_release -a 2>/dev/null | grep "Codename:" | grep -o -m 1 bullseye
# -o only matching
# -h no filename
# -m 1 stop after found amount x
# --------------------------------------------------------------------------------
# Sample output of 'uname -a': 
# Linux raspberrypi 4.14.98-v7+ #1200 SMP Tue Feb 12 20:27:48 GMT 2019 armv7l GNU/Linux
# Raspbian Versions: 		https://en.wikipedia.org/wiki/Raspbian

# Sample output of 'lsb_release -a': 
# Distributor ID:	Raspbian
# Description:		Raspbian GNU/Linux 9.8 (stretch)
# Release:			9.8
# Codename:			stretch
# --------------------------------------------------------------------------------
# Sample output of 'uname -a':
# Linux raspberrypi 5.15.84-v7+ #1613 SMP Thu Jan 5 11:59:48 GMT 2023 armv7l GNU/Linux

# Sample output of 'lsb_release -a': 
# Distributor ID:	Raspbian
# Description:		Raspbian GNU/Linux 11 (bullseye)
# Release:			11
# Codename:			bullseye
# --------------------------------------------------------------------------------
# Sample output of 'uname -a':
# 	Linux pi4brokeSD 6.1.21-v8+ #1642 SMP PREEMPT Mon Apr  3 17:24:16 BST 2023 aarch64 GNU/Linux

# Sample output of 'lsb_release -a': 
# 	No LSB modules are available.
# 	Distributor ID:	Debian
# 	Description:	Debian GNU/Linux 11 (bullseye)
# 	Release:		11
# 	Codename:		bullseye
# --------------------------------------------------------------------------------
# Sample Output: 6.1
using_what_linux_kernel=$( uname -a | awk '{ print $3 }' | cut -c 1-3 )
# Sample Output: Debian GNU/Linux 11 (bullseye)
using_what_rasp_description_release=$( lsb_release -a 2>/dev/null | grep "Description:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
# Sample Output: 11
using_what_rasp_release=$( lsb_release -a 2>/dev/null | grep "Release:" | awk '{ print $2 }' )
# Sample Output: bullseye
using_what_rasp_codename=$( lsb_release -a 2>/dev/null | grep "Codename:" | awk '{ print $2 }' )

if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
	if [[ "$using_what_linux_kernel" == "4.14" ]] && [[ "$using_what_rasp_codename" == "stretch" ]] ; then
		echo '--------------------------------------------------------------------------------'
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Would you like to temporarily add the Testing Package *****${normal}"
		echo "${bold}${cyan}*****           Repo for updated packages. . . .           *****${normal}"
		echo
		echo "This step exists in the event that you are unable to successfully"
		echo "compile Drawpile using the built in changes provided by the script."
		echo
		echo "If this is the first time you are running the script, select n for"
		echo "no. Otherwise, you may attempt this step with a second attempt."
		echo "When operations have completed, the script will remove the testing"
		echo "repository options automatically."
		echo
		echo "${bold}Detailed Notes${normal}"
		echo "Sometimes, updates require newer packages than what are available"
		echo "within the stable package repository. This means that the script"
		echo "will fail if it is a required package. The testing repository"
		echo "packages should be stable and quite usable, so it should be safe"
		echo "to use these updates without issue. However, since it is the testing"
		echo "repository, there exists a chance it could mess up your installation"
		echo "and require you to reinstall Raspbian. Presumably, this chance is low"
		echo "but ultimately this script does not assume responsibility should"
		echo "a problem arise. Use this only if your first attempt to compile"
		echo "Drawpile fails."
		echo
		echo
		echo 'Please choose if you would like to attempt the testing repository'
		echo 'for packages to be installed.'
		echo
		echo 'y for yes'
		echo 'n for no'
		echo
		while :; do
			read -r -p "${bold}Please make your selection now by entering y or n:${normal} " testing_package_decision
			if [ "$testing_package_decision" == "y" ] || [ "$testing_package_decision" == "Y" ] || [ "$testing_package_decision" == "yes" ] || [ "$testing_package_decision" == "YES" ] || [ "$testing_package_decision" == "Yes" ] || [ "$testing_package_decision" == "n" ] || [ "$testing_package_decision" == "N" ] || [ "$testing_package_decision" == "no" ] || [ "$testing_package_decision" == "NO" ] || [ "$testing_package_decision" == "No" ]; then
				break
			else
				echo
				echo "Invalid input selection, try again."
				echo
				continue
			fi
		done
		if [ "$testing_package_decision" == "y" ] || [ "$testing_package_decision" == "Y" ] || [ "$testing_package_decision" == "yes" ] || [ "$testing_package_decision" == "YES" ] || [ "$testing_package_decision" == "Yes" ] ; then
			echo
			echo "${bold}${cyan}*****Adding Testing Package Repo for updated packages. . . .*****${normal}"
			echo
			echo "${bold}${cyan}*****Drawpile requires newer QT Version than what is available*****${normal}"
			echo "${bold}${cyan}*****          within the stable repository . . . .           *****${normal}"
			echo
			# --------------------------------------------------------------------------------
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/preferences.d/buster.pref" ]]; then
				echo "File buster.pref exists, skipping addition."
				file_buster_pref_exist=yes
			elif [[ ! -e "/etc/apt/preferences.d/buster.pref" ]]; then
				echo "File buster.pref does not exist, adding file."
				echo -e "Package: *\nPin: release a=buster\nPin-Priority: 750" | sudo tee /etc/apt/preferences.d/buster.pref 2>&1 >/dev/null
				file_buster_pref_exist=no
			else
				echo "Cannot determine if file buster.pref exists or not."
				echo "This message should not be visible."
				file_buster_pref_exist=error
			fi
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/sources.list.d/buster.list" ]]; then
				echo "File buster.list exists, skipping addition."
				file_buster_list_exist=yes
			elif [[ ! -e "/etc/apt/sources.list.d/buster.list" ]]; then
				echo "File buster.list does not exist, adding file."
				echo "deb http://mirrordirector.raspbian.org/raspbian/ buster main contrib non-free rpi" | sudo tee /etc/apt/sources.list.d/buster.list 2>&1 >/dev/null
				file_buster_list_exist=no
			else
				echo "Cannot determine if file buster.list exists or not."
				echo "This message should not be visible."
				file_buster_list_exist=error
			fi
			# --------------------------------------------------------------------------------
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/preferences.d/stretch.pref" ]]; then
				echo "File stretch.pref exists, skipping addition."
				file_stretch_pref_exist=yes
			elif [[ ! -e "/etc/apt/preferences.d/stretch.pref" ]]; then
				echo "File stretch.pref does not exist, adding file."
				echo -e "Package: *\nPin: release a=stretch\nPin-Priority: 900" | sudo tee /etc/apt/preferences.d/stretch.pref 2>&1 >/dev/null
				file_stretch_pref_exist=no
			else
				echo "Cannot determine if file stretch.pref exists or not."
				echo "This message should not be visible."
				file_stretch_pref_exist=error
			fi
			# --------------------------------------------------------------------------------
			if [[ -e  "/etc/apt/sources.list.d/stretch.list" ]]; then
				echo "File stretch.list exists, skipping addition."
				file_stretch_list_exist=yes
			elif [[ ! -e "/etc/apt/sources.list.d/stretch.list" ]]; then
				echo "File stretch.list does not exist, adding file."
				sudo echo "deb http://mirrordirector.raspbian.org/raspbian/ stretch main contrib non-free rpi" | sudo tee /etc/apt/sources.list.d/stretch.list 2>&1 >/dev/null
				file_stretch_list_exist=no
			else
				echo "Cannot determine if file stretch.list exists or not."
				echo "This message should not be visible."
				file_stretch_list_exist=error
			fi
			# --------------------------------------------------------------------------------
			# --------------------------------------------------------------------------------
		elif [ "$testing_package_decision" == "n" ] || [ "$testing_package_decision" == "N" ] || [ "$testing_package_decision" == "no" ] || [ "$testing_package_decision" == "NO" ] || [ "$testing_package_decision" == "No" ] ; then
			echo "Skipping addition of testing package repository for Raspbian Stretch."
		else
			echo "Skipping addition of testing package repository for Raspbian Stretch."
			echo
			echo "This message should not be visible as an invalid option was provided."
			echo
		fi
	else
		echo
		echo "Not using a recognized version of Raspbian, or using some other flavor"
		echo "of Linux. Skipping possible addition of testing distro for older"
		echo "versions of raspbian which may fail to compile otherwise."
	fi
fi
echo
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
#
# Check if package is available and attempt to install it. Provide error message 
# if not. Used for optional packages not related to main install of Drawpile
# Server
#
# Line 518  - version_test_by_distro_function 			--- (individual - 02x) used as a basic installation check
# Line 1177 - package_version_check_and_update_function --- (individual - 02x) used to check and provide an explanation on why it is needed, with dynamic number of fields available, and then attempt to update. 
# Line 1300 - package_version_check_function 			--- (individual - 24x) used to check and provide an explanation on why it is needed, with dynamic number of fields available. 
# Line 1416 - package_install_status_check_function 	--- (multiple   - 12x) more complex, used to check a list of programs all at once.


function version_apt_or_dnf_function () {
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		version=$( apt-cache policy $package_name | grep "Installed:" | cut -c "$package_version_length" )
		# version=$( apt-cache policy $package_name | grep "Installed:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
		# candidate_status=$( apt-cache policy $package_name | grep "Candidate:" | awk '{for (i=2; i<NF; i++) printf $i " "; print $NF}' )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		version=$( dnf info $package_name | grep -i "Version" | tr -s " " | grep -i -m 1 "Version :" | tail -1 | awk '{ print $3 }' )
		installation_status=$( dnf info $package_name | sed -n '2 p' )
		# Installed Packages
		# Available Packages
		# Error: No matching Packages to list		
	fi
}

function package_available_dpkg_or_dnf_function () {
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] && [ "$package_name" != "git" ]; then
		dpkg -l $package_name > /dev/null 2>&1
		not_available_check=$?
	fi
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] && [ "$package_name" == "git" ]; then
		# For some reason, the dpkg -l command doesn't seem to work in Ubuntu on git ... ¯\_(ツ)_/¯
		not_available_check=0
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		dnf info $package_name > /dev/null 2>&1
		not_available_check=$?
	fi
}

function package_version_check_and_update_function () {
	if [ "$not_available_check" -eq "1" ]; then
		echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
		echo
		[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
		[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
		[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
		[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
		[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
		echo
		echo
		[ -z "$package_action_2_none" ] || "$package_action_2_none"
		[ -z "$package_action_3_none" ] || "$package_action_3_none"
	elif [ "$version" = "(none)" ] || [ "$installation_status" = "Available Packages" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "Package ${bold}$package_name${normal} is not installed. Minimum version is $minimum_version."
		echo 
		[ -z "$package_description_1_initial_check_none" ] || echo "$package_description_1_initial_check_none"
		[ -z "$package_description_2_initial_check_none" ] || echo "$package_description_2_initial_check_none"
		[ -z "$package_description_3_initial_check_none" ] || echo "$package_description_3_initial_check_none"
		[ -z "$package_description_4_initial_check_none" ] || echo "$package_description_4_initial_check_none"
		[ -z "$package_description_5_initial_check_none" ] || echo "$package_description_5_initial_check_none"
		echo
		if [ "$install_package_set" = "yes" ]; then # --------------------------------------------------------------------------------
			sudo $package_install_program $package_name # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
			version_apt_or_dnf_function
			echo
			if [ "$version" = "(none)" ] || [ "$installation_status" = "Available Packages" ]  || [ "$installation_status" = "Error: No matching Packages to list" ]; then
				echo
				echo '--------------------------------------------------------------------------------'
				echo
				echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
				echo
				[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
				[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
				[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
				[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
				[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
				echo
				[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
				echo
				echo
				[ -z "$package_action_2_none" ] || "$package_action_2_none"
				[ -z "$package_action_3_none" ] || "$package_action_3_none"
			elif [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
				echo "${bold}${green}Package $package_name ($version) is installed. Minimum version is $minimum_version.${normal}"
			elif [ "$version" < "$minimum_version" ]; then
				echo
				echo '--------------------------------------------------------------------------------'
				echo
				echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
				echo
				[ -z "$package_description_1_not_min" ] || echo "$package_description_1_not_min"
				[ -z "$package_description_2_not_min" ] || echo "$package_description_2_not_min"
				[ -z "$package_description_3_not_min" ] || echo "$package_description_3_not_min"
				[ -z "$package_description_4_not_min" ] || echo "$package_description_4_not_min"
				[ -z "$package_description_5_not_min" ] || echo "$package_description_5_not_min"
				echo 
				[ -z "$package_action_1_not_min" ] || echo "$package_action_1_not_min"
				echo
				echo
				[ -z "$package_action_2_not_min" ] || "$package_action_2_not_min"
				[ -z "$package_action_3_not_min" ] || "$package_action_3_not_min"
			else
				echo "Unable to make a determination of which version of $package_name is installed."
				echo "This message should not be visible."
			fi
		fi
	elif [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
		echo "${bold}${green}Package $package_name ($version) is installed. Minimum version is $minimum_version.${normal}"
	elif [ "$version" < "$minimum_version" ]; then
		echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
		echo
		[ -z "$package_description_1_not_initially_min" ] || echo "$package_description_1_not_initially_min"
		[ -z "$package_description_2_not_initially_min" ] || echo "$package_description_2_not_initially_min"
		[ -z "$package_description_3_not_initially_min" ] || echo "$package_description_3_not_initially_min"
		[ -z "$package_description_4_not_initially_min" ] || echo "$package_description_4_not_initially_min"
		[ -z "$package_description_5_not_initially_min" ] || echo "$package_description_5_not_initially_min"
		echo 
		if [ "$install_package_set" = "yes" ]; then # --------------------------------------------------------------------------------
			sudo $package_install_program $package_name # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
			version_apt_or_dnf_function
			echo
			if [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
				echo "Package ${bold}$package_name $version${normal} is installed."
			elif [ "$version" < "$minimum_version" ]; then
				echo
				echo '--------------------------------------------------------------------------------'
				echo
				echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
				echo
				[ -z "$package_description_1_not_min" ] || echo "$package_description_1_not_min"
				[ -z "$package_description_2_not_min" ] || echo "$package_description_2_not_min"
				[ -z "$package_description_3_not_min" ] || echo "$package_description_3_not_min"
				[ -z "$package_description_4_not_min" ] || echo "$package_description_4_not_min"
				[ -z "$package_description_5_not_min" ] || echo "$package_description_5_not_min"
				echo 
				[ -z "$package_action_1_not_min" ] || echo "$package_action_1_not_min"
				echo
				echo
				[ -z "$package_action_2_not_min" ] || "$package_action_2_not_min"
				[ -z "$package_action_3_not_min" ] || "$package_action_3_not_min"
			else
				echo "Unable to make a determination of which version of $package_name is installed."
				echo "This message should not be visible."
			fi
		fi
	else
		echo "Unable to make a determination of which version of $package_name is installed."
		echo "This message should not be visible."
	fi
}
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
#
# Check package version after mass install. Provide error message 
# if not.
#
# Repetitive function, will probably end up getting deleted after testing improved single function above.

function package_version_check_function () {
	if [ "$not_available_check" -eq "1" ]; then
		echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
		echo
		[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
		[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
		[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
		[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
		[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
		echo
		echo
		[ -z "$package_action_2_none" ] || "$package_action_2_none"
		[ -z "$package_action_3_none" ] || "$package_action_3_none"
	elif [ "$version" = "(none)" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${red}Package $package_name is not available in your distribution's repository. Minimum version is $minimum_version.${normal}"
		echo 
		[ -z "$package_description_1_none" ] || echo "$package_description_1_none"
		[ -z "$package_description_2_none" ] || echo "$package_description_2_none"
		[ -z "$package_description_3_none" ] || echo "$package_description_3_none"
		[ -z "$package_description_4_none" ] || echo "$package_description_4_none"
		[ -z "$package_description_5_none" ] || echo "$package_description_5_none"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_none" ] || echo "$package_action_1_none"
		echo
		echo
		[ -z "$package_action_2_none" ] || "$package_action_2_none"
		[ -z "$package_action_3_none" ] || "$package_action_3_none"
	elif [ "$version" > "$minimum_version" ] || [ "$version" = "$minimum_version" ]; then
		echo "${bold}${green}Package $package_name ($version) is installed. Minimum version is $minimum_version.${normal}"
	elif [ "$version" < "$minimum_version" ]; then
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Package $package_name ($version) is not the minimum version ($minimum_version)${normal}."
		echo
		[ -z "$package_description_1_not_min" ] || echo "$package_description_1_not_min"
		[ -z "$package_description_2_not_min" ] || echo "$package_description_2_not_min"
		[ -z "$package_description_3_not_min" ] || echo "$package_description_3_not_min"
		[ -z "$package_description_4_not_min" ] || echo "$package_description_4_not_min"
		[ -z "$package_description_5_not_min" ] || echo "$package_description_5_not_min"
		echo
		#Check if variable $package_description empty. Don't display if empty, but display if content found.
		[ -z "$package_description_1" ] || echo "$package_description_1"
		[ -z "$package_description_2" ] || echo "$package_description_2"
		[ -z "$package_description_3" ] || echo "$package_description_3"
		[ -z "$package_description_4" ] || echo "$package_description_4"
		[ -z "$package_description_5" ] || echo "$package_description_5"
		echo
		[ -z "$package_action_1_not_min" ] || echo "$package_action_1_not_min"
		echo
		echo
		[ -z "$package_action_2_not_min" ] || "$package_action_2_not_min"
		[ -z "$package_action_3_not_min" ] || "$package_action_3_not_min"
	else
		echo "Unable to make a determination of which version of $package_name is installed."
	fi
}
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=perl-interpreter
	version_test_by_distro_function

	if [ "$test_installation_status" == "error_01_does_not_exist" ]; then
		echo "${red}The $package_name was not found for installation.${normal}"
		echo "This is required in certain places of the script."
		echo
		sleep 10
		exit
	elif [ "$test_installation_status" == "Not Installed" ]; then
		echo "The $package_name package is not yet installed, can install: $test_update_version"
		echo "This is required in certain places of the script."
		echo
		sudo $package_install_program perl-interpreter # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
		sudo sed -i '\!^perl-interpreter =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!perl-interpreter = '"no"'!;H};x}' $app_installation_status_file
	elif [ "$test_installation_status" == "Installed and up to date" ]; then
		echo "The $package_name package is installed and up to date ($test_version)."
		echo "This is required in certain places of the script."
		sudo sed -i '\!^perl-interpreter =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!perl-interpreter = '"yes"'!;H};x}' $app_installation_status_file
	elif [ "$test_installation_status" == "Installed and not up to date" ]; then
		echo "Package $package_name is installed ($test_version) and there is an update available ($test_update_version)."
		echo "This is required in certain places of the script."
		echo
		sudo $package_install_program perl-interpreter # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
		sudo sed -i '\!^perl-interpreter =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!perl-interpreter = '"yes"'!;H};x}' $app_installation_status_file
	else
		echo "This not available check for Fedora should not be visible."
	fi
fi

# app_does_not_exist=0
# app_installed=0
# app_not_installed=0
# progs=(cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libmicrohttpd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev libsodium-dev libsystemd-dev mini-httpd miniupnpc nginx openssl qtbase5-dev qtmultimedia5-dev qttools5-dev);
# package_install_status_check_function

function package_install_status_check_function () {
	for p in "${progs[@]}"; do
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			# Verifies if app exists in repository and is installed.
			# if [[ $(apt-cache --quiet=0 policy "$p" 2>&1 | grep "Unable to locate package $p" | cut -c 4-80) != "Unable to locate package $p" ]] && [[ $(apt-cache policy "$p" | grep "Installed:" | cut -c 14-80) != "(none)" ]]; then
			#       if [[ "$package_install_status_check_decision_tree_q1" != "$package_install_status_check_decision_tree_a1" ]] && [[ "$package_install_status_check_decision_tree_q2" != "$package_install_status_check_decision_tree_a2" ]]; then
			
			# Verifies if app exists in repository but is not installed.
			# elif [[ $(apt-cache policy "$p" | grep "Installed:" | cut -c 14-80) = "(none)" ]]; then
			#       elif [[ "$package_install_status_check_decision_tree_q2" = "$package_install_status_check_decision_tree_a2" ]]; then
			package_install_status_check_decision_tree_q1=$( apt-cache --quiet=0 policy "$p" 2>&1 | grep "Unable to locate package $p" | cut -c 4-80 )		
			package_install_status_check_decision_tree_a1="Unable to locate package $p"
			package_install_status_check_decision_tree_a3="Unable to locate package $p"
			
			# Verifies if app does not exist in repository.
			# elif [[ $(apt-cache --quiet=0 policy "$p" 2>&1 | grep "Unable to locate package $p" | cut -c 4-80) = "Unable to locate package $p" ]]; then
			#      elif [[ "$package_install_status_check_decision_tree_q1" = "$package_install_status_check_decision_tree_a3" ]]; then
			package_install_status_check_decision_tree_q2=$( apt-cache policy "$p" | grep "Installed:" | cut -c 14-80 )
			package_install_status_check_decision_tree_a2="(none)"
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			package_install_status_check_decision_tree_q1=$( dnf info $p | sed -n '2 p' )
			package_install_status_check_decision_tree_a1="Error: No matching Packages to list"
			package_install_status_check_decision_tree_a3="Error: No matching Packages to list"
			package_install_status_check_decision_tree_q2=$( dnf info $p | sed -n '2 p' )
			package_install_status_check_decision_tree_a2="Available Packages"
			# Installed Packages
			# Available Packages
			# Error: No matching Packages to list
		fi
		if [[ "$package_install_status_check_decision_tree_q1" != "$package_install_status_check_decision_tree_a1" ]] && [[ "$package_install_status_check_decision_tree_q2" != "$package_install_status_check_decision_tree_a2" ]]; then
			# Verifies if app exists in repository and is installed.
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = yes" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!$p = '"yes"'!;H};x}' $app_installation_status_file
			fi
			let app_installed++
		elif hash "${p}" 2>&-; then
			# Verifies app exists, even if compiled from source and is not in repository.
			# Notes --> https://unix.stackexchange.com/questions/70963/difference-between-2-2-dev-null-dev-null-and-dev-null-21
			#			The general form of this one is M>&-, where "M" is a file descriptor number. This will close output for whichever file descriptor is referenced, i.e. "M".
			#       --> http://www.tldp.org/LDP/abs/html/io-redirection.html
			#			M>N --> "M" is a file descriptor, which defaults to 1, if not explicitly set.
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = yes" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!$p = '"yes"'!;H};x}' $app_installation_status_file
			fi
			let app_installed++
		elif [[ "$package_install_status_check_decision_tree_q2" = "$package_install_status_check_decision_tree_a2" ]]; then
			# Verifies if app exists in repository but is not installed.
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = no" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!$p = '"no"'!;H};x}' $app_installation_status_file
			fi
			let app_not_installed++
		elif [[ "$package_install_status_check_decision_tree_q1" = "$package_install_status_check_decision_tree_a3" ]]; then
			# Verifies if app does not exist in repository.
			echo "$p does not exist."
			if grep -qw "$p" $app_installation_status_file; then
				echo "Entry already made for $p, skipping entry for App Installation Status."
			else
				echo "$p = error" | sudo tee -a $app_installation_status_file
				# sudo sed -i '\!^$p =!{h;s!=.*!= '"error"'!};${x;\!^$!{s!!$p = '"error"'!;H};x}' $app_installation_status_file
			fi
			let app_does_not_exist++
		else
			echo "$p program was unable to be processed by these rules."
		fi
	done

	if [[ "$app_does_not_exist" != "0" ]]; then
		echo
		printf "%d programs do not exist in repository nor were compiled from source.\n" "$app_does_not_exist"
		echo
		echo "You may be unable to compile the program from source."
		echo "Checks will be made later to determine to proceed or"
		echo "exit the script depending on if the package is"
		echo "required or is an optional package."
		echo
		echo "Waiting 30 seconds before proceeding."
		echo
		sleep 30
	else
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi

	# The sort command used at the end sorts the list alphabetically.
	sudo sort $app_installation_status_file -o $app_installation_status_file
	# This removes any duplicates that may exist in the file.
	perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
}
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Updating software list available for updates and new packages. . . .*****${normal}"
echo
sudo $packages_update_program 
# || echo "" && echo "${bold}${red}Update check failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Update system packages . . . ?*****${normal}"
echo
echo 'Would you like to update all installed packages? This step may take a while' 
echo 'to complete if you choose to do this.'
echo
echo 'Enter a letter and hit enter to continue.'
echo
echo 'y for yes'
echo 'n for no'
echo
read install_all_packages
echo
if [ "$install_all_packages" == "y" ] || [ "$install_all_packages" == "Y" ] || [ "$install_all_packages" == "yes" ] || [ "$install_all_packages" == "YES" ] || [ "$install_all_packages" == "Yes" ] ; then
	echo 'Updating already installed packages . . .'
	echo
	sudo $packages_system_upgrade
	sudo $packages_clean_program
else
	echo 'Skipping update of all installed packages.'
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Check install status of packages and write to file . . .*****${normal}"
echo
echo "Packages already installed will come up with 'yes' and packages not yet"
echo "installed will appear with 'no'."
echo
# To be used to determine if any program/package is listening to port 80 or 443 for web hosting
# prior to NGINX install. This way the user can be alerted of potential problems.
# https://linuxconfig.org/using-ss-command-on-linux
if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
	# If Ubuntu or Debian (excluding Raspbian for Desktop and Raspbian for Pi on ARM)
	port_80_listening=$( ss -na | grep "0 0.0.0.0:80 " | grep "LISTEN" | awk '{ print $6 }' )
	port_443_listening=$( ss -na | grep "0 0.0.0.0:443 " | grep "LISTEN" | awk '{ print $6 }' )
fi
if [ "$what_linux_name" != "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" != "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" != "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" != "" ]; then
	# If NOT Ubuntu or NOT Debian (but would include Raspbian for Desktop and Raspbian for Pi on ARM)
	port_80_listening=$( netstat -na | grep "0 0.0.0.0:80 " | grep "LISTEN" | awk '{ print $6 }' )
	port_443_listening=$( netstat -na | grep "0 0.0.0.0:443 " | grep "LISTEN" | awk '{ print $6 }' )
fi

# cargo clang
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev clang"
	program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev mini-httpd nginx openssl qt5keychain-dev libvpx-dev sqlite3"
fi
if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
	# Same as above for Not Fedora, but includes python-is-python3 for unversioned. Just a symlink I guess. python3.10-venv python3-pip / libpython3.10
	program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python-is-python3 python3.*-venv python3-pip libsqlite3-dev policycoreutils clang"
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python-is-python3 python3.11-venv python3-pip libsqlite3-dev policycoreutils clang"
	program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev mini-httpd nginx openssl qt5keychain-dev libvpx-dev sqlite3"
fi
if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ]; then
	# Same as above for Not Fedora, but includes python-is-python3 for unversioned. Just a symlink I guess. python3.10-venv python3-pip
	program_list_to_install_actual_dependencies="cmake extra-cmake-modules g++ libgif-dev libkf5archive-dev libkf5dnssd-dev libminiupnpc-dev libqt5network5 libqt5svg5-dev miniupnpc qtbase5-dev qtmultimedia5-dev qttools5-dev python-is-python3 python3.10-venv python3-pip policycoreutils clang"
	program_list_to_install_optional_dependencies="libmicrohttpd-dev libsodium-dev libsystemd-dev mini-httpd nginx openssl qt5keychain-dev libvpx-dev sqlite3"
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	# dnf search PROGRAM
	# Minimal List
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel qt5-qtsvg-devel make policycoreutils-python-utils qt5-qtmultimedia-devel qt5-qtbase-devel zlib-devel cronie"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel sqlite"
	
	# Full List
	program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel miniupnpc-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel make	policycoreutils-python-utils qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qttools-devel zlib-devel cronie python3-gunicorn python-unversioned-command clang"
	program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel systemd-devel httpd-core nginx openssl qtkeychain-qt5-devel libvpx-devel sqlite"
fi

if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
	# dnf search PROGRAM
	# Minimal List
	# program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel qt5-qtsvg-devel make policycoreutils-python-utils qt5-qtmultimedia-devel qt5-qtbase-devel zlib-devel cronie"
	# program_list_to_install_optional_dependencies="libmicrohttpd-devel libsodium-devel sqlite"
	
	# Full List
	program_list_to_install_actual_dependencies="cmake extra-cmake-modules gcc-c++ git kf5-karchive-devel kf5-kdnssd-devel miniupnpc-devel qt5-qtnetworkauth-devel qt5-qtsvg-devel make	policycoreutils-python-utils qt5-qtbase-devel qt5-qtmultimedia-devel qt5-qttools-devel zlib-devel cronie python3-gunicorn python-unversioned-command clang"
	program_list_to_install_optional_dependencies="libmicrohttpd libsodium systemd-devel httpd nginx openssl qtkeychain-qt5-devel libvpx-devel sqlite"
fi

app_does_not_exist=0
app_installed=0
app_not_installed=0
progs=($program_list_to_install_actual_dependencies $program_list_to_install_optional_dependencies);
package_install_status_check_function
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Installing Dependencies . . .*****${normal}"
echo
# Compile Client Requirements - https://github.com/drawpile/Drawpile/wiki/Building-from-sources
# 
# *********** Actual Dependencies ***********
# **** Debian Packages (* means in use) *****																										Fedora Alternates (* means in use)
# cmake * Cross platform open source make system																									cmake							*
# extra-cmake-modules * Extra modules and scripts for CMake																							extra-cmake-modules				*
# g++ * compiler 																																	gcc-c++							*
# git - Git is a fast, scalable, distributed revision control system with an 																		git								*
#       unusually rich command set that provides both high-level operations and full access to internals.											-								-
# libgif-dev * library for GIF images (development) (enables animated GIF export)																	giflib-devel.x86_64				*
# libkf5archive-dev * development files for karchive																								kf5-karchive-devel				*
# libkf5dnssd-dev * development files for kdnssd (enables local server discovery)																	kf5-kdnssd-devel
# libminiupnpc-dev * UPnP IGD client lightweight library development files (enables automatic port forwarding)										miniupnpc-devel
# libqt5network5  * Qt 5 network module																												qt5-qtnetworkauth-devel
# libqt5svg5-dev * Qt 5 SVG module development files																								qt5-qtsvg-devel					*
# make - A GNU tool for controlling the generation of executables and other non-source files of a program from the program's source files. 			make							*
#       Make allows users to build and install packages without any significant knowledge about the details of the build process. The details 		-								-
#       about how the program should be built are provided for make in the program's makefile.														-								-
# miniupnpc * UPnP IGD client lightweight library client (enables automatic port forwarding)														miniupnpc-devel					
# policycoreutils-python-utils - SELinux policy core python utilities																				policycoreutils-python-utils	*
# qtbase5-dev * Qt 5 base development files																											qt5-qtbase-devel				*
# qtmultimedia5-dev * APIs for multimedia functionality - development files																			qt5-qtmultimedia-devel			*
# qttools5-dev * Qt 5 tools development files																										qt5-qttools-devel				
# zlib-devel - is a general-purpose, patent-free, lossless data compression library which is used by many different programs.						zlib-devel						*
# cronie - Cronie contains the standard UNIX daemon crond that runs specified programs at scheduled times and related tools. It is a 				cronie							*
#       fork of the original vixie-cron and has security and configuration enhancements like the ability to use pam and SELinux.					-
# cargo - Rust's package manager and build tool - that allows Rust projects to declare their various dependencies
#         and ensure that you'll always get a repeatable build.
# clang - A C language family front-end for LLVM. The goal of the Clang project is to create a new C, C++, Objective C and Objective C++ 
#			front-end for the LLVM compiler. Its tools are built as libraries and designed to be loosely-coupled and extensible.

sudo $package_install_program $program_list_to_install_actual_dependencies # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
sudo $packages_clean_program
echo

# *********** Optional Dependencies ***********
# ***** Debian Packages (* means in use) ******																										Fedora Alternates (* means in use)
# libmicrohttpd-dev * library embedding HTTP server functionality (development, used for remote administration of drawpile server)					libmicrohttpd-devel				*
# libsodium-dev * Network communication, cryptography and signaturing library - headers (server only, enables external authentication support)		libsodium-devel					*
# libsystemd-dev * systemd utility library - development files (enable socket drawpile server startup I believe)										systemd-devel
# mini-httpd * Small HTTP server (Used for creating password for use with NGINX)																	httpd-core
# nginx * small, powerful, scalable web/proxy server (used for reverse proxy to manage drawpile server in a more secure manner)						nginx
# openssl * Secure Sockets Layer toolkit - cryptographic utility (used to create SSL key for encrypted drawing sessions)							openssl
# QtColorPicker - Not chosen for install as it is bundled, but external library is used if available												-								-
# qt5keychain-dev * It can use KWallet or GNOME Keyring, if one of them is available. Used for Drawpile Password storage.							qtkeychain-qt5-devel
# libvpx-dev * VP8 and VP9 video codec (development files) - VP8 and VP9 are open video codecs, originally developed by On2 and 					libvpx-devel
#				released as open source by Google Inc. They are the successor of the VP3 codec, on which the Theora codec was based.				-								-
# 				This package contains the development libraries, header files needed by programs that want to compile with libvpx.					-								-
# sqlite3 * Command line interface for SQLite 3, used by script to auto add settings so users don't have to do so.									sqlite							*

sudo $package_install_program $program_list_to_install_optional_dependencies # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
sudo $packages_clean_program
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Verify curl is installed, not available on either Debian or Ubuntu by default, I forget which... 
package_name=curl
package_version_length=14-19
version_apt_or_dnf_function
minimum_version=7.52.1

package_available_dpkg_or_dnf_function

package_description_1_initial_check_none="This package is used to update the IP address with your"
package_description_2_initial_check_none="new hostname. Users will experience problems connecting to"
package_description_3_initial_check_none="your server if you do not have a static IP address."
package_description_4_initial_check_none="Also used to verify if drawpile compiled successfully."
package_description_5_initial_check_none="Attempting to install $package_name package now..."

package_description_1_not_initially_min="This package is used to update the IP address with your"
package_description_2_not_initially_min="new hostname. Users will experience problems connecting to"
package_description_3_not_initially_min="your server if you do not have a static IP address."
package_description_4_not_initially_min="Also used to verify if drawpile compiled successfully."
package_description_5_not_initially_min="Attempting to install $package_name package now..."

package_description_1_none="This package is used to update the IP address with your"
package_description_2_none="new hostname. Users will experience problems connecting to"
package_description_3_none="your server if you do not have a static IP address."
package_description_4_none="Also used to verify if drawpile compiled successfully."
package_description_5_none=

package_action_1_none="Continuing script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none=

package_description_1_not_min="This package is used to update the IP address with your"
package_description_2_not_min="new hostname. Users will experience problems connecting to"
package_description_3_not_min="your server if you do not have a static IP address."
package_description_4_not_min="Also used to verify if drawpile compiled successfully."
package_description_5_not_min=

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

install_package_set="yes"
package_version_check_and_update_function
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# Verify Git is installed, not available on Ubuntu... 
package_name=git
package_version_length=14-40
version_apt_or_dnf_function
minimum_version=1:2.11.0-3

package_available_dpkg_or_dnf_function

package_description_1_initial_check_none="Package git is used to clone Drawpile's source repository."
package_description_2_initial_check_none="You will not be able to proceed without git installed."
package_description_3_initial_check_none="Attempting to install $package_name now..."
package_description_4_initial_check_none=
package_description_5_initial_check_none=

package_description_1_not_initially_min="Package git is used to clone Drawpile's source repository."
package_description_2_not_initially_min="You may have problems using this script successfully."
package_description_3_not_initially_min="Attempting to update $package_name now..."
package_description_4_not_initially_min=
package_description_5_not_initially_min=

package_description_1_none="Package git is used to clone Drawpile's source repository."
package_description_2_none="You will not be able to proceed without git installed."
package_description_3_none="Please note this package name for reference."
package_description_4_none=
package_description_5_none=

package_action_1_none="Exiting script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none="exit"

package_description_1_not_min="Package git is used to clone Drawpile's source repository."
package_description_2_not_min="You may experience problems with this script."
package_description_3_not_min=
package_description_4_not_min=
package_description_5_not_min=

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

install_package_set="yes"
package_version_check_and_update_function

# Find Latest Version (May provide beta or stable release info)
# drawpile_program_version_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep -m 1 'release version' )
drawpile_program_version_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep -m 1 'release version' | awk '{ print $2 }' | grep -o -P '(?<=version=").*(?=")' )

# Find Latest Stable Release - <release version="2.1.20" date="2021-09-12">
drawpile_program_version_release_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep -v 'type="development"' | grep -m 1 'release version' | awk '{ print $2 }' | grep -o -P '(?<=version=").*(?=")' )

# Find Latest Beta Version - <release version="2.2.0-beta.5" type="development" date="2023-06-21">
drawpile_program_version_beta_on_website=$( curl -s -N https://raw.githubusercontent.com/drawpile/Drawpile/main/src/desktop/net.drawpile.drawpile.appdata.xml | grep 'type="development"' | grep -m 1 'release version' | awk '{ print $2 }' | grep -o -P '(?<=version=").*(?=")' )
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Update Rust Installation . . . *****${normal}"
# https://www.rust-lang.org/tools/install
echo
if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
	# Needed for Raspbian for Desktop
	# rustup installs incorrect version when 64 bit kernel enabled in 32bit OS
	#     https://github.com/rust-lang/rustup/issues/3307
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
	echo
	. ~/.cargo/env
	rustup install --force-non-host stable-i686-unknown-linux-gnu
	echo
	rustup default stable-i686-unknown-linux-gnu
else
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
	echo
	. ~/.cargo/env
fi
echo
rustc --version

<<comment_EOF
Do not need sudo for cmake build options (server, headless, client, etc) nor 'cmake --build', as it won't read the rustup version that was just installed. Sudo changes the environment or something. 
To avoid that issue, chown is done to the build directory and the command '. ~/.cargo/env' is re-issued right before running it. The end user should have rust version 1.66.1 or newer. 
     https://github.com/drawpile/Drawpile/commit/bd11c10a748e8ea93ecb0f01d3cadf531dd95508


The changes below in the script were made due to it failing to compile otherwise. 
Changed --> make -j "$thread_count"
To Cmd  --> cmake --build . -j "$thread_count"

Changed --> sudo make install
To Cmd  --> sudo cmake --install .
comment_EOF
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}*****Verifying Installed Version of Packages . . .*****${normal}"
echo
echo "Minimum versions are versions that I know work. Lower versions may work for you."
echo

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# ---------------------------- **Actual Dependencies** ---------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

package_description_1_none="You will not be able to compile from source. Please note this package"
package_description_2_none="name for reference, and Google for information online to compile"
package_description_3_none="from source."
package_description_4_none=
package_description_5_none=

package_action_1_none="Exiting script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none="exit"

package_description_1_not_min="You may experience problems. Please note this package name"
package_description_2_not_min="for reference."
package_description_3_not_min=
package_description_4_not_min=
package_description_5_not_min=

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
package_name=cmake
package_version_length=14-20
version_apt_or_dnf_function
# Removes non period and non-dash characters, but doesn't appear to be necessary with single bracket comparison test.
# clean_version="$(echo "$version" | perl -pe 's/[^0-9.-]//g')"
minimum_version=3.18
# minimum_version=3.7.2-1 (old version)
package_available_dpkg_or_dnf_function
package_description_1="cmake is a cross platform open source make system"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
package_name=extra-cmake-modules
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=5.28.0-1
package_available_dpkg_or_dnf_function
package_description_1="extra-cmake-modules - Extra modules and scripts for CMake"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=g++
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=gcc-c++
fi
package_version_length=14-30
version_apt_or_dnf_function
minimum_version=4:6.3.0-4
package_available_dpkg_or_dnf_function
package_description_1="Package: g++ - compiler"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libgif-dev
	package_version_length=14-24
	version_apt_or_dnf_function
	minimum_version=5.1.4-0.4
	package_available_dpkg_or_dnf_function
	package_description_1="libgif-dev - library for GIF images (development)."
	package_description_2="     (enables animated GIF export)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
package_name=git
package_version_length=14-24
version_apt_or_dnf_function
minimum_version=1:2.30.2-1
package_available_dpkg_or_dnf_function
package_description_1="git - Git is a fast, scalable, distributed revision control system with an"
package_description_2="     unusually rich command set that provides both high-level operations"
package_description_3="     and full access to internals."
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libkf5archive-dev
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=kf5-karchive-devel
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=5.28.0-2
package_available_dpkg_or_dnf_function
package_description_1="libkf5archive-dev - development files for karchive"
package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
package_name=make
package_version_length=14-24
version_apt_or_dnf_function
minimum_version=4.3-4.1
package_available_dpkg_or_dnf_function
package_description_1="make - A GNU tool for controlling the generation of executables and other non-source files of a program from the program's source files."
package_description_2="     Make allows users to build and install packages without any significant knowledge about the details of the build process. The details"
package_description_3="     about how the program should be built are provided for make in the program's makefile."
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libkf5dnssd-dev
	package_version_length=14-21
	version_apt_or_dnf_function
	minimum_version=5.28.0-1
	package_available_dpkg_or_dnf_function
	package_description_1="libkf5dnssd-dev - development files for kdnssd"
	package_description_2="     (enables local server discovery)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libminiupnpc-dev
	package_version_length=14-27
	version_apt_or_dnf_function
	minimum_version=1.9.20140610-4
	package_available_dpkg_or_dnf_function
	package_description_1="libminiupnpc-dev - UPnP IGD client lightweight library development files"
	package_description_2="     (enables automatic port forwarding)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libqt5network5
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=5.7.1
	package_available_dpkg_or_dnf_function
	package_description_1="libqt5network5  - Qt 5 network module"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libqt5svg5-dev
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=5.7.1
	package_available_dpkg_or_dnf_function
	package_description_1="libqt5svg5-dev - Qt 5 SVG module development files"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=miniupnpc
	package_version_length=14-27
	version_apt_or_dnf_function
	minimum_version=1.9.20140610-4
	package_available_dpkg_or_dnf_function
	package_description_1="miniupnpc - UPnP IGD client lightweight library client"
	package_description_2="     (enables automatic port forwarding)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qtbase5-dev
	package_description_1="qtbase5-dev - Qt 5 base development files"
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=qt5-qtbase-devel
	package_description_1="qt5-qtbase-devel - Qt 5 base development files"
fi
package_version_length=14-18
version_apt_or_dnf_function
minimum_version=5.7.1
package_available_dpkg_or_dnf_function

package_description_2=
package_description_3=
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qtmultimedia5-dev
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=5.7.1
	package_available_dpkg_or_dnf_function
	package_description_1="qtmultimedia5-dev - APIs for multimedia functionality - dev files"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qttools5-dev
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=5.7.1-1
	package_available_dpkg_or_dnf_function
	package_description_1="qttools5-dev - Qt 5 tools development files"
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=zlib-devel
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=1.2.13
	package_available_dpkg_or_dnf_function
	package_description_1="zlib-devel - is a general-purpose, patent-free, lossless data compression"
	package_description_2="     library which is used by many different programs."
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------- **Optional Dependencies** --------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

package_description_1_none="This is an optional package. You may experience specific"
package_description_2_none="problems with Drawpile configuration and use. Please note"
package_description_3_none="this package name for reference, as you may wish to"
package_description_4_none="compile this package from source after looking up"
package_description_5_none="information via Google."

package_action_1_none="Continuing script in 30 seconds."
package_action_2_none="sleep 30"
package_action_3_none=

package_description_1_not_min="This is an optional package. You may experience specific"
package_description_2_not_min="problems with Drawpile configuration and use. Please note"
package_description_3_not_min="this package name for reference, as you may wish to"
package_description_4_not_min="compile this package from source after looking up"
package_description_5_not_min="information via Google."

package_action_1_not_min="Continuing script in 30 seconds."
package_action_2_not_min="sleep 30"
package_action_3_not_min=

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
	package_name=libmicrohttpd
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=libmicrohttpd-devel
else
	package_name=libmicrohttpd-dev
fi
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libmicrohttpd-dev
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=0.9.51-1
package_available_dpkg_or_dnf_function
package_description_1="libmicrohttpd-dev - library embedding HTTP server"
package_description_2="     functionality (development, used for remote"
package_description_3="     administration of drawpile server)"
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 31 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora Linux 32 (Server Edition)\"" || "$what_linux_flavor" == "PRETTY_NAME=\"Fedora 32 (Server Edition)\"" ]]; then
	package_name=libsodium
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=libsodium-devel
else
	package_name=libmicrohttpd-dev
fi
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libsodium-dev
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=1.0.11-2
package_available_dpkg_or_dnf_function
package_description_1="libsodium-dev - Network communication, cryptography and"
package_description_2="     signaturing library - headers (server only, enables"
package_description_3="     external nickname authentication support)"
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libsystemd-dev
	package_version_length=14-19
	version_apt_or_dnf_function
	minimum_version=232-25
	package_available_dpkg_or_dnf_function
	package_description_1="libsystemd-dev - systemd utility library - development files"
	package_description_2="     (enable socket drawpile server startup I believe)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=mini-httpd
	package_version_length=14-21
	version_apt_or_dnf_function
	minimum_version=1.23-1.2
	package_available_dpkg_or_dnf_function
	package_description_1="mini-httpd - Small HTTP server (Used for creating password"
	package_description_2="     for use with NGINX)"
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=openssl
	package_version_length=14-18
	version_apt_or_dnf_function
	minimum_version=1.1.0
	package_available_dpkg_or_dnf_function
	package_description_1="openssl - Secure Sockets Layer toolkit - cryptographic"
	package_description_2="     utility (used to create SSL key for encrypted"
	package_description_3="     drawing sessions)"
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=qt5keychain-dev
	package_version_length=14-21
	version_apt_or_dnf_function
	minimum_version=0.10.0-1
	package_available_dpkg_or_dnf_function
	package_description_1="qt5keychain-dev - Used for storing passwords in Drawpile"
	package_description_2="     client, if you choose to install it."
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=libvpx-dev
	package_version_length=14-20
	version_apt_or_dnf_function
	minimum_version=1.9.0-1
	package_available_dpkg_or_dnf_function
	package_description_1="libvpx-dev - I believe it is used for exporting animations."
	package_description_2=
	package_description_3=
	package_description_4=
	package_description_5=
	install_package_set="no"
	package_version_check_and_update_function
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	package_name=sqlite3
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	package_name=sqlite
fi
package_version_length=14-21
version_apt_or_dnf_function
minimum_version=3.34.1-3
package_available_dpkg_or_dnf_function
package_description_1="sqlite3 - used for importing values into server db"
package_description_2="     automatically so user doesn't have to configure"
package_description_3="     it manually."
package_description_4=
package_description_5=
install_package_set="no"
package_version_check_and_update_function
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
echo
echo "${bold}${cyan}If no errors appeared, all packages are set up as expected.${normal}"
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Cloning Drawpile Repository . . . *****${normal}"
echo
cd "$dp_install_loc"
sudo chmod 777 "$dp_install_loc" -R
cd "$dp_install_loc/Programs"
if [[ -d  "$dp_install_loc/Programs/Drawpile" ]]; then
	echo Download detected of Drawpile files, removing content before downloading.
	rm -f -R "$dp_install_loc/Programs/Drawpile"
	echo
fi
# Use the git hub link to access more information about drawpile on a web browser.
git clone https://github.com/drawpile/Drawpile.git
cd Drawpile
drawpile_version_manual_type_for_script=2.1.20
drawpile_program_version_with_git=$( git describe )
echo
echo
echo "${bold}${cyan}***** Select Drawpile Branch . . . *****${normal}"
echo
echo "Would you like to get the latest drawpile, or the stable branch from"
echo "website, or the 2.1.20 series?" 
echo
echo "     Note: Sometimes these options may be duplicates."
echo
echo "     1 - Latest Drawpile, which may not be stable or compile ..."
echo "         Beta client does not have drawpile-cmd to generate images"
echo "         with script, nor does Drawpile drawing client have built"
echo "         in server."
echo "              Script check: $drawpile_program_version_with_git" # $drawpile_prograDm_version_on_website (or newer)
echo "     2 - Drawpile latest stable release code for server and client."
echo "              Script check: $drawpile_program_version_release_on_website"
echo "     3 - Drawpile 2.1.20 code for server and client ${underline}(Recommended).${normal}"
echo "              Manually typed in: $drawpile_version_manual_type_for_script"
echo

read -r -p 'Enter a number and hit enter to continue: ' git_clone_dp_checkout

if [ -z "$git_clone_dp_checkout" ] ; then
	echo No value selected. Picking 3 for Drawpile 2.1.20 code.
	sleep 5
	git_clone_dp_checkout=3
fi

if (( "$git_clone_dp_checkout" >= "1" && "$git_clone_dp_checkout" <= "3" )) ; then
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
else
	while :; do
		echo
		echo An invalid value was entered. Please try again.
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		read -r -p "${bold}Please enter a number:${normal} " git_clone_dp_checkout
			if [ -z "$git_clone_dp_checkout" ] ; then
				echo
				echo No value selected. Picking 3 for Drawpile 2.1.20 code.
				sleep 5
				git_clone_dp_checkout=3
				break
			fi
			if (( "$git_clone_dp_checkout" >= "1" && "$git_clone_dp_checkout" <= "3" )) ; then
				break
			else
				# Do nothing as no error was detected.
				# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
				:
				continue
			fi
	done
fi
echo
echo '--------------------------------------------------------------------------------'

if [ "$git_clone_dp_checkout" == "1" ]; then
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
elif [ "$git_clone_dp_checkout" == "2" ]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	git checkout -f $drawpile_program_version_release_on_website
elif [ "$git_clone_dp_checkout" == "3" ]; then
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	git checkout -f $drawpile_version_manual_type_for_script
else
	echo "This message for git_clone_dp_checkout should not be visible."
fi
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
<<comment_EOF_delete
comment_EOF_delete
if [[ "$git_clone_dp_checkout" = "1" ]]; then drawpile_version_script_check=$drawpile_program_version_with_git; fi
if [[ "$git_clone_dp_checkout" = "2" ]]; then drawpile_version_script_check=$drawpile_program_version_release_on_website; fi
if [[ "$git_clone_dp_checkout" = "3" ]]; then drawpile_version_script_check=$drawpile_version_manual_type_for_script; fi

function wacom_explanation_function () {
	echo
	xsetwacom --list devices
	echo
	xsetwacom --list parameters
	echo
	echo 'Use the following in the terminal more information.'
	echo 'man wacom'
	echo
	echo 'You can set the tablet from absolute positioning to relative via this command.'
	echo 'xsetwacom set stylus mode relative'
	echo
	echo 'You may have to replace stylus with the ID listed for the device, which you'
	echo 'can find by typing the following: xwacom --list devices'
	echo 'Additionally, you may use the full name of the device in single quotes as well'
	echo 'To represent the device. For example, the following could be used . . .'
	echo 'Wacom Intuos3 6x8 Pen stylus'
	echo
	echo 'There does not appear to be any working graphical based configuration program'
	echo 'for the wacom tablet that I have been able to find as of yet.'
	echo
	echo 'Read more on configuring your Wacom Tablet here --> http://tinyurl.com/blhyk7m'
	echo 'write the following command in the terminal to read more on Wacom Configuration:'
	echo 'man wacom'
	echo
}

function drawpile_client_shortcut_function () {
	if (( "$drawpile_build_configuration" >= "3" && "$drawpile_build_configuration" <= "8" )) ; then
		mkdir -p -v "$option_loc_4/drawpile_icons"
		sudo wget -q --show-progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/Drawpile%20Icon.png -O "$option_loc_4/drawpile_icons/drawpile-icon.png"
		drawpile_client_shortcut_png="$option_loc_4/drawpile_icons/drawpile-icon.png"
		echo
		
		if [[ -e  "/usr/local/bin/drawpile" ]]; then
			location_created_executable_dp=/usr/local/bin/drawpile
		elif [[ -e  "/usr/bin/drawpile" ]]; then
			location_created_executable_dp=/usr/bin/drawpile
		else
				echo "Was unable to determine location of created executable."
				echo "This will cause issues with the script."
				echo
				sleep 30
				exit
		fi
		
		if [[ ! -e "$option_loc_2/Drawpile Client.desktop" && -d "$option_loc_2" && "$what_linux_name" == "NAME=\"Fedora Linux\"" ]] || [[ ! -e "$option_loc_2/Drawpile Client.desktop" && -d "$option_loc_2" && "$what_linux_name" == "NAME=Fedora" ]] || [[ ! -e "$option_loc_2/Drawpile Client.desktop" && -d "$option_loc_2" && "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			echo
			echo "Fedora/Debian doesn't enable Desktop icons by default. If you want that enabled so the"
			echo "script generated shortcuts work, go to the website below, click the link "
			echo "'Click here to install browser extension' and follow the prompts. After that"
			echo "that, click 'Install' to enable the extension."
			echo
			echo "     https://extensions.gnome.org/extension/2087/desktop-icons-ng-ding/"
			echo
			gnome-shell --version
			echo
			pause
		fi
		
		if [[ ! -e "$option_loc_2/Drawpile Client.desktop" ]]; then
			echo Creating shortcut for Drawpile Client on Desktop.
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Client.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Client
Comment=Drawpile Client
Terminal=false
TryExec=drawpile
Exec=$location_created_executable_dp
Type=Application
Icon=$drawpile_client_shortcut_png
Name[en_GB]=Drawpile Client
EOF
			sudo chown $current_username "$option_loc_2/Drawpile Client.desktop"
			sudo chmod 754 "$option_loc_2/Drawpile Client.desktop"
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
				# Trust the Desktop shortcut so it's launchable. 
				# https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
				# gio set "~/Desktop/Drawpile Client.desktop" metadata::trusted true
				gio set "$option_loc_2/Drawpile Client.desktop" metadata::trusted true
				echo
			fi
		else
			echo Shortcut for Drawpile Client already exists on Desktop.
		fi
	fi
}

function compile_drawpile_client_only_function () {
	echo
	echo "${bold}${cyan}*****Compiling with $thread_count threads.*****${normal}"
	echo
	. ~/.cargo/env
	cmake --build . -j "$thread_count"
	# make -j "$thread_count"
	echo
	echo 'Making installation of compiled program, libraries, and documentation to proper locations.'
	echo
	sudo cmake --install .
	# sudo make install
	echo
	#Location of created executable --> /usr/local/bin/
	if [[ -e "/usr/local/bin/drawpile" || -e  "/usr/bin/drawpile" ]]; then
		if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
			echo
			drawpile_client_shortcut_function
			echo
			echo "Exiting script in 30 seconds since no further"
			echo "configuration is required."
			echo
			# The sort command used at the end sorts the list alphabetically.
			sudo sort $app_installation_status_file -o $app_installation_status_file
			# This removes any duplicates that may exist in the file.
			perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
			# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
			sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
			sleep 30
			exit
		else
			echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
			echo "${red}the correct version of $drawpile_version_script_check.${normal}"
			echo "Please copy output from terminal for diagnostic purposes."
			echo "${red}${bold}Pausing script for 30 seconds.${normal}"
			echo
			sleep 30
		fi		
<<comment_EOF_delete
	#Location of created executable --> /usr/local/bin/
	if [[ -e "/usr/local/bin/drawpile" || -e  "/usr/bin/drawpile" ]]; then
		if [[ "$git_clone_dp_checkout" = "1" ]]; then
			echo "${yellow}Drawpile version check skipped.${normal}"
			echo "Because I'm not sure how to reliably compare and check "
			echo "     this via script."
			echo
			# drawpile_program_version_with_git=$( git describe )
			echo Version: $drawpile_version
			echo
			sleep 10
		elif [[ "$git_clone_dp_checkout" = "2" ]] || [[ "$git_clone_dp_checkout" = "3" ]]; then
			if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
				echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
				echo
				drawpile_client_shortcut_function
				echo
				echo "Exiting script in 30 seconds since no further"
				echo "configuration is required."
				echo
				# The sort command used at the end sorts the list alphabetically.
				sudo sort $app_installation_status_file -o $app_installation_status_file
				# This removes any duplicates that may exist in the file.
				perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
				# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
				sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
				sleep 30
				exit
			else
				echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
				echo "${red}the correct version of $drawpile_version_script_check.${normal}"
				echo "Please copy output from terminal for diagnostic purposes."
				echo "${red}${bold}Pausing script for 30 seconds.${normal}"
				echo
				sleep 30
			fi
		else
			echo "${red}${bold}This message should not be visible for drawpile compile check.${normal}"
		fi
comment_EOF_delete
	elif [[ ! -e "/usr/local/bin/drawpile" && ! -e  "/usr/bin/drawpile" ]]; then
		echo "${red}Drawpile failed to compile. Stopping script.${normal}"
		echo "Please copy output from terminal for diagnostic purposes."
		echo
		echo "${red}Exiting script in 30 seconds.${normal}"
		echo 
		sleep 30
		exit
	else
		echo "${red}Unable to tell if Drawpile compiled successfully.${normal}"
		echo "This message should not be visible."
		echo
		echo "${red}Exiting script in 30 seconds.${normal}"
		echo 
		sleep 30
		exit
	fi
}

function drawpile_client_compile_verification_function () {
	drawpile_version=$( QT_QPA_PLATFORM=offscreen drawpile -v 2>/dev/null | grep -m 1 drawpile | awk '{ print $2 }' )
	#Location of created executable --> /usr/local/bin/
	if [[ -e "/usr/local/bin/drawpile" || -e  "/usr/bin/drawpile" ]]; then
		if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
			drawpile_client_compile_verification=1
			echo
		else
			drawpile_client_compile_verification=0
			echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
			echo "${red}the correct version of $drawpile_version_script_check.${normal}"
			if [ "$skip_build_checks" == "1" ]; then
				:
			else
				# elif [ "$skip_build_checks" == "0" ]; then
				echo "Please copy output from terminal for diagnostic purposes."
				echo "${red}${bold}Pausing script for 30 seconds.${normal}"
				echo
				sleep 30
			fi
			echo
		fi
	
<<comment_EOF_delete
		if [[ "$git_clone_dp_checkout" = "1" ]]; then
			echo "${yellow}Drawpile version check skipped.${normal}"
			echo "Because I'm not sure how to reliably compare and check "
			echo "     this via script."
			echo
			echo Version: $drawpile_version
			echo
			sleep 10
		elif [[ "$git_clone_dp_checkout" = "2" ]] || [[ "$git_clone_dp_checkout" = "3" ]]; then
			if [[ "$drawpile_version" = "$drawpile_version_script_check" ]]; then
				echo "${green}Drawpile $drawpile_version compiled successfully!${normal}"
				echo
			else
				echo "${red}Drawpile $drawpile_version has been detected but is not${normal}"
				echo "${red}the correct version of $drawpile_version_script_check.${normal}"
				echo "Please copy output from terminal for diagnostic purposes."
				echo "${red}${bold}Pausing script for 30 seconds.${normal}"
				echo
				sleep 30
			fi
		else
			echo "${red}${bold}This message should not be visible for drawpile compile check.${normal}"
		fi
comment_EOF_delete
	elif [[ ! -e "/usr/local/bin/drawpile" && ! -e  "/usr/bin/drawpile" ]]; then
		echo "${red}Drawpile failed to compile. Stopping script.${normal}"
		echo "Please copy output from terminal for diagnostic purposes."
	else
		echo "${red}Unable to tell if Drawpile compiled successfully.${normal}"
		echo "This message should not be visible."
	fi
}

function drawpile_srv_compile_verification_function () {
	if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
		# echo "Provide the password for: drawpileuser"
		drawpile_srv_version=$( su -c 'drawpile-srv -v' drawpileuser | grep -m 1 drawpile-srv | awk '{ print $2 }' )
	else
		drawpile_srv_version=$( drawpile-srv -v | grep -m 1 drawpile-srv | awk '{ print $2 }' )
	fi
	
	if [[ -e  "/usr/local/bin/drawpile-srv" ]] || [[ -e  "/usr/bin/drawpile-srv" ]]; then
		if [[ "$drawpile_srv_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile-srv $drawpile_srv_version compiled successfully!${normal}"
			drawpile_srv_compile_verification=1
			echo
		else
			drawpile_srv_compile_verification=0
			echo "${red}Drawpile-srv $drawpile_srv_version has been detected but is not${normal}"
			echo "${red}the correct version of $drawpile_version_script_check.${normal}"
			if [ "$skip_build_checks" == "1" ]; then
				:
			else
				# elif [ "$skip_build_checks" == "0" ]; then
				echo "Please copy output from terminal for diagnostic purposes."
				echo "${red}${bold}Exiting script in 30 seconds.${normal}"
				echo
				sleep 30
				exit
			fi
			echo
		fi
<<comment_EOF_delete
		if [[ "$git_clone_dp_checkout" = "1" ]]; then
			# Could be beta, could be stable. Who knows without manual checking?
			echo "${yellow}Drawpile-srv version check skipped.${normal}"
			echo "Because I'm not sure how to reliably compare and check "
			echo "     this via script."
			echo
			echo Version: $drawpile_srv_version
			echo
			sleep 10
		elif [[ "$git_clone_dp_checkout" = "2" ]] || [[ "$git_clone_dp_checkout" = "3" ]]; then
			# 2 is a release version, but not checked by script author. Verifiable.
			# 3 is a release version, and checked by script author. Verifiable.
				if [[ "$drawpile_srv_version" = "$drawpile_version_script_check" ]]; then
					echo "${green}Drawpile-srv $drawpile_srv_version compiled successfully!${normal}"
					echo
				else
					echo "${red}Drawpile-srv $drawpile_srv_version has been detected but is not${normal}"
					echo "${red}the correct version of $drawpile_version_script_check.${normal}"
					echo "Please copy output from terminal for diagnostic purposes."
					echo "${red}${bold}Exiting script in 30 seconds.${normal}"
					echo
					sleep 30
					exit
				fi
		else
			echo "${red}${bold}This message should not be visible for server compile check.${normal}"
		fi
comment_EOF_delete
	elif [[ ! -e  "/usr/local/bin/drawpile-srv" && ! -e  "/usr/bin/drawpile-srv" ]]; then
		drawpile_srv_compile_verification=0
		echo "${red}${bold}Drawpile-srv failed to compile.${normal}"
		if [ "$skip_build_checks" == "1" ]; then
			:
		else
			# elif [ "$skip_build_checks" == "0" ]; then
			echo
			echo "${red}${bold}Stopping script.${normal}"
			echo "Please copy output from terminal for diagnostic purposes."
			echo
			echo "${red}${bold}Exiting script in 30 seconds.${normal}"
			echo 
			sleep 30
			exit
		fi
	else
		drawpile_srv_compile_verification=0
		echo "${red}${bold}Unable to tell if Drawpile compiled successfully.${normal}"
		echo "This message should not be visible."
		echo
		echo "${red}${bold}Exiting script in 30 seconds.${normal}"
		echo
		sleep 30
		exit
	fi
}

function drawpile_tools_compile_verification_function () {
	dprec_tool_version=$( dprectool -v | grep -m 1 dprectool | awk '{ print $2 }' )
	drawpile_cmd_version=$( drawpile-cmd -platform offscreen -v 2> /dev/null | grep -m 1 drawpile-cmd | awk '{ print $2 }' )
	if [ -z $drawpile_cmd_version ]; then
		drawpile_cmd_version=$( drawpile-cmd -v 2> /dev/null | grep -m 1 drawpile-cmd | awk '{ print $2 }' )
	fi

	if [[ -e "/usr/local/bin/drawpile-cmd" && -e "/usr/local/bin/dprectool" ]] || [[ -e "/usr/bin/drawpile-cmd" && -e "/usr/bin/dprectool" ]]; then
		if [[ "$drawpile_cmd_version" = "$drawpile_version_script_check" ]] && [[ "$dprec_tool_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Drawpile-cmd $drawpile_cmd_version and dprectool $dprec_tool_version compiled successfully!${normal}"
			echo
		else
			echo "${red}Drawpile-cmd $drawpile_cmd_version and dprectool $dprec_tool_version have been detected but${normal}"
			echo "${red}aren't the correct version of $drawpile_version_script_check.${normal}"
			echo "Please copy output from terminal for diagnostic purposes."
		fi
	elif [[ ! -e "/usr/local/bin/drawpile-cmd" && -e "/usr/local/bin/dprectool" ]] || [[ ! -e "/usr/bin/drawpile-cmd" && -e "/usr/bin/dprectool" ]]; then
		echo "${red}Drawpile-cmd failed to compile.${normal}"
		echo "However, the dprectool did compile successfully."
		echo "Please copy output from terminal for diagnostic purposes."
	elif [[ -e "/usr/local/bin/drawpile-cmd" && ! -e "/usr/local/bin/dprectool" ]] || [[ -e "/usr/bin/drawpile-cmd" && ! -e "/usr/bin/dprectool" ]]; then
		echo "${red}Dprectool failed to compile.${normal}"
		echo "However, the Drawpile-cmd program did compile successfully."
		echo "Please copy output from terminal for diagnostic purposes."
	elif [[ ! -e "/usr/local/bin/drawpile-cmd" && ! -e "/usr/local/bin/dprectool" && ! -e "/usr/bin/drawpile-cmd" && ! -e "/usr/bin/dprectool" ]]; then
		echo
		echo "${red}Drawpile failed to compile drawpile-cmd and dprectool.${normal}"
		echo "git_clone_dp_checkout=$git_clone_dp_checkout"
		echo 
		if [ "$git_clone_dp_checkout" == "1" ]; then
			echo "This behavior is expected if you selected 1 for latest Drawpile build"
			echo "when cloning the Drawpile repository. This will not be corrected"
			echo "until the beta version is done with fixes."
		elif [ "$git_clone_dp_checkout" == "2" ] || [ "$git_clone_dp_checkout" == "3" ]; then
			echo "If you selected 2 or 3 when cloning the Drawpile repository,"
			echo "please copy output from terminal for diagnostic purposes."
		else
			echo "This message for git_clone_dp_checkout, drawpile-cmd, and dprectool should not be visible."
		fi
	else
		echo "Unable to tell if Drawpile tools compiled successfully."
		echo "This message should not be visible."
	fi
}

function drawpile_dprectool_compile_verification_function () {
	dprec_tool_version=$( dprectool -v | grep -m 1 dprectool | awk '{ print $2 }' )

	if [[ "/usr/local/bin/dprectool" ]] || [[ -e "/usr/bin/dprectool" ]]; then
		if [[ "$dprec_tool_version" = "$drawpile_version_script_check" ]]; then
			echo "${green}Dprectool $dprec_tool_version compiled successfully!${normal}"
			echo
		else
			echo "${red}Dprectool $dprec_tool_version have been detected but${normal}"
			echo "${red}aren't the correct version of $drawpile_version_script_check.${normal}"
			echo "Please copy output from terminal for diagnostic purposes."
		fi
	elif [[ ! -e "/usr/local/bin/dprectool" && ! -e "/usr/bin/dprectool" ]]; then
		echo
		echo "${red}Drawpile failed to compile dprectool.${normal}"
		echo "git_clone_dp_checkout=$git_clone_dp_checkout"
		echo 
		if [ "$git_clone_dp_checkout" == "1" ]; then
			echo "This behavior is expected if you selected 1 for latest Drawpile build"
			echo "when cloning the Drawpile repository. This will not be corrected"
			echo "until the beta version is done with fixes."
		elif [ "$git_clone_dp_checkout" == "2" ] || [ "$git_clone_dp_checkout" == "3" ]; then
			echo "If you selected 2 or 3 when cloning the Drawpile repository,"
			echo "please copy output from terminal for diagnostic purposes."
		else
			echo "This message for git_clone_dp_checkout and dprectool should not be visible."
		fi
	else
		echo "Unable to tell if Drawpile tools compiled successfully."
		echo "This message should not be visible."
	fi
}

function drawpile_compile_verification_function () {
	if [[ "$USER" = "root" ]] || [[ "$USER" = "Root" ]] || [[ "$USER" = "ROOT" ]] || [[ $EUID == 0 ]]; then
		# echo "Provide the password for: drawpileuser"
		drawpile_srv_version=$( su -c 'drawpile-srv -v' drawpileuser | grep -m 1 drawpile-srv | awk '{ print $2 }' )
	else
		drawpile_srv_version=$( drawpile-srv -v | grep -m 1 drawpile-srv | awk '{ print $2 }' )
	fi
	drawpile_version=$( QT_QPA_PLATFORM=offscreen drawpile -v 2>/dev/null | grep -m 1 drawpile | awk '{ print $2 }' )

	if [ "$drawpile_build_configuration" == "1" ] || [ "$drawpile_build_configuration" == "2" ]; then
		# 1 - Server - Graphical User Interface (GUI)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF
		# 2 - Server - Non-GUI (also known as headless)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off
		drawpile_srv_compile_verification_function
		drawpile_dprectool_compile_verification_function
	elif [ "$drawpile_build_configuration" == "3" ] || [ "$drawpile_build_configuration" == "4" ] || [ "$drawpile_build_configuration" == "5" ] || [ "$drawpile_build_configuration" == "6" ]; then
		# 3 - Server And Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool		sudo cmake .. -DINITSYS=systemd -DTOOLS=on												--> sudo $package_install_program libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
		# 4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool							sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=release
		# 5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool					sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug
		# 6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool				sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVERGUI=off
		drawpile_srv_compile_verification_function
		drawpile_client_compile_verification_function
		drawpile_tools_compile_verification_function
	elif [ "$drawpile_build_configuration" == "9" ] || [ "$drawpile_build_configuration" == "10" ]; then
		# 9 - Server - Graphical User Interface (GUI) WARNING NO SERVER CONFIGURATION							sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF
		# 10 - Server - Non-GUI (also known as headless) WARNING NO SERVER CONFIGURATION						sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off
		drawpile_srv_compile_verification_function
		drawpile_dprectool_compile_verification_function
		echo
		echo "Exiting script in 30 seconds since no further"
		echo "configuration is required."
		echo
		sleep 30
		# The sort command used at the end sorts the list alphabetically.
		sudo sort $app_installation_status_file -o $app_installation_status_file
		# This removes any duplicates that may exist in the file.
		perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
		perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
		# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
		sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
		exit
	else
		echo "${red}${bold}Some error occurred in the script. (Drawpile Compile Verification Function)${normal}"
		echo "${red}${bold}This message should not be visible.${normal}"
	fi
}

function drawpile_build_and_compile_function () {
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Preparing to Build Drawpile . . .*****${normal}"
	echo
	cd "$dp_install_loc/Programs/Drawpile"
	sudo mkdir -p -v build > /dev/null
	sudo chmod 777 "$dp_install_loc/Programs/Drawpile/build" -R
	cd "$dp_install_loc/Programs/Drawpile/build"
	#
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# These lines are to fix an issue with an older version of KArchive which cannot be easily upgraded.
	# KArchive apparently doesn't supply a version number macro so this can't be detected at compile time as a problem.
	# File is located under Drawpile/src/libclient/ora/orawriter.cpp and replaces the following text
	# zip.errorLine() 
	# zf.errorLine() 
	#
	# with this instead as per the creator of Drawpile
	#
	# QString("ZIP error")
	#
	# It is presumable that the current (09/18/2017) stable release of KArchive at 5.28.0-2 has this issue fixed with 
	# the testing version of KArchive which is 5.37.0-2. Once updated to or past that number, this section below should
	# no longer be necessary to use.
	#
	# Page for newest KArchive download ---> https://api.kde.org/frameworks/karchive/html/index.html
	# Also see https://tracker.debian.org/pkg/karchive
	# Or see https://packages.qa.debian.org/k/karchive.html
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		package_name=libkf5archive-dev
		version=$( apt-cache policy libkf5archive-dev | grep "Installed:" | cut -c 14-40 )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		package_name=kf5-karchive-devel
		version=$( dnf info kf5-karchive-devel | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
	fi
	echo "$package_name is using version $version"
	echo

	if [ "$version" > "5.29" ]; then
			echo "${green}Installed version of K Archive is greater than 5.29.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version" = "5.29" ]; then
		echo "${green}Installed version of K Archive is equal to 5.29.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version" < "5.29" ]; then
		echo "${yellow}${bold}Installed version of K Archive is less than 5.29.${normal}"
		echo "${yellow}${bold}Modification of source files required.${normal}"
		echo
		echo 'Creating backup of file orawriter.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp" "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp.backup"
		echo
		echo 'Modifying file orawriter.cpp for use with older version of KArchive (5.28.0-2).'
		sudo sed -i -e 's/zip.errorString()/QString("ZIP error")/g' "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp"
		sudo sed -i -e 's/zf.errorString()/QString("ZIP error")/g' "$dp_install_loc/Programs/Drawpile/src/libclient/ora/orawriter.cpp"
	else
		echo "Unable to make a determination of which version of K Archive is installed."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# These lines are to fix an issue with an older version of QTBase5-dev.
	# Q_FALLTHROUGH was introduced in Qt 5.8, this can be fixed by adding
	# the following to the loginhandler.cpp file: #define Q_FALLTHROUGH (void)0
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	echo
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		package_name=qtbase5-dev
		version_qt=$( apt-cache policy qtbase5-dev | grep "Installed:" | cut -c 14-18 )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		package_name=qt5-qtbase-devel
		version_qt=$( dnf info qt5-qtbase-devel | grep -i "Version" | tr -s " " | grep -i "Version :" | tail -1 | awk '{ print $3 }' )
	fi
	echo "$package_name is using version $version_qt"
	echo

	if [ "$version_qt" > "5.8" ]; then
		echo "${green}Installed version of $package_name is greater than 5.8.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version_qt" = "5.8" ]; then
		echo "${green}Installed version of $package_name is equal to 5.8.${normal}"
		echo "${green}No modification of source files required.${normal}"
	elif [ "$version_qt" < "5.8" ]; then
		echo "${yellow}${bold}Installed version of $package_name is less than 5.8.${normal}"
		echo "${yellow}${bold}Modification of source files required.${normal}"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file loginhandler.cpp before modification.'	
		sudo cp "$dp_install_loc/Programs/Drawpile/src/libserver/loginhandler.cpp" "$dp_install_loc/Programs/Drawpile/src/libserver/loginhandler.cpp.backup"
		echo
		echo 'Modifying file loginhandler.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/#include <QNetworkReply>/#include <QNetworkReply>\n#define Q_FALLTHROUGH() (void)0/g' "$dp_install_loc/Programs/Drawpile/src/libserver/loginhandler.cpp"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file aclfilter.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp" "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp.backup"
		echo
		echo 'Modifying file aclfilter.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/#include "..\/shared\/net\/undo.h"/#include "..\/shared\/net\/undo.h"\n#define Q_FALLTHROUGH() (void)0/g' "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp"
		sudo sed -i -e 's/#include "..\/libshared\/net\/undo.h"/#include "..\/libshared\/net\/undo.h"\n#define Q_FALLTHROUGH() (void)0/g' "$dp_install_loc/Programs/Drawpile/src/libclient/canvas/aclfilter.cpp"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file navigator.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/desktop/docks/navigator.cpp" "$dp_install_loc/Programs/Drawpile/src/desktop/docks/navigator.cpp.backup"
		echo
		echo 'Modifying file navigator.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/right.center()/0.5 * right.p1() + 0.5 * right.p2()/g' "$dp_install_loc/Programs/Drawpile/src/desktop/docks/navigator.cpp"
		echo '--------------------------------------------------------------------------------'
		echo 'Creating backup of file joindialog.cpp before modification.'
		sudo cp "$dp_install_loc/Programs/Drawpile/src/desktop/dialogs/joindialog.cpp" "$dp_install_loc/Programs/Drawpile/src/desktop/dialogs/joindialog.cpp.backup"
		echo
		echo 'Modifying file joindialog.cpp for use with older version of qtbase5-dev.'
		sudo sed -i -e 's/currentSecsSinceEpoch()/currentMSecsSinceEpoch() \/ 1000/g' "$dp_install_loc/Programs/Drawpile/src/desktop/dialogs/joindialog.cpp"
		echo '--------------------------------------------------------------------------------'
		cd "$dp_install_loc/Programs/Drawpile"
		sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/elapsed-timer.patch"
		sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/elapsed-timer2.patch"
		echo '--------------------------------------------------------------------------------'
		patch -p1 < elapsed-timer.patch
		echo '--------------------------------------------------------------------------------'
		patch -p1 < elapsed-timer2.patch
		#
		# Changing back to prior directory before continuing script.
		#
		cd "$dp_install_loc/Programs/Drawpile/build"
	else
		echo "Unable to make a determination of which version of qtbase5-dev is installed."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Drawpile Build Configuration . . .*****${normal}"

	variable_to_read_1="drawpile_build_configuration"
	variable_to_read_2="drawpile_build_configuration_number_desc"
	variable_to_read_3="drawpile_build_configuration_settings"

	value_description_1="This value corresponds to these build settings: "

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Using stored value and moving on."
		drawpile_build_configuration=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo 'These options configure the installation of Drawpile for your device.'
		echo 'All options with the server assume systemd will be in use, which helps'
		echo 'manage server startup. This does not apply to client only options.'
		echo
		echo "${bold}${cyan}Definitions:${normal}"
		echo "${bold}Drawpile-cmd${normal} - tool is used for converting recordings to pictures. This"
		echo '     is useful if using file backed sessions with archive set or recordings set.'
		echo '     That step will be presented to you later. A script for automatically converting '
		echo '     recordings and naming them to user friendly formats is included in the server'
		echo '     management script. This only compiles when the client is also built.'
		echo "${bold}File backed sessions${normal} - write sessions to file, helps sessions to survive"
		echo '    power outages and server crashes. Can serve as a recording if server'
		echo '    database set to Archive terminated sessions, however filenames are'
		echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
		echo '    corresponding text file, the session title is inside the text file.'
		echo "${bold}GUI${normal} - Graphical User Interface, this script right now is an example"
		echo '    of a non GUI interface, command line, or terminal.'
		echo "${bold}Headless${normal} - No graphical user interface. Changes must be done by script"
		echo '    or by remote server management.' 
		echo "${bold}Recording${normal} - records all sessions, may not be necessary with file backed"
		echo '    sessions turned on, though it can be useful for debugging broken boards or '
		echo '    recovering art from broken boards. This can be turned on an individual basis'
		echo '    when a room is active on the server by going to File and then Record... ,'
		echo "    or by combining the file backed sessions option and checking ${underline}Archive${normal}"
		echo "    ${underline}terminated sessions${normal}."
		echo
		echo "${bold}Other Notes${normal} - If installing server only, will need to use another computer to"
		echo '    host and draw.'
		echo
		echo "${bold}${cyan}Recommended Option:${normal} 4"
		echo
		echo "${bold}Drawpile Server Only Options:${normal}"
		echo ' 1 - Server - Graphical User Interface (GUI) and dprectool'
		echo ' 2 - Server - Non-GUI (also known as headless) and dprectool'
		echo
		echo "${bold}Drawpile Server And Client Options:${normal}"
		echo ' 3 - Server and Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool'
		echo ' 4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool'
		echo ' 5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool'
		echo ' 6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool'
		echo
		echo "${bold}Drawpile Client Only Options:${normal}"
		echo ' 7 - Drawpile Client Only - with Wacom Tablet drivers Installed'
		echo ' 8 - Drawpile Client Only - Client program only'
		echo
		echo "${bold}${red}Drawpile Server Only & No Server Configuration Options:${normal}"
		echo "${bold}${red}WARNING - ADVANCED USERS ONLY${normal}"
		echo ' 9 - Server - Graphical User Interface (GUI) and dprectool'
		echo '10 - Server - Non-GUI (also known as headless) and dprectool'
		echo "${bold}${red}WARNING - ADVANCED USERS ONLY${normal}"
		echo
		while :; do
			read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " drawpile_build_configuration
			[[ $drawpile_build_configuration =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
			if (( $drawpile_build_configuration >= 1 && $drawpile_build_configuration <= 10)); then
				break
			else
				echo
				echo "Invalid number selection, try again."
				echo
			fi
		done
		sudo sed -i '\!^drawpile_build_configuration =!{h;s!=.*!= '"$drawpile_build_configuration"'!};${x;\!^$!{s!!drawpile_build_configuration = '"$drawpile_build_configuration"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	t_max=$(grep -c ^processor /proc/cpuinfo)

	echo "${bold}${cyan}*****Determine Compile Speed . . .*****${normal}"
	echo

	if [ "$t_max" == "1" ] ; then
		echo "Only one core available for compiling. Continuing Script."
		thread_count=1
	else
		echo 'You can hit enter to continue here, as it will pick the maximum amount of'
		echo 'threads available from the processor. If the script froze at this stage, try'
		echo "a lower number than $t_max. This uses less system resources on the Pi and is "
		echo 'more likely to complete without freezing up.'
		echo
		echo 'This is the command to be run, where # is a number input by you:'
		echo 'cmake --build . -j #'
		# echo 'sudo make -j #'
		echo
		read -p "${bold}${cyan}Enter compiling thread count (blank for maximum of $t_max): ${normal}" thread_count
		while [ true ] ; do
			if [ -z "$thread_count" ] ; then
				echo "Compiling using maximum"
				thread_count=$t_max
				echo
				break
			elif [[ $thread_count =~ ^[0-9]+$ ]] ; then
				if (($thread_count>0)) && (($thread_count<=$t_max)) ; then
					break
				else
					echo "Value: '$thread_count' is not within the range [1,$t_max]"
					echo
				fi
			else
				echo "Value: '$thread_count' is not a positive integer"
				echo
			fi
			read -r -p "${bold}${cyan}Enter compiling thread count (blank for maximum of $t_max): ${normal}" thread_count
		done
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
<<comment_EOF
	#---------------------------------------------------------------------------------------------------------------------------------
	# Raspbian Package Descriptions
	#----------------------------------------
		libwacom-bin ______________	libwacom is a library to identify wacom tablets and their model-specific features.
									It provides easy access to information such as "is this a built-in on-screen tablet",
									"what is the size of this model", etc. This package contains the utilities which 
									are used by the libraries.
		libwacom-common ___________ Same as above description.
		libwacom-dev ______________ Same as above description.
		libwacom2 _________________ Same as above description.
		libwacom2-dbg _____________ Same as above description. (Doesn't appear to be available any longer)
									https://packages.debian.org/buster/libwacom2-dbg
		xserver-xorg-input-wacom __ This package provides the X.Org driver for Wacom tablet devices.
	#---------------------------------------------------------------------------------------------------------------------------------
	# Fedora Package Descriptions
	#----------------------------------------
		kcm_wacomtablet ___________	This module implements a GUI for the Wacom Linux Drivers and extends it with 
									profile support to handle different button/pen layouts per profile.
		libwacom __________________ libwacom is a library that provides information about Wacom tablets and tools. 
									This information can then be used by drivers or applications to tweak the UI
									or general settings to match the physical tablet.
		libwacom-data _____________ Tablet information client library data files.
		libwacom-devel ____________ Tablet information client library development package.
		libwacom-utils ____________ Utilities to handle and/or debug libwacom devices.
		xorg-x11-drv-wacom ________ X.Org X11 wacom input driver for Wacom tablets.
		xorg-x11-drv-wacom-devel __ X.Org X11 wacom input driver development files.
	#---------------------------------------------------------------------------------------------------------------------------------
comment_EOF

	if [ "$drawpile_build_configuration" == "3" ] || [ "$drawpile_build_configuration" == "7" ]; then
		# For builds that install Wacom drivers and such also
		app_does_not_exist=0
		app_installed=0
		app_not_installed=0
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			program_list_to_install_wacom="libwacom-bin libwacom-common libwacom-dev libwacom2 xserver-xorg-input-wacom"
			progs=(libwacom-bin libwacom-common libwacom-dev libwacom2 xserver-xorg-input-wacom);
		fi
		if [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			program_list_to_install_wacom="libwacom-bin libwacom-common libwacom-dev xserver-xorg-input-wacom"
			progs=(libwacom-bin libwacom-common libwacom-dev xserver-xorg-input-wacom);
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			program_list_to_install_wacom="kcm_wacomtablet libwacom libwacom-data libwacom-devel libwacom-utils xorg-x11-drv-wacom xorg-x11-drv-wacom-devel"
			progs=(kcm_wacomtablet libwacom libwacom-data libwacom-devel libwacom-utils xorg-x11-drv-wacom xorg-x11-drv-wacom-devel);
		fi
		# package_install_status_check_function
	fi

	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Read more here --->		https://github.com/drawpile/Drawpile/wiki/Building-from-sources
	# -DCLIENT=off				: Compile only the server
	# -DCMAKE_BUILD_TYPE=debug	: Compile a debugging version
	# -DINITSYS=systemd			: enable systemd socket activation and logging support for the dedicated server
	# -DSERVER=off				: Don't build the standalone server
	# -DSERVERGUI=off			: Do not include the server GUI. (Good when deploying to a headless server.)
	# -DTOOLS=on				: Compile additional tools (Generates dprectool. Also generates drawpile-cmd when the client is set to be built)
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	echo "${bold}${cyan}*****Preliminary Build Setup . . . *****${normal}"
	echo
	sudo chown $current_username "$dp_install_loc/Programs/Drawpile/build" -R
	if [ "$drawpile_build_configuration" == "1" ] || [ "$drawpile_build_configuration" == "9" ]; then
		if [[ "$drawpile_build_configuration" = "1" ]]; then drawpile_build_configuration_number_desc="1 - Server - Graphical User Interface (GUI) and dprectool"; fi
		if [[ "$drawpile_build_configuration" = "9" ]]; then drawpile_build_configuration_number_desc="9 - Server - Graphical User Interface (GUI) and dprectool WARNING NO SERVER CONFIGURATION"; fi
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DCLIENT=OFF -DSERVER=ON -DTOOLS=on"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "2" ] || [ "$drawpile_build_configuration" == "10" ]; then
		if [[ "$drawpile_build_configuration" = "2" ]]; then drawpile_build_configuration_number_desc="2 - Server - Non-GUI (also known as headless) and dprectool"; fi
		if [[ "$drawpile_build_configuration" = "10" ]]; then drawpile_build_configuration_number_desc="10 - Server - Non-GUI (also known as headless) and dprectool WARNING NO SERVER CONFIGURATION"; fi
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off -DSERVER=ON -DTOOLS=on"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "3" ]; then
		drawpile_build_configuration_number_desc="3 - Server And Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DTOOLS=on -DSERVER=ON"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings
		package_install_status_check_function
		sudo $package_install_program $program_list_to_install_wacom # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		wacom_explanation_function
	elif [ "$drawpile_build_configuration" == "4" ]; then
		drawpile_build_configuration_number_desc="4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DSERVER=ON -DTOOLS=on"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "5" ]; then
		drawpile_build_configuration_number_desc="5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVER=ON"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "6" ]; then
		drawpile_build_configuration_number_desc="6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVERGUI=off -DSERVER=ON"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
	elif [ "$drawpile_build_configuration" == "7" ]; then
		drawpile_build_configuration_number_desc="7 - Drawpile Client Only - with Wacom Tablet drivers Installed"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DSERVER=off"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings
		package_install_status_check_function
		sudo $package_install_program $program_list_to_install_wacom # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		wacom_explanation_function
		compile_drawpile_client_only_function
	elif [ "$drawpile_build_configuration" == "8" ]; then
		drawpile_build_configuration_number_desc="8 - Drawpile Client Only - Client program only"
		sudo sed -i '\!^drawpile_build_configuration_number_desc =!{h;s!=.*!= '"$drawpile_build_configuration_number_desc"'!};${x;\!^$!{s!!drawpile_build_configuration_number_desc = '"$drawpile_build_configuration_number_desc"'!;H};x}' $drawpile_configuration_values_file
		drawpile_build_configuration_settings="cmake .. -DCMAKE_BUILD_TYPE=Release -DSERVER=off"
		sudo sed -i '\!^drawpile_build_configuration_settings =!{h;s!=.*!= '"$drawpile_build_configuration_settings"'!};${x;\!^$!{s!!drawpile_build_configuration_settings = '"$drawpile_build_configuration_settings"'!;H};x}' $drawpile_configuration_values_file
		# May cause shell to exit so do this right before command runs to make sure it reads it.
		. ~/.cargo/env
		$drawpile_build_configuration_settings	
		compile_drawpile_client_only_function
	else
		echo "${red}This message should not be visible.${normal}"
		echo
		echo "${red}Exiting script in 30 seconds.${normal}"
		echo 
		sleep 30
		exit
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Compiling with $thread_count threads . . . *****${normal}"
	echo
	. ~/.cargo/env
	cmake --build . -j "$thread_count"
	# make -j "$thread_count"
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Making installation of compiled program,*****${normal}"
	echo "${bold}${cyan}*****      libraries, and documentation      *****${normal}"
	echo "${bold}${cyan}*****          to proper locations.          *****${normal}"
	echo
	#Location of created executable --> /usr/local/bin/
	sudo cmake --install .
	# sudo make install
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Verifying if Drawpile Compiled Successfully . . . *****${normal}"
	echo
	drawpile_compile_verification_function
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
}
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------

if [[ -e "/usr/local/bin/drawpile-srv" || -e "/usr/bin/drawpile-srv" ]] || [[ -e "/usr/local/bin/drawpile" || -e "/usr/bin/drawpile" ]]; then
	echo
	echo "${bold}${cyan}*****     Located Drawpile on System . . .    *****${normal}"
	echo "${bold}${cyan}***** Testing if compiling is necessary . . . *****${normal}"
	echo
	# If Drawpile server or client exists, then read file to check build configuration and test that it is up to date.
	read_stored_build_value_query_1=$( grep -m 1 "drawpile_build_configuration = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf $i " "; print $NF}' )
	drawpile_build_configuration=$read_stored_build_value_query_1
	if [ ! -z "$read_stored_build_value_query_1" ] || [ "$read_stored_build_value_query_1" != "=" ]; then
		skip_build_checks=1
		# If value read from file is not null or the equal sign, verify it compiled properly.
		if [ "$drawpile_build_configuration" == "1" ] || [ "$drawpile_build_configuration" == "2" ]; then
			# 1 - Server - Graphical User Interface (GUI)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DTOOLS=on
			# 2 - Server - Non-GUI (also known as headless)															sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off -DTOOLS=on
			drawpile_srv_compile_verification_function
			drawpile_dprectool_compile_verification_function
			echo
			# If compiled, skip action and continue on with script setup. If failure, attempt compiling again.
			if [ "$drawpile_srv_compile_verification" == "1" ]; then
				echo "${bold}${green}Drawpile Server successfully built.${normal}"
				echo
				echo "${bold}${green}Skipping compiling step.${normal}"
				echo
				echo '--------------------------------------------------------------------------------'
				echo '--------------------------------------------------------------------------------'
			elif [ "$drawpile_srv_compile_verification" == "0" ]; then
				echo "${bold}${cyan}*****   Drawpile is using old version . . .   *****${normal}"
				echo "${bold}${cyan}*****     Will run compiling options . . .    *****${normal}"
				echo
				drawpile_build_and_compile_function
			else
				echo "${bold}${red}This message should not be visible for skipping compiling check."
			fi
		elif [ "$drawpile_build_configuration" == "3" ] || [ "$drawpile_build_configuration" == "4" ] || [ "$drawpile_build_configuration" == "5" ] || [ "$drawpile_build_configuration" == "6" ]; then
			# 3 - Server And Client - GUI server, client, Wacom Tablet drivers, dprectool, and drawpile-cmd tool		sudo cmake .. -DINITSYS=systemd -DTOOLS=on												--> sudo $package_install_program libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
			# 4 - Server And Client - GUI server, client, dprectool, and drawpile-cmd tool							sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=release
			# 5 - Server And Client - GUI Server, debugging client, dprectool, and drawpile-cmd tool					sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug
			# 6 - Server And Client - Headless server, debugging client, dprectool, and drawpile-cmd tool				sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug -DSERVERGUI=off
			drawpile_srv_compile_verification_function
			drawpile_client_compile_verification_function
			drawpile_tools_compile_verification_function
			echo
			# If compiled, skip action and continue on with script setup.
			if [ "$drawpile_srv_compile_verification" == "1" ] && [ "$drawpile_client_compile_verification" == "1" ]; then
				echo "${bold}${green}Drawpile Client and Server successfully built.${normal}"
				echo
				echo "${bold}${green}Skipping compiling step.${normal}"
				echo
				echo '--------------------------------------------------------------------------------'
				echo '--------------------------------------------------------------------------------'
			elif [ "$drawpile_srv_compile_verification" == "0" ] || [ "$drawpile_client_compile_verification" == "0" ]; then
				echo "${bold}${cyan}*****   Drawpile is using old version . . .   *****${normal}"
				echo "${bold}${cyan}*****     Will run compiling options . . .    *****${normal}"
				echo
				drawpile_build_and_compile_function
			else
				echo "${bold}${red}This message should not be visible for skipping compiling check."
			fi
		elif [ "$drawpile_build_configuration" == "9" ] || [ "$drawpile_build_configuration" == "10" ]; then
			# 9 - Server - Graphical User Interface (GUI) WARNING NO SERVER CONFIGURATION							sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DTOOLS=on
			# 10 - Server - Non-GUI (also known as headless) WARNING NO SERVER CONFIGURATION						sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off -DTOOLS=on
			skip_build_checks=0
			drawpile_srv_compile_verification_function
			drawpile_dprectool_compile_verification_function
			# If compiled, skip action and continue on with script exit. If failure, attempt compiling again.
			echo
			echo "Exiting script in 30 seconds since no further"
			echo "configuration is required."
			echo
			sleep 30
			# The sort command used at the end sorts the list alphabetically.
			sudo sort $app_installation_status_file -o $app_installation_status_file
			# This removes any duplicates that may exist in the file.
			perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
			perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
			# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
			sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
			exit
		else
			echo "${red}${bold}Some error occurred in the script. (Check if built and up to date already) ${normal}"
			echo "${red}${bold}This message should not be visible.${normal}"
			drawpile_build_and_compile_function
		fi
	else
		# Continue to build Drawpile, build configuration value is null or equal sign.
		skip_build_checks=0
		drawpile_build_and_compile_function
	fi
else
	# Continue to build Drawpile, hasn't compiled yet.
	skip_build_checks=0
	drawpile_build_and_compile_function
fi

#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
echo
echo "${bold}${green}*****      Drawpile is Compiled . . .      *****${normal}"
echo "${bold}${green}***** Setting location of executable . . . *****${normal}"

if [[ -e  "/usr/local/bin/drawpile-srv" ]]; then
	location_created_executable_dpsrv=/usr/local/bin/drawpile-srv
elif [[ -e  "/usr/bin/drawpile-srv" ]]; then
	location_created_executable_dpsrv=/usr/bin/drawpile-srv
else
		echo "Was unable to determine location of created executable."
		echo "This will cause issues with the script."
		echo
		sleep 30
		exit
fi
echo
drawpile_client_shortcut_function
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Now setting up startup configuration . . .*****${normal}"
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Checking for SELinux to see if configuration is *****${normal}"
echo "${bold}${cyan}*****      required to allow communication . . .       *****${normal}"
echo

<<comment_EOF
selinux_status=$( getenforce 2>/dev/null )
selinux_available_check=$?

# echo "Available:		$selinux_available_check"
# echo "SELinux Current Status:	$selinux_status"

if [ "$selinux_available_check" -eq "0" ]; then
	# SELinux installed.
	if [ "$selinux_status" == "Disabled" ]; then
		echo "SELinux status is: Disabled."
		echo "No action is required. However, if you enable it in the future,"
		echo "it will cause drawpile-srv to not function as intended."
		echo
		sleep 30
	else
		selinux_config_status=$( sestatus 2>/dev/null | grep -i "Mode from config file:" | awk '{ print $5 }' )
		# echo "SELinux Config Status:	$selinux_config_status"
		# echo
		if [ "${selinux_status,,}" == "${selinux_config_status,,}" ]; then
			echo "SELinux status is not temporarily changed."
			if [ "$selinux_status" == "Enforcing" ]; then
				echo "SELinux status is: Enforcing"
				echo
				echo "Action required to ensure the server works."
			elif [ "$selinux_status" == "Permissive" ]; then
				echo "SELinux status is: Permissive."
				echo
				echo "No action is required."
			else
				echo "This message for SELinux status (1) should not be visible."
			fi
		elif [ "${selinux_status,,}" != "${selinux_config_status,,}" ]; then
			echo "SELinux status is temporarily changed."
			if [ "$selinux_status" == "Enforcing" ] && [ "$selinux_config_status" == "permissive" ]; then
				echo "SELinux status is: Enforcing"
				echo
				echo "However, on system reboot the status will return to permissive."
				echo "No action is required. It is recommended that you reboot when"
				echo "the script is completed or turn it back to permissive mode with"
				echo "the following command:"
				echo "     sudo setenforce 0"
				echo
				pause
				echo
			elif [ "$selinux_status" == "Permissive" ] && [ "$selinux_config_status" == "enforcing" ]; then
				echo "SELinux status is: Permissive."
				echo
				echo "However, on system reboot the status will return to enforcing."
				echo "Action required to ensure the server works on reboot."
			else
				echo "This message for SELinux status (2) should not be visible."
			fi
		else
			echo "This message for SELinux temporary status should not be visible."
		fi
	fi
elif [ "$selinux_available_check" -eq "127" ]; then
	# SELinux is not available. No action required.
	:
else
	echo "This message for SELinux check should not be visible."
fi
comment_EOF

<<comment_EOF
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "$what_fedora_variant" == "VARIANT_ID=workstation" ]; then
	echo Fedora Workstation, adding firewall rules.
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27750/tcp
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27780/tcp
	# sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27750/udp
	# sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-port=27780/udp
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-service=http
	sudo firewall-cmd --zone=FedoraWorkstation --permanent --add-service=https
	sudo firewall-cmd --reload
	echo
	echo Fedora Workstation, adding SELinux access to /var/www/html.
	# Useful notes for trying to figure out why NGINX doesn't work. u3u
	# sudo ausearch -m avc -ts today | audit2allow
	# sudo cat /var/log/nginx/error.log
	
	# Needed so NGINX can access the directory
	sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"
	sudo semanage port -a -t http_port_t -p tcp 27750
	sudo semanage port -a -t http_port_t -p tcp 27780
	
	sudo setsebool -P httpd_can_network_relay 1
elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [ "$what_fedora_variant" == "VARIANT_ID=server" ]; then
	echo Fedora Server, adding firewall rules.
	sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27750/tcp
	sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27780/tcp
	# sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27750/udp
	# sudo firewall-cmd --zone=FedoraServer --permanent --add-port=27780/udp
	sudo firewall-cmd --zone=FedoraServer --permanent --add-service=http
	sudo firewall-cmd --zone=FedoraServer --permanent --add-service=https
	sudo firewall-cmd --reload
	echo
	echo Fedora Server, adding SELinux access to /var/www/html.
	# Useful notes for trying to figure out why NGINX doesn't work. u3u
	# sudo ausearch -m avc -ts today | audit2allow
	# sudo cat /var/log/nginx/error.log
	
	# Needed so NGINX can access the directory
	sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"
	sudo semanage port -a -t http_port_t -p tcp 27750
	sudo semanage port -a -t http_port_t -p tcp 27780
	
	sudo setsebool -P httpd_can_network_relay 1
elif [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	:
else
	echo This message should not be visible for Fedora Firewall Rules
fi
comment_EOF

function selinux_adjustments_function () {
	# Useful notes for trying to figure out why NGINX doesn't work. u3u
	# sudo ausearch -m avc -ts today | audit2allow
	# sudo cat /var/log/nginx/error.log
	
	# Needed so NGINX can access the directory
	echo 'sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"'
	sudo semanage fcontext -a -t httpd_sys_rw_content_t "/var/www/html/(/.*)?"
	echo
	echo "sudo semanage port -a -t http_port_t -p tcp 27750"
	sudo semanage port -a -t http_port_t -p tcp 27750
	echo
	echo "sudo semanage port -a -t http_port_t -p tcp 27780"
	sudo semanage port -a -t http_port_t -p tcp 27780
	echo
	echo "sudo setsebool -P httpd_can_network_relay 1"
	sudo setsebool -P httpd_can_network_relay 1
}

selinux_status=$( getenforce 2>/dev/null )
selinux_available_check=$?

# echo "Available:		$selinux_available_check"
# echo "SELinux Current Status:	$selinux_status"

if [ "$selinux_available_check" -eq "0" ]; then
	# SELinux installed.
	if [ "$selinux_status" == "Disabled" ]; then
		echo "${bold}${green}SELinux status is: Disabled.${normal}"
		echo "No action is required. However, if you enable it in the future,"
		echo "it will cause drawpile-srv to not function as intended."
		echo
		sleep 30
	else
		selinux_config_status=$( sestatus 2>/dev/null | grep -i "Mode from config file:" | awk '{ print $5 }' )
		# echo "SELinux Config Status:	$selinux_config_status"
		# echo
		if [ "${selinux_status,,}" == "${selinux_config_status,,}" ]; then
			echo "${bold}${green}SELinux status is not temporarily changed.${normal}"
			if [ "$selinux_status" == "Enforcing" ]; then
				echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
				echo
				echo "${bold}${yellow}Action required to ensure the server works.${normal}"
				echo
				echo '-------------------------------------------'				
				echo 
				selinux_adjustments_function
				echo
				sleep 10
			elif [ "$selinux_status" == "Permissive" ]; then
				echo "${bold}${green}SELinux status is: Permissive.${normal}"
				echo
				echo "No action is required."
				echo
			sleep 10
			else
				echo "${bold}${red}This message for SELinux status (1) should not be visible.${normal}"
			fi
		elif [ "${selinux_status,,}" != "${selinux_config_status,,}" ]; then
			echo "${bold}${yellow}SELinux status is temporarily changed.${normal}"
			if [ "$selinux_status" == "Enforcing" ] && [ "$selinux_config_status" == "permissive" ]; then
				echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
				echo
				echo "However, on system reboot the status will return to permissive."
				echo "No action is required. It is recommended that you reboot when"
				echo "the script is completed or turn it back to permissive mode with"
				echo "the following command:"
				echo "     sudo setenforce 0"
				echo
				pause
				echo
			elif [ "$selinux_status" == "Permissive" ] && [ "$selinux_config_status" == "enforcing" ]; then
				echo "${bold}${yellow}SELinux status is: Permissive.${normal}"
				echo
				echo "However, on system reboot the status will return to enforcing."
				echo "Action required to ensure the server works on reboot."
				echo
				echo '-------------------------------------------'				
				echo
				selinux_adjustments_function
				echo
				sleep 10
			else
				echo "${bold}${red}This message for SELinux status (2) should not be visible.${normal}"
				echo
			sleep 10
			fi
		else
			echo "${bold}${red}This message for SELinux temporary status should not be visible.${normal}"
			echo
			sleep 10
		fi
	fi
elif [ "$selinux_available_check" -eq "127" ]; then
	echo "${bold}${green}SELinux is not available. No action required.${normal}"
	echo
	sleep 10
else
	echo "${bold}${red}This message for SELinux check should not be visible.${normal}"
	echo
	sleep 10
fi
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Checking for Firewall to see if configuration is *****${normal}"
echo "${bold}${cyan}*****      required to allow communication . . .       *****${normal}"
echo

function firewall_cmd_adjustments_function () {
	firewall_zone_name=$( sudo firewall-cmd --list-all | sed -n '1 p' | awk '{ print $1 }' )
	
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27750/tcp"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27750/tcp
	echo
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27780/tcp"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27780/tcp
	echo
	# sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27750/udp
	# sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-port=27780/udp
	
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=http"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=http
	echo
	echo "sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=https"
	sudo firewall-cmd --zone=$firewall_zone_name --permanent --add-service=https
	echo
	echo "sudo firewall-cmd --reload"
	sudo firewall-cmd --reload
}

firewall_cmd_status=$( sudo firewall-cmd --state 2>/dev/null )
firewall_cmd_available_check=$?
# echo Check: $firewall_cmd_available_check

if [ "$firewall_cmd_available_check" -eq "0" ] || [ "$firewall_cmd_available_check" -eq "252" ] || [ "$firewall_cmd_available_check" -ne "1" ]; then
	# 0 is running, 252 is not running.
	# echo State: $firewall_cmd_status
	echo "${bold}${yellow}Firewall-cmd installed.${normal}"
	if [ "$firewall_cmd_status" == "running" ]; then
		echo "${bold}${yellow}Firewall-cmd is running currently.${normal}"
		echo
		echo "${bold}${yellow}Action required to ensure the server works.${normal}"
		echo
		echo '-------------------------------------------'				
		echo
		firewall_cmd_adjustments_function
		echo
		sleep 10
	elif [ "$firewall_cmd_status" == "not running" ]; then
		echo "${bold}${green}Firewall-cmd is not running currently.${normal}"
		echo
		echo "${bold}${yellow}Action required to ensure the server works.${normal}"
		echo
		echo '-------------------------------------------'				
		echo
		firewall_cmd_adjustments_function
		echo
		sleep 10
	else
		echo "${bold}${red}This message should not be visible for firewall-cmd status.${normal}"
		echo
		sleep 10
	fi
elif [ "$firewall_cmd_available_check" -eq "1" ]; then
	echo "${bold}${green}Firewall_cmd is not available. No action required.${normal}"
	echo
	sleep 10
else
	echo "${bold}${red}This message for Firewall_cmd check should not be visible.${normal}"
	echo
	sleep 10
fi
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
variable_to_read_1="dns_choice"
variable_to_read_2=""
variable_to_read_3=""


value_description_1="This value is for keeping your hostname and IP address synchronized."
value_description_2="1 for freeDNS.afraid.org"
value_description_3="2 for No-IP"
value_description_4="3 for DuckDNS."
value_description_5="9 for no DNS update service."

read_stored_config_value_query_function

if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	dns_choice=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "${bold}${cyan}***** This stage is for setting up an easy-to-remember *****${normal}"
	echo "${bold}${cyan}*****        way to connect to your server . . .       *****${normal}"
	echo 
	echo "${underline}https://freedns.afraid.org/ ${normal}"
	echo "${bold}Pros:${normal} Free registration, renew hostname every six months."
	echo "${bold}Cons:${normal} Minor additional setup with script guided help required, guided setup."
	echo '      If a typo is made, you must use crontab -e to update the code manually.'
	echo 
	echo "${underline}https://www.noip.com/ ${normal}"
	echo "${bold}Pros:${normal} Free registration, simple setup, only slightly less complex than above"
	echo '      option listed above.'
	echo "${bold}Cons:${normal} Must renew the hostname via notification received in email every 30 days"
	echo '      or lose access. Might not be able to get the same name back.'
	echo
	echo "${underline}https://www.duckdns.org/ ${normal}"
	echo "${bold}Pros:${normal} Free registration, simple setup, lots of configuration options available."
	echo '      can use your own domain name (read the FAQs page).'
	echo "${bold}Cons:${normal} Cannot detect IPv6 addresses as of September 2023."
	echo '      It must be manually specified for now.'
	echo
	echo "${underline}Note: ${normal}"
	echo "      If you have purchased your own domain name, usually they will provide the ability to set"
	echo "      a DNS A-record for you. In which case, this step is not needed and can be safely skipped."
	echo "      This step is primarily intended for small servers ran from home with a dynamic IP address"
	echo "      which may change without notice."
	echo
	echo 'Do you want to use freeDNS.afraid.org, No-IP, DuckDNS, or skip this step?'
	echo
	echo 'Press 1 for freeDNS.afraid.org'
	echo 'Press 2 for No-IP'
	echo 'Press 3 for DuckDNS'
	echo
	echo 'Press 9 to skip this step.'
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " dns_choice
		[[ $dns_choice =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $dns_choice >= 1 && $dns_choice <= 3 || $dns_choice == 9 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	
	if [ "$dns_choice" == "1" ]; then
		variable_to_read_1="freeDNS_input"
		variable_to_read_2=""
		variable_to_read_3=""
		
		value_description_1=""
		value_description_2=""
		value_description_3=""
		value_description_4=""
		value_description_5=""

		read_stored_config_value_query_function
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value in script memory and moving on."
			freeDNS_input=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			# Assuming value is being set for first time, this should be no. If changed to yes, SSL certs and SSL script should probably also be updated.
			crontab_change=1
			if sudo crontab -u root -l | grep '#Drawpile Hostname' > /dev/null 2>&1; then
				echo
				echo "${bold}${yellow}Crontab set up for FreeDNS.${normal}"
				echo "${bold}${yellow}Removing old info before adding new content.${normal}"
				crontab_change=yes
				sudo crontab -u root -l | grep -v '#Drawpile Hostname' | sudo crontab -u root -
				echo
			else
				:
				# echo No crontab, sadge. Adding in crontab jerb.
			fi
			echo
			echo "${bold}${cyan}*****Setting up FreeDNS.afraid.org cronjob for auto update of IP . . . *****${normal}"
			echo 
			echo 'Requirements: Register an account, go to Subdomains option on the left,'
			echo 'select option Add a subdomain. Leave Type set to A, set any desired subdomain'
			echo 'name that you wish to use. Domain options are listed in the dropbox, you can '
			echo 'pick Many many more available in order to search for domain names you like '
			echo 'that are listed as Public. Click the link Shared Domain Registry and search '
			echo 'for a desired domain. Once you find a name you like, click on the link on the'
			echo 'left. Leave the fields Destination, TTL, and Wildcard as they currently are... '
			echo 'and fill in the Captcha that everyone loves and hates.'
			echo
			echo 'Click on Dynamic DNS on the left, then go to dynamic update interface'
			echo 'hyperlink at the top of the page, should say (version 2) beside it. Click '
			echo 'the checkbox beside your hostname, click Apply below that where the option to '
			echo 'the left should read: Action: Enable Dynamic DNS... . Then click cron script'
			echo 'on the gray table to the right of your registered hostname.'
			echo
			echo 'Copy only the very bottom line of the page and paste here.'
			echo 'Press Ctrl + Shift + V to paste.'
			echo 'That is everything which appears after this line ... '
			echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'
			echo
			regexp=".*[[:space:]]*[[:space:]]*[[:space:]]*[[:space:]]*[[:space:]]sleep[[:space:]].*[[:space:]];[[:space:]]curl[[:space:]]-s[[:space:]]http://sync.afraid.org/u/.*/[[:space:]]>>[[:space:]]/tmp/freedns_.*log[[:space:]].*>"
			while :; do
				echo "${bold}${cyan}Enter the requested information now${normal}:"
				read freeDNS_input
				if [[ "$freeDNS_input" =~ $regexp ]]; then
					break
				else
					echo
					echo "${bold}${red}Invalid information entered, try again.${normal}"
					echo "${bold}${red}Was expecting 'something' + 'http://sync.afraid.org' + 'something' + '2>/dev/null'${normal}"
					echo
					echo 'Copy only the very bottom line of the page and paste in terminal (Ctrl + Shift + V).'
					echo 'That is everything which appears after this line ... '
					echo 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin'
					echo
					echo ----------------------------------------------------------------------------------
					echo
				fi
			done
			
			# This line below removes any existing copies of this line to prevent duplicates. This could be done in a variety of ways. 
			# 
			# crontab -u $USER -l | grep -v 'http://sync.afraid.org' | grep -v 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin' | crontab -u $USER -
			# crontab -u $USER -l | grep -v 'PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin #Drawpile Hostname' | grep -v 'http://sync.afraid.org' | crontab -u $USER -
			# 
			# It first displays output, then selects inverse lines that don't match the query for two lines, and saves this info to crontab to preserve other entries.
			# The line below simply looks for a comment and removes the line to ensure only removing intended lines.
			# 
			# crontab -u $USER -l | grep -v '#Drawpile Hostname' | crontab -u $USER -
			# 
			# You can check the "/tmp/freedns_YOUR-HOSTNAME.log" file on your system to verify update checks are happening every 5 minutes
			# 
			# echo "Removing duplicate entries, may have small error message that follows:"
			# crontab -u $USERNAME -l | grep -v '#Drawpile Hostname' | crontab -u $USERNAME -

			(sudo crontab -l -u root 2>>/dev/null; echo "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin #Drawpile Hostname
$freeDNS_input #Drawpile Hostname") | sudo crontab -u root -
			# (sudo crontab -l -u root 2>>/dev/null; echo "PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin #Drawpile Hostname
# $freeDNS_input #Drawpile Hostname") | sudo crontab -u root -
			sudo sed -i '\!^freeDNS_input =!{h;s!=.*!= '"$freeDNS_input"'!};${x;\!^$!{s!!freeDNS_input = '"$freeDNS_input"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!freeDNS = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
		else
			echo "This message should not be visible."
		fi
	elif [ "$dns_choice" == "2" ]; then
		echo
		echo "${bold}${cyan}***** Installing No-IP Service . . . *****${normal}"
		echo 
		cd "$dp_install_loc/Programs" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo mkdir -p -v noip
		cd "$dp_install_loc/Programs/noip" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo wget -q --show-progress https://www.noip.com/client/linux/noip-duc-linux.tar.gz
		sudo tar vzxf noip-duc-linux.tar.gz
		cd noip-2.1.9-1
		cd "$dp_install_loc/Programs/noip/noip-2.1.9-1" || { echo "Failure to change directory, exiting script in 30 seconds."; sleep 30; exit 1; }
		sudo make
		sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^NoIP =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!NoIP = '"yes"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Setting up NoIP account for auto update of IP . . . *****${normal}"
		echo
		echo "${bold}${cyan}Website:${normal} https://www.noip.com/"
		echo
		echo "${bold}${cyan}Requirements:${normal} Once logged in, you should be looking at the dashboard. You will "
		echo 'know if the hyperlink at the top is https://my.noip.com/#!/. Just type'
		echo 'your desired hostname and choose a domain drop down that you like. from the '
		echo 'Free Domains options. Click the button Add Hostname. You will just need your '
		echo 'username and password to set this up.'
		echo
		echo 'If using the classic site, click Add Host on the left. Type in your Hostname,'
		echo 'and choose a domain on the right from the list of No-IP Free Domains. Make '
		echo 'sure the host type is set to DNS Host (A). For IP Address, open a new tab'
		echo 'and go to www.whatismyip.com to get your IP and put it in this field. Leave '
		echo 'other options at default values and click Add Host.'
		echo
		echo 'You will be prompted to login with your No-IP account username and password.' 
		echo 'After logging into the DUC program, answer the questions to proceed. When asked' 
		echo 'how often you want the update to happen you must choose 5 or more. The interval'
		echo 'is listed in minutes, if you choose 5 the update interval will be 5 minutes.'
		echo 'If you choose 30 the interval will be 30 minutes.'
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		sudo make install
		# sudo $location_created_noip2_executable/noip2
		# echo 'Confirming service is working properly...'
		# sudo noip2 -S
		# Read install process here --> http://www.noip.com/support/knowledgebase/install-ip-duc-onto-raspberry-pi/
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}If you made a typo when putting in your password for no IP, simply${normal}"
		echo "${bold}${yellow}type the following:${normal}"
		echo
		echo 'noip2 -C -c /usr/local/etc/no-ip2.conf'
		echo
		sleep 5
	elif [ "$dns_choice" == "3" ]; then
		variable_to_read_1="DuckDNS_input"
		variable_to_read_2=""
		variable_to_read_3=""
		
		value_description_1=""
		value_description_2=""
		value_description_3=""
		value_description_4=""
		value_description_5=""

		read_stored_config_value_query_function
		if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
			echo "Storing value in script memory and moving on."
			DuckDNS_input=$read_stored_config_value_query_1
		elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
			# Assuming value is being set for first time, this should be no. If changed to yes, SSL certs and SSL script should probably also be updated.
			crontab_change=1
			if sudo crontab -u root -l | grep '#Drawpile Hostname' > /dev/null 2>&1; then
				echo
				echo "${bold}${yellow}Crontab set up for DuckDNS.${normal}"
				echo "${bold}${yellow}Removing old info before adding new content.${normal}"
				crontab_change=yes
				sudo crontab -u root -l | grep -v '#Drawpile Hostname' | sudo crontab -u root -
				echo
			else
				:
				# echo No crontab, sadge. Adding in crontab jerb.
			fi
			echo "${bold}${cyan}*****Setting up DuckDNS.org cronjob for auto update of IP . . . *****${normal}"
			echo 
			echo 'Requirements: Sign in using an existing account (Persona, Twitter, Github,'
			echo 'or Google).'
			echo
			echo 'Pick a name that you wish to use and click "add domain". Go to Google and '
			echo 'search "what is my IP", if you get an IPv6 address, update it on DuckDNS. '
			echo 'Your hostname will be something like: hostname-example.duckdns.org'
			echo 'That full address will need to be provided after this step is complete.'
			echo
			echo 'Click "install" (or use right click, open in new tab). At the bottom where '
			echo 'it says "first step - choose a domain.", click on the down box and select '
			echo 'your domain name. Back at the top under "Operating Systems", select the'
			echo 'option called "linux cron".'
			echo
			echo 'Scroll down to the fourth code box with the following text just above it:'
			echo '     hit ESC then use use arrow keys to move the cursor x deletes, i puts'
			echo '     you back into insert mode'
			echo
			echo 'Select the first part leading up to, but not including, the pipe symbol. '
			echo 'The pipe symbol is a vertical line --> |'
			echo
			echo 'The information copied should look something like this:'
			echo '     echo url="https://www.duckdns.org/update?domains=exampledomain&token=a7c4d0ad-114e-40ef-ba1d-d217904a50f2&ip="'
			# echo "     'echo url=\"https://www.duckdns.org/update?domains=' + name + '&token=' + random numbers + '&ip=\"'"
			echo
			echo 'Copy that and paste it into the script below.'
			echo
			regexp="echo[[:space:]]url=\"https://www.duckdns.org/update\?domains=.*\&token=.*\&ip=\""
			while :; do
				echo "${bold}${cyan}Enter the requested information now${normal}:"
				read DuckDNS_input
				if [[ "$DuckDNS_input" =~ $regexp ]] && [[ "$DuckDNS_input" != *" |"* ]]; then
					break
				else
					echo
					echo ----------------------------------------------------------------------------------
					echo
					echo "${bold}${red}Invalid information entered, try again. Was expecting the following:${normal}"
					echo "     'echo url=\"https://www.duckdns.org/update?domains=' + name + '&token=' + random numbers + '&ip=\"'"
					echo
					echo 'Copy only the part mentioned above.'
					echo
				fi
			done
			sudo mkdir -p -v "/home/drawpileuser/duckdns"
			cat <<EOF | sudo tee /home/drawpileuser/duckdns/duck.sh >/dev/null
$DuckDNS_input | curl -k -o /home/drawpileuser/duckdns/duck.log -K -
EOF
			sudo chmod 700 /home/drawpileuser/duckdns/duck.sh
			(sudo crontab -l -u root 2>>/dev/null; echo "*/5 * * * * /home/drawpileuser/duckdns/duck.sh >/dev/null 2>&1 #Drawpile Hostname") | sudo crontab -u root -
			sudo sed -i '\!^DuckDNS_input =!{h;s!=.*!= '"$DuckDNS_input"'!};${x;\!^$!{s!!DuckDNS_input = '"$DuckDNS_input"'!;H};x}' $drawpile_configuration_values_file
			sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!DuckDNS = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "This message should not be visible."
		fi
	elif [ "$dns_choice" == "9" ]; then
		echo 'No IP update service to be set up!'
		sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
	else
		echo "${bold}${red}Invalid option selected. No DNS IP update service${normal}"
		echo "${bold}${red}to be set up!${normal}"
		echo
		echo "Moving on . . ."
		dns_choice=9
		sudo sed -i '\!^freeDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!freeDNS = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^NoIP =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!NoIP = '"no"'!;H};x}' $app_installation_status_file
		sudo sed -i '\!^DuckDNS =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!DuckDNS = '"no"'!;H};x}' $app_installation_status_file
	fi
	sudo sed -i '\!^dns_choice =!{h;s!=.*!= '"$dns_choice"'!};${x;\!^$!{s!!dns_choice = '"$dns_choice"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi

if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] && [[ "$dns_choice" == "1" || "$dns_choice" == "3" ]]; then
	sudo systemctl enable crond.service
	sudo systemctl start --now crond.service
	sudo systemctl status crond.service --no-pager
fi

<<comment_EOF
		if [[ -e  "/usr/local/bin/noip2" ]]; then
			location_created_noip2_executable=/usr/local/bin
		elif [[ -e  "/usr/bin/noip2" ]]; then
			location_created_noip2_executable=/usr/bin
		else
			echo Was unable to determine location of noip2 executable.
			echo This will cause issues with the script.
			echo
			sleep 30
			exit
		fi
comment_EOF
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Configure Hostname for Server . . .*****${normal}"

#---------------------------------------------------------------------------------------------------------------------------------
external_ip_4=$(curl -s ipv4.icanhazip.com)
external_ip_6=$(curl -s ipv6.icanhazip.com)
hostname_attempt=1
hostname_same_attempt=1

function dns_ip_check () {
	if [[ $hostname_1 = $hostname_2 ]] && [[ "$hostname_1" = "" ]] && [[ "$hostname_2" = "" ]]; then
		:
		# Do nothing as no error was detected, hostname was left blank.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	elif [[ $hostname_1 = $hostname_2 ]]; then
		dns_verification_4=$(host -4 $hostname_1)
		# dns_verification_6=$(host -6 $hostname_1)

		dns_verification_4_stripped=$(echo $dns_verification_4 | awk '{ print $4 }' )
		# dns_verification_6_stripped=$(echo $dns_choice_verification_6 | awk '{ print $4 }' )
	elif [[ $hostname_1 != $hostname_2 ]]; then
		# This is not a real address on purpose to speed up checking
		dns_verification_4=256.256.256.256
		# dns_verification_6=256.256.256.256
	else
		echo this message should not be visible for IP verification.
	fi
}

# Examples
# Valid output with -4
# example.beerprojects.com has address 12.34.56.78
#
# Output when the server/router doesn't appear to support IPv6.
# ;; connection timed out; no servers could be reached
#---------------------------------------------------------------------------------------------------------------------------------

variable_to_read_1="hostname"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="This is the user friendly address used to connect."
value_description_2="When the value is 'no_value_selected', then no hostname"
value_description_3="is in use for this server. This is NOT RECOMMENDED."
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	hostname=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo 'This script assumes you have a hostname, and it is required for'
	echo 'encrypted server connections to protect private conversations'
	echo 'and also to mask your Public IP address when connecting to the'
	echo 'server.'
	echo
	echo 'Make sure this is correctly typed both times before proceeding'
	echo 'with the script. If you do not enter it correctly, users will'
	echo 'not be able to connect to hosted sessions with the server using'
	echo 'encryption by SSL.'
	echo
	echo "${bold}Examples below:${normal}"
	echo "${underline}example.hostwebsite.com ${normal}"
	if [ "$dns_choice" == "2" ]; then
		echo "${underline}example.ddns.net ${normal}"
	elif [ "$dns_choice" == "3" ]; then
		echo "${underline}example.duckdns.org ${normal}"
	else
		echo "${underline}example.chickenkiller.com ${normal}"
	fi
	echo
	echo 'If you do not have one, simply leave it blank and hit enter'
	echo 'twice. However, it is highly recommended to have one, they'
	echo 'are free after all!'
	echo
	echo "${bold}Note:${normal} If you do make a mistake, you can always run"
	echo "Option ${underline}6 - Change all startup options.${normal} via the script"
	echo 'drawpile-server.sh later on.'
	echo
	read -r -p "${bold}${cyan}Please enter your hostname now:${normal} " hostname_1
	read -r -p "${bold}${cyan}Please enter your hostname again:${normal} " hostname_2
	echo
	dns_ip_check

	while [[ $hostname_1 != $hostname_2 ]] || [[ $external_ip_4 != $dns_verification_4_stripped ]]
	do
		if [[ $hostname_1 = $hostname_2 ]] && [[ "$hostname_1" = "" ]] && [[ "$hostname_2" = "" ]]; then
			hostname_attempt=$((hostname_attempt+1))
			hostname_same_attempt=$((hostname_same_attempt+1))
			break
		else
			if [[ $hostname_1 != $hostname_2 ]]; then
				hostname_attempt=$((hostname_attempt+1))
				hostname_same_attempt=1
				echo
				echo "${bold}${red}Hostnames entered do not match!${normal}"
				echo
				read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
				read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2
			elif [[ $hostname_1 = $hostname_2 ]] && (( $hostname_same_attempt >= 2 )); then
				echo
				echo "${bold}${yellow}Hostnames entered match but not appear to point to this server's IPv4 address!${normal}"
				echo "${bold}${yellow}Please be sure that you have not entered any typos.${normal}"
				echo
				echo "${bold}${red}You have the option to skip the DNS check, however, if the hostname is incorrect,${normal}"
				echo "${bold}${red}the script will need to be re-ran fresh, things will not work properly!${normal}"
				echo
				while :; do
					read -r -p "Would you like to skip DNS verification? (Y)es or (n)o? : " hostname_dns_verification_skip
					echo
					if [ "$hostname_dns_verification_skip" == "y" ] || [ "$hostname_dns_verification_skip" == "Y" ] || [ "$hostname_dns_verification_skip" == "yes" ] || [ "$hostname_dns_verification_skip" == "YES" ] || [ "$hostname_dns_verification_skip" == "Yes" ] || [ "$hostname_dns_verification_skip" == "n" ] || [ "$hostname_dns_verification_skip" == "N" ] || [ "$hostname_dns_verification_skip" == "no" ] || [ "$hostname_dns_verification_skip" == "NO" ] || [ "$hostname_dns_verification_skip" == "No" ]; then
						break
					else
						echo
						echo "${bold}${red}Invalid input selection, try again.${normal}"
						echo
						echo ----------------------------------------------------------------------------------
						echo
					fi
				done
				if [ "$hostname_dns_verification_skip" == "y" ] || [ "$hostname_dns_verification_skip" == "Y" ] || [ "$hostname_dns_verification_skip" == "yes" ] || [ "$hostname_dns_verification_skip" == "YES" ] || [ "$hostname_dns_verification_skip" == "Yes" ]; then
					echo "Skipping DNS Verification."
					break
				elif [ "$hostname_dns_verification_skip" == "n" ] || [ "$hostname_dns_verification_skip" == "N" ] || [ "$hostname_dns_verification_skip" == "no" ] || [ "$hostname_dns_verification_skip" == "NO" ] || [ "$hostname_dns_verification_skip" == "No" ]; then
					if [[ $hostname_1 = $hostname_2 ]] || [[ $external_ip_4 != $dns_verification_4_stripped ]]; then
						# hostname_same_attempt=$((hostname_same_attempt-1))
						echo
						echo "${bold}${red}Hostnames entered match but not appear to point to this server's IPv4 address!${normal}"
						echo "${bold}${red}Please check for typos and try again.${normal}"
						echo
						read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
						read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2	
					else
						echo "${bold}${red}This message should not be visible for Hostname IP verification.${normal}"
					fi
					dns_ip_check	
				else
					echo "This message should not be visible for DNS Hostname verification."
				fi
			elif [[ $hostname_1 = $hostname_2 ]] || [[ $external_ip_4 != $dns_verification_4_stripped ]]; then
				hostname_same_attempt=$((hostname_same_attempt+1))
				echo
				echo "${bold}${red}Hostnames entered match but not appear to point to this server's IPv4 address!${normal}"
				echo "${bold}${red}Please check for typos and try again.${normal}"
				echo
				read -r -p "${bold}${cyan}Enter hostname:${normal} " hostname_1
				read -r -p "${bold}${cyan}Enter hostname again:${normal} " hostname_2	
			else
				echo "${bold}${red}This message should not be visible for Hostname IP verification.${normal}"
			fi
			dns_ip_check
		fi	
	done
	#

	if [[ $hostname_1 = $hostname_2 ]] && [[ "$hostname_1" = "" ]] && [[ "$hostname_2" = "" ]]; then
		hostname=no_value_selected
		echo
		echo "${bold}${red}Your hostname is was left blank.${normal}"
		echo
		echo "${bold}${red}No hostname will be used.${normal}"
		sudo sed -i '\!^hostname =!{h;s!=.*!= '"blank"'!};${x;\!^$!{s!!hostname = '"blank"'!;H};x}' $drawpile_configuration_values_file
	else
		hostname=$hostname_1
		echo
		echo "${bold}${green}Your hostname is: $hostname ${normal}"
		echo
		echo 'This will be used to display in the session listing instead of your'
		echo 'public IP address.'
		sudo sed -i '\!^hostname =!{h;s!=.*!= '"$hostname"'!};${x;\!^$!{s!!hostname = '"$hostname"'!;H};x}' $drawpile_configuration_values_file
	fi
else
	echo "This message should not be visible."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'

# echo "${bold}${cyan}***** Setting up SSL Certificate Creation . . . *****${normal}"

function generate_self_signed_ssl () {
	echo "${bold}${cyan}***** Self Signed Certs . . .*****${normal}"
	echo
	echo 'This section is for encrypting server connections to keep them more private.'
	echo
	echo 'Please note in the following sections that the parts contained within'
	echo 'the brackets are the default option if no information is entered.'
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_country"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing ssl_country value and moving on."
		ssl_country=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		read -r -p 'Country Name (2 letter code) [AU]: ' ssl_country
		if [ "$ssl_country" != "" ]; then
			echo
			echo "Selected: $ssl_country"
		else
			ssl_country="AU"
		fi
		sudo sed -i '\!^ssl_country =!{h;s!=.*!= '"$ssl_country"'!};${x;\!^$!{s!!ssl_country = '"$ssl_country"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_state"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing ssl_state value and moving on."
		ssl_state=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		read -r -p 'State or Province Name (full name) [Some-State]: ' ssl_state
		if [ "$ssl_state" != "" ]; then
			echo
			echo "Selected: $ssl_state"
		else
			ssl_state="Some-State"
		fi
		sudo sed -i '\!^ssl_state =!{h;s!=.*!= '"$ssl_state"'!};${x;\!^$!{s!!ssl_state = '"$ssl_state"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_locality"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing ssl_locality value and moving on."
		ssl_locality=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		read -r -p 'Locality name (e.g., city) [Some-City]: ' ssl_locality
		if [ "$ssl_locality" != "" ]; then
			echo
			echo "Selected: $ssl_locality"
		else
			ssl_locality="Some-City"
		fi
		sudo sed -i '\!^ssl_locality =!{h;s!=.*!= '"$ssl_locality"'!};${x;\!^$!{s!!ssl_locality = '"$ssl_locality"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_organization"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		ssl_organization=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		read -r -p 'Organization Name (eg, company) [Internet Widgits Pty Ltd]: ' ssl_organization
		if [ "$ssl_organization" != "" ]; then
			echo
			echo "Selected: $ssl_organization"
		else
			ssl_organization="Internet Widgits Pty Ltd"
		fi
		sudo sed -i '\!^ssl_organization =!{h;s!=.*!= '"$ssl_organization"'!};${x;\!^$!{s!!ssl_organization = '"$ssl_organization"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_unitname"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		ssl_unitname=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		read -r -p 'Organizational Unit Name (e.g., section) [Collaborating Artists]: ' ssl_unitname
		if [ "$ssl_unitname" != "" ]; then
			echo
			echo "Selected: $ssl_unitname"
		else
			ssl_unitname="Collaborating Artists"
		fi
		sudo sed -i '\!^ssl_unitname =!{h;s!=.*!= '"$ssl_unitname"'!};${x;\!^$!{s!!ssl_unitname = '"$ssl_unitname"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	variable_to_read_1="ssl_email"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		ssl_email=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		read -r -p 'Email Address [noemail@noemail.com]: ' ssl_email
		if [ "$ssl_email" != "" ]; then
			echo
			echo "Selected: $ssl_email"
		else
			ssl_email="noemail@noemail.com"
		fi
		sudo sed -i '\!^ssl_email =!{h;s!=.*!= '"$ssl_email"'!};${x;\!^$!{s!!ssl_email = '"$ssl_email"'!;H};x}' $drawpile_configuration_values_file
	else
		echo "This message should not be visible."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	sudo mkdir -p -v "/etc/nginx/ssl/drawpile"
	ssl_certificate=/etc/nginx/ssl/drawpile/cert.pem
	ssl_private_cert_key=/etc/nginx/ssl/drawpile/key.pem
	
	sudo sed -i '\!^ssl_certificate =!{h;s!=.*!= '"$ssl_certificate"'!};${x;\!^$!{s!!ssl_certificate = '"$ssl_certificate"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_private_cert_key =!{h;s!=.*!= '"$ssl_private_cert_key"'!};${x;\!^$!{s!!ssl_private_cert_key = '"$ssl_private_cert_key"'!;H};x}' $drawpile_configuration_values_file
	
	# Original Command
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout $ssl_private_cert_key -out $ssl_certificate -days 365 -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email"
	
	# Updated for 2023 and hopefully works better
	sudo openssl req -x509 -newkey rsa:2048 -nodes -sha256 -days 365 -keyout $ssl_private_cert_key -out $ssl_certificate -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -addext "subjectAltName=DNS:$hostname"
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -sha256 -days 365 -keyout $ssl_private_cert_key -out $ssl_certificate -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -addext "subjectAltName=DNS:$hostname,DNS:*.example.com,IP:10.0.0.1"
	
	# echo '--------------------------------------------------------------------------------'
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout $ssl_private_cert_key -out $ssl_certificate -days 365 -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email"
	# openssl req -new -sha256 -key domain.key -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:$hostname")) -out domain.csr
	# openssl req -new -sha256 -key domain.key -subj "/C=US/ST=CA/O=Acme, Inc./CN=example.com" -reqexts SAN -config <(cat /etc/ssl/openssl.cnf <(printf "[SAN]\nsubjectAltName=DNS:example.com,DNS:www.example.com")) -out domain.csr
	# echo '--------------------------------------------------------------------------------'
	# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout /home/drawpileuser/key.pem -out /home/drawpileuser/cert.pem -days 365 -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email"
	sudo chmod 777 /home/drawpileuser/ -R
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		sudo $user_add_program www-data drawpileread
	fi
	sudo chown drawpileuser:drawpileread $ssl_certificate
	sudo chown drawpileuser:drawpileread $ssl_private_cert_key
	sudo chmod 750 $ssl_certificate
	sudo chmod 750 $ssl_private_cert_key
	cat <<EOF | sudo tee /home/drawpileuser/ssl.sh >/dev/null
#!/bin/bash
app_installation_status_file=/home/drawpileuser/App-Installation-Status.txt
drawpile_configuration_values_file=/home/drawpileuser/Drawpile_Configuration_Values.txt

sudo chmod 770 /home/drawpileuser/ -R

ssl_country=\$( grep -m 1 "ssl_country = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_state=\$( grep -m 1 "ssl_state = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_locality=\$( grep -m 1 "ssl_locality = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_organization=\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_unitname=\$( grep -m 1 "ssl_unitname = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
hostname=\$( grep -m 1 "hostname = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_email=\$( grep -m 1 "ssl_email = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )

<<comment_EOF
ssl_organization=	\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
ssl_unitname=		\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
hostname=			\$( grep -m 1 "ssl_organization = " "$drawpile_configuration_values_file" | awk '{for (i=3; i<NF; i++) printf \$i " "; print \$NF}' )
comment_EOF

sudo openssl req -x509 -newkey rsa:2048 -nodes -sha256 -days 365 -keyout $ssl_private_cert_key -out $ssl_certificate -subj "/C=$ssl_country/ST=$ssl_state/L=$ssl_locality/O=$ssl_organization/OU=$ssl_unitname/CN=$hostname/emailAddress=$ssl_email" -addext "subjectAltName=DNS:$hostname"
# sudo openssl req -x509 -newkey rsa:2048 -nodes -keyout $ssl_private_cert_key -out $ssl_certificate -days 365 -subj "/C=\$ssl_country/ST=\$ssl_state/L=\$ssl_locality/O=\$ssl_organization/OU=\$ssl_unitname/CN=\$hostname/emailAddress=\$ssl_email"
sudo chown drawpileuser $ssl_certificate
sudo chown drawpileuser $ssl_private_cert_key
sudo nginx -s reload
echo
sudo chmod 770 /home/drawpileuser/ -R
sudo chmod 777 /home/drawpileuser/ssl.sh
if [[ -e "/home/drawpileuser/cert.pem" ]]; then sudo chmod 700 /home/drawpileuser/cert.pem; fi
if [[ -e "/home/drawpileuser/key.pem" ]]; then sudo chmod 700 /home/drawpileuser/key.pem; fi
sudo chown drawpileuser:drawpileread /home/drawpileuser/ -R
echo
# if [ "\`systemctl is-enabled drawpile-srv.socket\`" = "enabled" ]; then
# 	echo "drawpile-srv.socket previously enabled, restarting server."
# 	sudo systemctl stop --now drawpile-srv.service
# 	sudo systemctl restart drawpile-srv.socket
# elif [ "\`systemctl is-enabled drawpile-srv.service\`" = "enabled" ]; then
# 	echo "drawpile-srv.service previously enabled, restarting server."
# 	sudo systemctl restart drawpile-srv.service
# else
# 	echo This message should not be visible.
# fi
EOF
	sudo chmod 777 /home/drawpileuser/ssl.sh
	
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Default info in crontab, use command "crontab -e" to open for manual editing.
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Edit this file to introduce tasks to be run by cron.
	# 
	# Each task to run has to be defined through a single line
	# indicating with different fields when the task will be run
	# and what command to run for the task
	# 
	# To define the time you can provide concrete values for
	# minute (m), hour (h), day of month (dom), month (mon),
	# and day of week (dow) or use '*' in these fields (for 'any').# 
	# Notice that tasks will be started based on the cron's system
	# daemon's notion of time and timezones.
	# 
	# Output of the crontab jobs (including errors) is sent through
	# email to the user the crontab file belongs to (unless redirected).
	# 
	# For example, you can run a backup of all your user accounts
	# at 5 a.m every week with:
	# 0 5 * * 1 tar -zcf /var/backups/home.tgz /home/
	# 
	# For more information see the manual pages of crontab(5) and cron(8)
	# 
	# m h  dom mon dow   command
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# Read more on Crontab below
	#	https://www.raspberrypi.org/documentation/linux/usage/cron.md
	#	https://askubuntu.com/questions/408611/how-to-remove-or-delete-single-cron-job-using-linux-command
	# The line below adds a job to crontab. Read more here --> https://stackoverflow.com/questions/8579330/appending-to-crontab-with-a-shell-script-on-ubuntu
	# Use "crontab -r" to reset crontab's configuration. Manual editing "crontab -e" --> https://askubuntu.com/questions/793578/resetting-crontab-file-to-default
	if sudo crontab -u root -l | grep '#Drawpile ssl.sh' > /dev/null; then
		echo
		echo Crontab set up for drawpile ssl self signed certificates. Removing old info before adding new content.
		sudo crontab -u root -l | grep -v '#Drawpile ssl.sh' | sudo crontab -u root -
		echo
	else
		:
		# echo No crontab, sadge. Adding in crontab jerb.
	fi
	current_minute=$( date +%-M )
	current_hour=$( date +%-H )
	current_day=$( date +%-d )
	current_month=$( date +%-m )
	if [[ "$current_month" == "2" && "$current_day" == "29" ]]; then
		current_day=28
		echo
		echo "Doing this on leap year day, huh? Well, to make sure this works,"
		echo "setting the day back 1 day to make sure the SSL cert updates"
		echo "next year via crontab!"
		echo
	fi
	# Need root for le crontab, this installed into current user. 
	# (crontab -l 2>>/dev/null; echo "$current_minute $current_hour $current_day $current_month * /home/drawpileuser/ssl.sh #Drawpile ssl.sh") | crontab 
	(sudo crontab -l -u root 2>>/dev/null; echo "$current_minute $current_hour $current_day $current_month * /home/drawpileuser/ssl.sh #Drawpile ssl.sh") | sudo crontab -u root -
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		sudo systemctl enable crond.service
		sudo systemctl start --now crond.service
		sudo systemctl status crond.service --no-pager
	fi
	sudo sed -i '\!^ssl_current_minute =!{h;s!=.*!= '"$current_minute"'!};${x;\!^$!{s!!ssl_current_minute = '"$current_minute"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_current_hour =!{h;s!=.*!= '"$current_hour"'!};${x;\!^$!{s!!ssl_current_hour = '"$current_hour"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_current_day =!{h;s!=.*!= '"$current_day"'!};${x;\!^$!{s!!ssl_current_day = '"$current_day"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^ssl_current_month =!{h;s!=.*!= '"$current_month"'!};${x;\!^$!{s!!ssl_current_month = '"$current_month"'!;H};x}' $drawpile_configuration_values_file
}

function permissions_lets_encrypt_ssl () {
	# echo
	# echo "${bold}Warning.${normal} In order for drawpile-srv to use the SSL files generated"
	# echo "by Let's encrypt, drawpileuser must be granted ownership of the"
	# echo "directories leading up to the following:"
	# # echo      /etc/letsencrypt/archive/$hostname
	# echo      /etc/letsencrypt/live/$hostname
	# echo
	# echo "The root account will still be listed for the files contained within"
	# echo "once you press any key to continue with the script. This message"
	# echo "is for your information to make you aware of the change."
	# echo
	# pause
	# echo
	# sudo chown drawpileuser "/etc/letsencrypt/"
	# # sudo chown drawpileuser "/etc/letsencrypt/archive"
	# # sudo chown drawpileuser "/etc/letsencrypt/archive/$hostname" -R
	# sudo chown drawpileuser "/etc/letsencrypt/live"
	# sudo chown drawpileuser "/etc/letsencrypt/live/$hostname" -R
	
	echo
	echo "${bold}Warning.${normal} In order for drawpile-srv to use the SSL files generated"
	echo "by Let's encrypt, drawpileuser must be granted the ability to"
	echo "read directories leading up to the following:"
	# echo      /etc/letsencrypt/archive/$hostname
	echo      /etc/letsencrypt/live/$hostname
	echo
	echo "The root group will still be listed for the files contained within"
	echo "once you press any key to continue with the script. This message"
	echo "is for your information to make you aware of the change."
	echo
	pause
	
	# sudo addgroup drawpileread
	# sudo adduser drawpileuser drawpileread
	
	# sudo chown :drawpileread "/etc/letsencrypt/"
	
	sudo chown :drawpileread "/etc/letsencrypt/archive"
	sudo chown :drawpileread "/etc/letsencrypt/archive/$hostname" -R
	sudo chmod 770 "/etc/letsencrypt/archive"
	sudo chmod 770 "/etc/letsencrypt/archive/$hostname" -R
	sudo chown :drawpileread "/etc/letsencrypt/live"
	sudo chown :drawpileread "/etc/letsencrypt/live/$hostname" -R
	sudo chmod 770 "/etc/letsencrypt/live"
	
	# sudo chmod 770 "/etc/letsencrypt/live/$hostname" -R
		
	# if sudo test -e  "/etc/letsencrypt/archive/$hostname/privkey.pem"; then
	# 	sudo chmod 650 "/etc/letsencrypt/archive/$hostname/privkey.pem"
	# elif sudo test -e "/etc/letsencrypt/archive/$hostname/privkey1.pem"; then
	# 	sudo chmod 650 "/etc/letsencrypt/archive/$hostname/privkey1.pem"
	# else
	# 	echo Chmod for archive folder in Lets Encrypt message
	# 	echo that should not be visible to the user.
	# 	pause
	# fi
	
	# if sudo test -e  "/etc/letsencrypt/live/$hostname/privkey.pem"; then
	# 	echo "Setting variable for SSL Certificate Private key location."
	# 	ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
	# else
	# 	echo Could not find private certificate key. Was there an error?
	# 	echo
	# 	sleep 30
	# 	exit
	# fi
}

function generate_lets_encrypt_ssl () {
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}***** Lets Encrypt Signed Certs . . .*****${normal}"
	echo
	echo You will have to enter a valid email address for urgent renewal and security notices.
	echo You may also need this in the event you need to revoke the SSL certificate to create
	echo another. You should also read the terms of Service for Lets Encrypt, which can be
	echo found here:
	echo     https://letsencrypt.org/documents/LE-SA-v1.3-September-21-2022.pdf
	echo
	echo
	pause
	echo 
	sudo certbot certonly --nginx -d $hostname
	# sudo certbot certonly --nginx -d example.hostwebsite.com

	if sudo test -e  "/etc/letsencrypt/live/$hostname/fullchain.pem"; then
		echo "Setting variable for SSL Certificate location."
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
	else
		echo Could not find certificate. Was there an error?
		echo
		sleep 30
		exit
	fi
	echo
	
	permissions_lets_encrypt_ssl
}

function revoke_lets_encrypt_ssl () {
	echo
	echo Read more on Lets Encrypt Revocation process here:
	echo      https://letsencrypt.org/docs/revoking/
	echo
	echo "${bold}${cyan}Specify reason code for certificate revocation${normal}"
	echo
	echo "  ${bold}${cyan}"'1  - keyCompromise (RFC 5280 CRLReason #1)'"${normal}"
	echo '         Removing key because you have reason to'
	echo '         believe the private key has been compromised.'
	echo '         Such as unauthorized person had access to'
	echo '         private key of your certificate'
	echo "  ${bold}${cyan}"'2  - superseded (RFC 5280 CRLReason #4)'"${normal}"
	echo '         When requesting new certificate to replace'
	echo '         the existing certificate.'
	echo "  ${bold}${cyan}"'3  - cessationofOperation (RFC 5280 CRLReason #5)'"${normal}"
	echo '         No longer own all of the domain names in the'
	echo '         certificate or no longer will be using the'
	echo "         certificate because the $hostname"
	echo '         will no longer be used.'
	echo "  ${bold}${cyan}"'4  - unspecified (RFC 5280 CRLReason #0)'"${normal}"
	echo '         When the reason codes above to not apply to'
	echo '         the revocation request, you must not provide'
	echo '         a reason code other than unspecified.'
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " cert_revocation_reason_entry
		[[ $cert_revocation_reason_entry =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $cert_revocation_reason_entry >= 1 && $cert_revocation_reason_entry <= 4)); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	
	if [ "$cert_revocation_reason_entry" == "1" ]; then
		cert_revocation_reason=keyCompromise
	elif [ "$cert_revocation_reason_entry" == "2" ]; then
		cert_revocation_reason=superseded
	elif [ "$cert_revocation_reason_entry" == "3" ]; then
		cert_revocation_reason=cessationofOperation
	elif [ "$cert_revocation_reason_entry" == "4" ]; then
		cert_revocation_reason=unspecified
	else
		echo Invalid option selected. Assuming cert is being replaced.
		echo 'Will use option 2 - superseded (RFC 5280 CRLReason #4)'
		cert_revocation_reason=superseded
	fi
	
	sudo certbot revoke --cert-path $ssl_cert_pem --reason $cert_revocation_reason
}

variable_to_read_1="ssl_encryption_config"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="This is for the encryption method."
value_description_2="1 - Self Signed Certificates"
value_description_3="2 - Let's Encrypt Certificates"
value_description_4="3 - No SSL Security"
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo
	echo "Storing value and moving on."
	ssl_encryption_config=$read_stored_config_value_query_1
	if [ "$ssl_encryption_config" == "1" ]; then
		ssl_certificate=/etc/nginx/ssl/drawpile/cert.pem
		ssl_private_cert_key=/etc/nginx/ssl/drawpile/key.pem
	elif [ "$ssl_encryption_config" == "2" ]; then
		ssl_cert_pem=/etc/letsencrypt/live/$hostname/cert.pem
		ssl_chain_pem=/etc/letsencrypt/live/$hostname/chain.pem
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
		ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
		ssl_certificate=$ssl_cert_pem	
	else
		echo "${invis}No SSL being used.${normal}"
	fi
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "${bold}${cyan}***** Setting up SSL Certificate Creation . . . *****${normal}"
	echo
	echo "${underline}Self Signed Certificate${normal}"
	echo "${bold}Pros:${normal} No registration, renew cert via script every year."
	echo "${bold}Cons:${normal} If script does not update SSL cert, users cannot connect."
	echo '      Requires users to replace cert or cannot connect.'
	echo '      Also less trusted on web browsers due to it being self signed.'
	echo 
	echo "${underline}Let's Encrypt ${normal}"
	echo "${bold}Pros:${normal} Free, simple setup, only slightly more complex."
	echo '      Creates 3rd party signed certificate.'
	echo "${bold}Cons:${normal} 'Should' be automated with certbot."
	echo '      May not be available when using free hostnames as there'
	echo '      are too many hostnames using it for SSL encryption.'
	echo
	echo "${bold}${red}IMPORTANT NOTE:${normal} Selecting option 3 will prevent you from using"
	echo "the list server function or web admin function. Selecting this option also changes"
	echo "the options available to systemd configuration setup."
	echo
	echo "Do you want to use self signed certificate or Lets Encrypt? Please note, if you want"
	echo "to switch from Lets Encrypt to self signed certs, choose option 2. Invalid option"
	echo "will default to option 2."
	echo
	echo 'Enter a number and hit enter to continue.'
	echo
	echo 'Press 1 for Self Signed Certificates'
	echo "Press 2 for Lets Encrypt ${bold}(Default)${normal}"
	echo 'Press 3 for no SSL security.'
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " ssl_encryption_config
		[[ $ssl_encryption_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $ssl_encryption_config >= 1 && $ssl_encryption_config <= 3)); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	if [ "$ssl_encryption_config" == "1" ]; then
		generate_self_signed_ssl
	elif [ "$ssl_encryption_config" == "2" ]; then
		version_certbot=$( apt-cache policy certbot | grep "Installed:" | cut -c 14-21 )
		minimum_versioncertbot=1.12.0-2
		if [[ "$version_certbot" = "(none)" ]]; then
			echo "${bold}${cyan}***** Installing packages certbot and python3-certbot-nginx. . . *****${normal}"
			# https://phoenixnap.com/kb/letsencrypt-nginx
			# sudo certbot --nginx -d example.com -d www.example.com
			# sudo certbot --nginx --test-cert
			echo
			sudo apt install certbot 
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(certbot python3-certbot-nginx);
			package_install_status_check_function
			sudo $package_install_program certbot python3-certbot-nginx # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 30 && exit
			echo
		else
			echo "${bold}${green}Package certbot already installed.${normal}"
		fi
		ssl_cert_pem=/etc/letsencrypt/live/$hostname/cert.pem
		ssl_chain_pem=/etc/letsencrypt/live/$hostname/chain.pem
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
		ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
		ssl_certificate=$ssl_cert_pem

		sudo sed -i '\!^ssl_cert_pem =!{h;s!=.*!= '"$ssl_cert_pem"'!};${x;\!^$!{s!!ssl_cert_pem = '"$ssl_cert_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_chain_pem =!{h;s!=.*!= '"$ssl_chain_pem"'!};${x;\!^$!{s!!ssl_chain_pem = '"$ssl_chain_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_fullchain_certificate =!{h;s!=.*!= '"$ssl_fullchain_certificate"'!};${x;\!^$!{s!!ssl_fullchain_certificate = '"$ssl_fullchain_certificate"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_private_cert_key =!{h;s!=.*!= '"$ssl_private_cert_key"'!};${x;\!^$!{s!!ssl_private_cert_key = '"$ssl_private_cert_key"'!;H};x}' $drawpile_configuration_values_file
		echo
		# sudo systemctl stop --now nginx.service
		# wait $!
		echo
		# Used sudo on if statement in order to be able to access the directory. Non Root users cannot access this location.
		if sudo test -L "$ssl_fullchain_certificate"; then
			if sudo test -L "$ssl_private_cert_key"; then
				echo "${bold}${cyan}***** Symbolic links to certs already generated for Lets Encrypt. *****${normal}"
				echo
				echo 'Press 1 to use these existing keys'
				echo 'Press 2 to revoke keys and generate new Lets Encrypt certs with certbot'
				echo
				echo 'Press 9 to revoke keys and generate self signed certs'
				echo
				read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " lets_encrypt_config
				echo
				if [ "$lets_encrypt_config" == "1" ]; then
					echo Continuing script . . .
					permissions_lets_encrypt_ssl
				elif [ "$lets_encrypt_config" == "2" ]; then
					# sudo certbot revoke --cert-path $ssl_fullchain_certificate
					revoke_lets_encrypt_ssl
					generate_lets_encrypt_ssl
				elif [ "$lets_encrypt_config" == "9" ]; then
					revoke_lets_encrypt_ssl
					generate_self_signed_ssl
				else
					echo Invalid option selected, will use existing keys. Continuing script . . .
				fi
			else
				echo Only one of two files found? This message should not be visible . . .
			fi
		elif sudo test -e "$ssl_fullchain_certificate"; then
			if sudo test -e "$ssl_private_cert_key"; then
				echo "${bold}${cyan}***** Found certs already generated for Lets Encrypt. *****${normal}"
				echo
				echo 'Press 1 to use these existing keys'
				echo 'Press 2 to revoke keys and generate new Lets Encrypt certs with certbot'
				echo
				echo 'Press 9 to revoke keys and generate self signed certs'
				echo
				read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " lets_encrypt_config

				echo
				if [ "$lets_encrypt_config" == "1" ]; then
					echo Continuing script . . .
					permissions_lets_encrypt_ssl
				elif [ "$lets_encrypt_config" == "2" ]; then
					revoke_lets_encrypt_ssl
					generate_lets_encrypt_ssl 
				elif [ "$lets_encrypt_config" == "9" ]; then 
					revoke_lets_encrypt_ssl
					generate_self_signed_ssl
				else
					echo Invalid option selected, will use existing keys. Continuing script . . .
				fi
			else
				echo Found file $ssl_fullchain_certificate
				echo but did not find $ssl_private_cert_key
				echo
				echo This Lets Encrypt message should not be visible.
				echo
				sleep 30
				exit
			fi
		else
			echo "${bold}${cyan}***** No certs yet generated for Lets Encrypt . . . *****${normal}"
			echo
			echo 'Press 1 to generate Lets Encrypt keys'
			echo 'Press 2 to redownload cert that was not previously revoked, revoke all'
			echo '        certs, and set up new Lets Encrypt Certs with certbot.'
			echo
			read -r -p "${bold}${cyan}Enter a number and hit enter to continue: ${normal}" lets_encrypt_config
			echo
			if [ "$lets_encrypt_config" == "1" ]; then
				generate_lets_encrypt_ssl
			elif [ "$lets_encrypt_config" == "2" ]; then 
				sudo certbot certonly --nginx -d $hostname
				revoke_lets_encrypt_ssl
				generate_lets_encrypt_ssl
			else
				echo Invalid option selected. Assuming option 1 intended.
				echo
				generate_lets_encrypt_ssl
			fi
		fi
		ssl_certificate=$ssl_fullchain_certificate
		# sudo systemctl start --now nginx.service
		# wait $!
	elif [ "$ssl_encryption_config" == "3" ]; then
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	else
		echo Invalid option selected. Assuming option 2 intended.
		ssl_encryption_config=2
		
		ssl_cert_pem=/etc/letsencrypt/live/$hostname/cert.pem
		ssl_chain_pem=/etc/letsencrypt/live/$hostname/chain.pem
		ssl_fullchain_certificate=/etc/letsencrypt/live/$hostname/fullchain.pem
		ssl_private_cert_key=/etc/letsencrypt/live/$hostname/privkey.pem
		ssl_certificate=$ssl_cert_pem

		sudo sed -i '\!^ssl_cert_pem =!{h;s!=.*!= '"$ssl_cert_pem"'!};${x;\!^$!{s!!ssl_cert_pem = '"$ssl_cert_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_chain_pem =!{h;s!=.*!= '"$ssl_chain_pem"'!};${x;\!^$!{s!!ssl_chain_pem = '"$ssl_chain_pem"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_fullchain_certificate =!{h;s!=.*!= '"$ssl_fullchain_certificate"'!};${x;\!^$!{s!!ssl_fullchain_certificate = '"$ssl_fullchain_certificate"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^ssl_private_cert_key =!{h;s!=.*!= '"$ssl_private_cert_key"'!};${x;\!^$!{s!!ssl_private_cert_key = '"$ssl_private_cert_key"'!;H};x}' $drawpile_configuration_values_file
		echo
		# sudo systemctl stop --now nginx.service
		# wait $!
		generate_lets_encrypt_ssl
		# sudo systemctl start --now nginx.service
		# wait $!
	fi
	sudo sed -i '\!^ssl_encryption_config =!{h;s!=.*!= '"$ssl_encryption_config"'!};${x;\!^$!{s!!ssl_encryption_config = '"$ssl_encryption_config"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo

# dp_install_loc=/home/pi/Public
# hostname=drawpile-test.duckdns.org
# sudo systemctl stop --now drawpile_abuse_report.service
# sudo systemctl disable drawpile_abuse_report.service
# discord_webhook_URL=https://discord.com/api/webhooks/1133190759890305145/5gEGFz4teebUjKU965CCUWutCw3l3hAI6D5kz8ejaxYZOpiGIU2bfntiwSZNKRq_6vNe

echo "${bold}${cyan}*****Setting Up Drawpile Abuse Report Tool . . .*****${normal}"
abuse_report_port=8200
# --------------------------------------------------------------------------------
variable_to_read_1="abuse_report_auth_token"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="You should not change this token unless someone else"
value_description_2="managed to get a hold of the auth token."
value_description_3=""
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	abuse_report_auth_token=$read_stored_config_value_query_1
	echo
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	random_string=$(openssl rand -base64 32)
	# echo "lol random $random_string"
	abuse_report_auth_token=$random_string
	sudo sed -i '\!^abuse_report_auth_token =!{h;s!=.*!= '"$abuse_report_auth_token"'!};${x;\!^$!{s!!abuse_report_auth_token = '"$abuse_report_auth_token"'!;H};x}' $drawpile_configuration_values_file
	echo "This is your abuse report auth_token: $abuse_report_auth_token"
	echo
	echo '--------------------------------------------------------------------------------'
else
	echo "This message should not be visible."
fi

variable_to_read_1="discord_webhook_URL"
variable_to_read_2=""
variable_to_read_3=""

value_description_1="You should not change this token unless someone else"
value_description_2="managed to get a hold of the discord webhook URL."
value_description_3=""
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	discord_webhook_URL=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "${bold}${cyan}*****Create Discord Webhook for reports . . .*****${normal}"
	echo
	echo "This is so when a user goes into Drawpile's 'Session' menu,"
	echo "'Moderation', 'Report...', that a message is sent to Discord"
	echo "to notify about rules being broken on the server."
	echo
	echo "Instructions below: "
	echo "Click on your Discord Server, open Server Settings,"
	echo "Integrations, Create Webhooks, Set the name and Channel,"
	echo "and copy webhook URL to paste here."
	echo
	# Regedit Matching in a Bash if Statement - https://linuxhint.com/regex-matching-in-bash-if-statement/
	while :; do
		read -r -p "Enter the Discord webhook URL: " discord_webhook_URL
		echo
		if [[ "$discord_webhook_URL" =~ ^https://discord.com/api/webhooks/.* ]]; then
			break
		else
			echo
			echo "${bold}${red}Invalid webhook input, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	sudo sed -i '\!^discord_webhook_URL =!{h;s!=.*!= '"$discord_webhook_URL"'!};${x;\!^$!{s!!discord_webhook_URL = '"$discord_webhook_URL"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi

cd "/home/drawpileuser"
if [[ -d  "/home/drawpileuser/abusereport" ]]; then
	echo Download detected of abusereport files, removing content before downloading.
	rm -f -R "/home/drawpileuser/abusereport"
else
	echo Did not find abusereport folder, continuing.
fi
echo
echo '--------------------------------------------------------------------------------'
echo
git clone https://github.com/drawpile/abusereport
echo
echo Download done...
cd "/home/drawpileuser/abusereport"
# Doesn't work
# drawpile_abuse_report_version_with_git=$( git describe )
# sudo sed -i '\!^drawpile_abuse_report_version_with_git =!{h;s!=.*!= '"$drawpile_abuse_report_version_with_git"'!};${x;\!^$!{s!!drawpile_abuse_report_version_with_git = '"$drawpile_abuse_report_version_with_git"'!;H};x}' $drawpile_configuration_values_file
# git describe - fatal: No names found, cannot describe anything.
echo
echo '--------------------------------------------------------------------------------'
echo "Running command: python -m venv env"
echo '--------------------------------------------------------------------------------'
python -m venv env
echo
echo '--------------------------------------------------------------------------------'
echo "Running command: . env/bin/activate"
echo '--------------------------------------------------------------------------------'
. env/bin/activate
echo
echo '--------------------------------------------------------------------------------'
echo "Running command: pip install -r requirements.txt"
echo '--------------------------------------------------------------------------------'
pip install -r requirements.txt
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Setting Abuse Report for Automatic Startup *****${normal}"

# Used to exit virtual environment that is started with this command: . env/bin/activate
deactivate

# Not needed, should be copied/left in a directory writeable to the user running it, drawpileuser
# sudo cp -R "$dp_install_loc/Programs/abusereport" "/usr/local/bin/abusereport"

cat <<EOF | sudo tee /usr/local/bin/drawpile_abuse_report >/dev/null
#!/bin/sh
export PORT='$abuse_report_port'
export AUTH_TOKEN='$abuse_report_auth_token'
export SERVER_HOST='$hostname'
export DISCORD_WEBHOOK='$discord_webhook_URL'
cd /home/drawpileuser/abusereport
. env/bin/activate
exec gunicorn report_relay.main:App --bind "localhost:\$PORT" --worker-class aiohttp.GunicornWebWorker
EOF

sudo chown drawpileuser "/usr/local/bin/./drawpile_abuse_report"
sudo chmod 755 "/usr/local/bin/./drawpile_abuse_report"

cat <<EOF | sudo tee /etc/systemd/system/drawpile_abuse_report.service >/dev/null
[Unit]
Description=Drawpile abuse report tool

[Service]
ExecStart=/usr/local/bin/drawpile_abuse_report
User=drawpileuser
# ExecStart=/home/abusereport/start.sh
# Group=abusereport

[Install]
WantedBy=multi-user.target
EOF
echo
echo '--------------------------------------------------------------------------------'
echo
sudo chmod 655 /etc/systemd/system/drawpile_abuse_report.service
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
wait $!
sudo systemctl enable drawpile_abuse_report.service
sudo systemctl start --now drawpile_abuse_report.service
wait $!
sudo systemctl status drawpile_abuse_report.service --no-pager
wait $!

# (Re)start drawpile-srv with --report-url http://localhost:8200/ (or whatever port you used) 
# --report-url http://localhost:$abuse_report_port/
#
# Enable abuse reports in the drawpile-srv web UI and punch in what you wrote for AUTH_TOKEN.
# Enters the AUTH_TOKEN into the Drawpile Database server so the user doesn't have to enter it themselves.
# echo "Inserting value into server database file so report mechanism works."
# echo "insert into settings values ('reporttoken', '$abuse_report_auth_token'), ('abusereport', 'true');" | sudo sqlite3 /home/drawpileuser/server.db
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}${cyan}***** Making backup of drawpile-srv systemd files *****${normal}"
echo "${bold}${cyan}*****            before modification.             *****${normal}"
echo
if [[ ! -e "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service" ]]; then
	echo "Did not find drawpile-srv.service file sample. Downloading and setting up."
	sudo mkdir -p -v "$dp_install_loc/Programs/Drawpile/server"
	sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/drawpile-srv.service" -O "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service"
	echo
fi

if [[ ! -e "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket" ]]; then
	echo "Did not find drawpile-srv.socket file sample. Downloading and setting up."
	sudo mkdir -p -v "$dp_install_loc/Programs/Drawpile/server"
	sudo wget -q --show-progress "https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/scripts-for-other-scripts-only/drawpile-srv.socket" -O "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket"
	echo
fi
sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service" "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service.backup"
echo
echo 'Modifying drawpile-srv.service . . .'
echo
sudo chmod 777 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service"
#
cd "$dp_install_loc"
sudo chmod 777 "$dp_install_loc" -R
cd "$dp_install_loc/Programs"
sudo mkdir -p -v Drawpile-Srv-Files
cd Drawpile-Srv-Files
sudo chmod 777 "$dp_install_loc/Programs/Drawpile-Srv-Files/" -R
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'

# This is for session recordings, however it is not necessary when using file backed sessions. 
# --record "$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec"
#
# Code to place after the database file in order to use httpd to authenticate instead. Username and password is plain text, no hash.
#  --web-admin-access all --web-admin-auth user:pass
#
# Default location of the GUI Database if no location is specified.
# /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
#
# Location provided by Calle for drawpileuser database. Can be used when drawpile-srv supports socket activation for web admin.
# /home/drawpileuser/server.db
#
#---------------------------------------------------------------------------------------------------------------------------------
function sessions_folder_function () {
	sudo mkdir -p -v sessions
	sudo chmod 775 "$dp_install_loc/Programs/Drawpile-Srv-Files/sessions" -R
	sudo chown drawpileuser "$dp_install_loc/Programs/Drawpile-Srv-Files/sessions" -R
}

function sessions_record_folder_function () {
	sudo mkdir -p -v session-record
	sudo chmod 775 "$dp_install_loc/Programs/Drawpile-Srv-Files/session-record" -R
	sudo chown drawpileuser "$dp_install_loc/Programs/Drawpile-Srv-Files/session-record" -R
}

function template_folder_function () {
	sudo mkdir -p -v templates
	sudo chmod 775 "$dp_install_loc/Programs/Drawpile-Srv-Files/templates" -R
	sudo chown drawpileuser "$dp_install_loc/Programs/Drawpile-Srv-Files/templates" -R
}
#---------------------------------------------------------------------------------------------------------------------------------
#
function systemd_options_definitions_function () {
	echo "Determine how you want drawpile-srv to run now. ${underline}Option 2${normal} is recommended"
	echo 'if you have a hostname. If you do not have a hostname, option 15 instead.'
	echo 'All settings will automatically work, though some additional setup for'
	echo 'session templates is required. Read more on the hyperlink below.'
	echo
	echo "${bold}${cyan}Short summary of options:${normal}"
	echo "    Read more --> ${underline}https://drawpile.net/help/server/${normal}"
	echo "${bold}web remote admin${normal} - add users, ban users, set auto session reset, etc."
	echo "${bold}file backed sessions${normal} - write sessions to file, helps sessions to survive"
	echo '    power outages and server crashes. Can serve as a recording if server'
	echo '    database set to Archive terminated sessions, however filenames are'
	echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
	echo '    corresponding text file, the session title is inside the text file.'
	echo "${bold}recording${normal} - records all sessions, may not be necessary with file backed"
	echo '    sessions turned on, though it can be useful for debugging broken boards or '
	echo '    recovering art from broken boards. This can be turned on an individual basis'
	echo '    when a room is active on the server by going to File and then Record... ,'
	echo "    or by combining the file backed sessions option and checking ${underline}Archive${normal}"
	echo "    ${underline}terminated sessions${normal}."
	echo "${bold}templates${normal} - provide default sessions that always exist on the server."
	echo '    This feature is not yet implemented in the graphical user interface but they can be'
	echo '    turned on using one of the options provided below.'
	echo "${bold}ssl${normal} - Encrypt data sent so conversations and drawings are kept private."
	echo '    If you do not have this option on, sensitive information should not'
	echo '    be shared in sessions. I.E. credit cards.'
	echo
}

function systemd_options_with_ssl_enabled_function () {
	# Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL.
	echo "SSL is optional for the server, so if you"
	echo "choose no SSL here, you will still be able to"
	echo "use the List Server and Web Admin."
	echo
	echo "${bold}${cyan}These options all use SSL with drawpile-srv.${normal}"
	echo '  1  - all options.'
	echo "  2  - all options except session recording - ${underline}recommended${normal}"
	echo '  3  - web admin, session recording, templates, & ssl'
	echo '  4  - web admin, file backed sessions, & ssl'
	echo '  6  - web admin, session recording, & ssl'
	echo '  8  - web admin, templates, & ssl'
	echo '  11 - web admin & ssl'
	echo
	echo "${bold}${cyan}These options do not use SSL with drawpile-srv. SSL is${normal}"
	echo "     ${bold}${cyan}used for the list server and web admin only.${normal}"
	echo '  5  - web admin, file backed sessions, & templates'
	echo '  7  - web admin, session recording, & templates'
	echo '  9  - web admin & file backed sessions'
	echo '  10 - web admin & session recording'
	echo '  12 - web admin & templates'
	echo '  13 - web admin'
	echo
	while :; do
		read -r -p "${cyan}${bold}Enter a number and hit enter to continue: ${normal}" systemd_selection
		[[ $systemd_selection =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $systemd_selection >= 1 && $systemd_selection <= 13 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
}

function systemd_options_with_ssl_enabled_options_function () {
	# Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL.
	if [ "$systemd_selection" == "1" ]; then
		systemd_selection_text="1 - all options." && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		sessions_record_folder_function
		template_folder_function
		sudo sed -i '\!^systemd_selection =!{h;s!=.*!= '"$systemd_selection"'!};${x;\!^$!{s!!systemd_selection = '"$systemd_selection"'!;H};x}' $drawpile_configuration_values_file
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "2" ]; then
		systemd_selection_text="2 - all options except session recording" && echo "Selected - $systemd_selection_text"
		echo '         - recommended'
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "3" ]; then
		systemd_selection_text="3 - web admin, session recording, ssl, & templates." && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "4" ]; then
		systemd_selection_text="4 - web admin, file backed sessions, & ssl" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "5" ]; then
		systemd_selection_text="5  - web admin, file backed sessions, & templates" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "6" ]; then
		systemd_selection_text="6  - web admin, session recording, & ssl" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "7" ]; then
		systemd_selection_text="7  - web admin, session recording, & templates" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "8" ]; then
		systemd_selection_text="8  - web admin, ssl, & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "9" ]; then
		systemd_selection_text="9  - web admin & file backed sessions" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "10" ]; then
		systemd_selection_text="10 - web admin & session recording" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "11" ]; then
		systemd_selection_text="11 - web admin & ssl" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "12" ]; then
		systemd_selection_text="12 - web admin & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "13" ]; then
		systemd_selection_text="13 - w web admin" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	else
		echo 'Invalid option selected. Assuming recommended configuration.'
		systemd_selection_text="2  - all options except session recording" && echo "Selected - $systemd_selection_text - ${underline}recommended${normal}"
		systemd_selection=2
		echo
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --ssl-cert $ssl_certificate --ssl-key $ssl_private_cert_key --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	fi
}

# --------------------------------------------------------------------------------

function systemd_options_without_ssl_with_hostname_function () {
	# Numbers 5, 7, 9, 10, 12, and 13 option do not use SSL but have a hostname
	echo "${bold}${cyan}These options assume you have a host name.${normal}"
	echo "     No SSL is used, so no List Server or Web Admin."
	echo "  5  - web admin, file backed sessions, & templates - ${underline}recommended${normal}"
	echo '  7  - web admin, session recording, & templates'
	echo '  9  - web admin & file backed sessions'
	echo '  10 - web admin & session recording'
	echo '  12 - web admin & templates'
	echo '  13 - web admin'
	echo
	while :; do
		read -r -p "${cyan}${bold}Enter a number and hit enter to continue: ${normal}" systemd_selection
		[[ $systemd_selection =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $systemd_selection == 5 || $systemd_selection == 7 || $systemd_selection == 9 || $systemd_selection == 10 || $systemd_selection == 12 || $systemd_selection == 13 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
}

function systemd_options_without_ssl_with_hostname_options_function () {
	# Numbers 5, 7, 9, 10, 12, and 13 option do not use SSL but have a hostname

	if [ "$systemd_selection" == "5" ]; then
		systemd_selection_text="5  - web admin, file backed sessions, & templates" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "7" ]; then
		systemd_selection_text="7  - web admin, session recording, & templates" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "9" ]; then
		systemd_selection_text="9  - web admin & file backed sessions" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "10" ]; then
		systemd_selection_text="10 - web admin & session recording" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "12" ]; then
		systemd_selection_text="12 - web admin & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "13" ]; then
		systemd_selection_text="13 - w web admin" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	else
		echo 'Invalid option selected. Assuming recommended configuration.'
		systemd_selection_text="5 - web admin, file backed sessions, & templates" && echo "Selected - $systemd_selection_text - ${underline}recommended${normal}"
		systemd_selection=5
		echo
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --local-host $hostname --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	fi
}

# --------------------------------------------------------------------------------

function systemd_options_without_ssl_without_hostname_function () {
	# Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, and 20 option do not use SSL
	echo "${bold}${cyan}These options assume you do not have a host name.${normal}"
	echo "      No SSL is used, so no List Server or Web Admin."
	echo '  14  - all options.'
	echo "  15  - all options except session recording - ${underline}recommended${normal}"
	echo '  16  - web admin, session recording, & templates'
	echo '  17  - web admin & file backed sessions'
	echo '  18  - web admin & session recording'
	echo '  19  - web admin & templates'
	echo '  20  - web admin'
	echo
	while :; do
		read -r -p "${cyan}${bold}Enter a number and hit enter to continue: ${normal}" systemd_selection
		[[ $systemd_selection =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $systemd_selection >= 14 && $systemd_selection <= 20 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
}

function systemd_options_without_ssl_without_hostname_options_function () {
	# Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, and 20 option do not use SSL
	if [ "$systemd_selection" == "14" ]; then
		systemd_selection_text="14 - all options" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "15" ]; then
		systemd_selection_text="15 - all options except session recording" && echo "Selected - $systemd_selection_text"
		echo '         - recommended'
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/" 
	elif [ "$systemd_selection" == "16" ]; then
		systemd_selection_text="16 - web admin, session recording, & templates" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		template_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "17" ]; then
		systemd_selection_text="17 - web admin & file backed sessions" && echo "Selected - $systemd_selection_text"
		sessions_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "18" ]; then
		systemd_selection_text="18  - web admin, session recording" && echo "Selected - $systemd_selection_text"
		sessions_record_folder_function
		systemd_configuration="--record \"$dp_install_loc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "19" ]; then
		systemd_selection_text="19  - web admin & templates" && echo "Selected - $systemd_selection_text"
		template_folder_function
		sudo mkdir -p -v templates
		systemd_configuration="--templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	elif [ "$systemd_selection" == "20" ]; then
		systemd_selection_text="20 - web admin" && echo "Selected - $systemd_selection_text"
		systemd_configuration="--extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/"
	else
		echo 'Invalid option selected. Assuming recommended configuration.'
		systemd_selection_text="15 - all options except session recording" && echo "Selected - $systemd_selection_text ${underline}recommended${normal}"
		systemd_selection=15
		echo
		sessions_folder_function
		template_folder_function
		systemd_configuration="--sessions \"$dp_install_loc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dp_install_loc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/ --report-url http://localhost:$abuse_report_port/" 
	fi
}
# --------------------------------------------------------------------------------
variable_to_read_1="systemd_selection"
variable_to_read_2="systemd_selection_text"
variable_to_read_3="systemd_configuration"

value_description_1="This value corresponds to server related startup settings: "
value_description_2=" "
value_description_3=" "
value_description_4=systemd_options_definitions_function
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	systemd_selection=$read_stored_config_value_query_1
	systemd_selection_text=$read_stored_config_value_query_2
	systemd_configuration=$read_stored_config_value_query_3
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	systemd_options_definitions_function
	if [ "$ssl_encryption_config" == "1" ] || [ "$ssl_encryption_config" == "2" ]; then
		# echo 'Press 1 for Self Signed Certificates'. Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL. 
		# echo 'Press 2 for Lets Encrypt'. Numbers 1, 2, 3, 4, 6, 8, 11, and else option use SSL. 
		systemd_options_with_ssl_enabled_function
		systemd_options_with_ssl_enabled_options_function
	elif [ "$ssl_encryption_config" == "3" ]; then
		# echo 'Press 3 for no SSL security.' Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20
		if [ "$hostname" == "no_value_selected" ]; then
			systemd_options_without_ssl_without_hostname_function
			systemd_options_without_ssl_without_hostname_options_function
		else
			systemd_options_without_ssl_with_hostname_function
			systemd_options_without_ssl_with_hostname_options_function
		fi
	else
		# echo Invalid option selected. Assuming option 2 intended.
		# echo 'Press 2 for Lets Encrypt'
		systemd_options_with_ssl_enabled_function
		systemd_options_with_ssl_enabled_options_function
	fi
	sudo sed -i '\!^systemd_selection =!{h;s!=.*!= '"$systemd_selection"'!};${x;\!^$!{s!!systemd_selection = '"$systemd_selection"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^systemd_selection_text =!{h;s!=.*!= '"$systemd_selection_text"'!};${x;\!^$!{s!!systemd_selection_text = '"$systemd_selection_text"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^systemd_configuration =!{h;s!=.*!= '"$systemd_configuration"'!};${x;\!^$!{s!!systemd_configuration = '"$systemd_configuration"'!;H};x}' $drawpile_configuration_values_file
else
	echo "This message should not be visible."
fi
echo
# --------------------------------------------------------------------------------
#
#1 - Socket Activation
cat <<EOF | sudo tee "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service" >/dev/null
[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv
# --------------------------------------------------------------------------------
[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=$location_created_executable_dpsrv -d /home/drawpileuser/server.db $systemd_configuration
# --------------------------------------------------------------------------------
# The AppImage is not built with systemd integration at the moment,
#      so type=simple should be used with it:
# Type=simple
# Restart=always
# --------------------------------------------------------------------------------
# If you are using a self-built or distribution provided version with
#      systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main
# --------------------------------------------------------------------------------
# Note: in order to use session recording and SSL safely,
#      a dedicated user account should be created for drawpile-srv.
User=drawpileuser
# --------------------------------------------------------------------------------
[Install]
WantedBy=multi-user.target
EOF
#
#
#2 - Server starts on Raspberry Pi power up
cat <<EOF | sudo tee "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service" >/dev/null
[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv
# --------------------------------------------------------------------------------
[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=$location_created_executable_dpsrv -d /home/drawpileuser/server.db --web-admin-port 27780 $systemd_configuration
# --------------------------------------------------------------------------------
# The AppImage is not built with systemd integration at the moment,
#      so type=simple should be used with it:
Type=simple
Restart=always
# --------------------------------------------------------------------------------
# If you are using a self-built or distribution provided version with
#      systemd integration, use this to enable socket activation:
# Type=notify
# NotifyAccess=main
# --------------------------------------------------------------------------------
# Note: in order to use session recording and SSL safely,
#       a dedicated user account should be created for drawpile-srv.
User=drawpileuser
# --------------------------------------------------------------------------------
[Install]
WantedBy=multi-user.target
EOF

sudo chmod 655 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service"
sudo chmod 777 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.service.backup"
sudo chmod 655 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service"
sudo chmod 655 "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service"
echo
echo 'Copying files drawpile-srv.service and drawpile-srv.socket to make systemd work.'
sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv01.service" /etc/systemd/system/
sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv02.service" /etc/systemd/system/
sudo cp "$dp_install_loc/Programs/Drawpile/server/drawpile-srv.socket" /etc/systemd/system/
echo
echo 'Reloading systemctl and systemd.'
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
wait $!
# This specific step ensures a database file is generated and permissions assigned to it
# so drawpileuser can access it.
sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
wait $!
# sudo systemctl daemon-reload & sudo systemctl restart systemd-modules-load
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
wait $!
# sudo systemctl start --now drawpile-srv.service & sleep 1
sudo systemctl start --now drawpile-srv.service
wait $!
sleep 5
sudo chmod 770 /home/drawpileuser/server.db
sudo chown drawpileuser /home/drawpileuser/server.db
sudo systemctl stop --now drawpile-srv.service
wait $!
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
variable_to_read_1="samba_choice"
variable_to_read_2="option_loc_num"
variable_to_read_3="dp_install_loc_9_custom"

value_description_1="***** Set up file sharing with other computers . . . (Samba) *****"
value_description_2="Query 02: option_loc_num"
value_description_3="     Number selected when selecting download/server set up location."
value_description_4="Query 03: dp_install_loc_9_custom"
value_description_5="     If this has a value, this is the user specified location."

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	samba_choice=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "${bold}${cyan}***** Set up file sharing with other computers . . . (Samba) *****${normal}"
	echo
	echo 'This stage will give you an option to set up your Raspberry Pi for file'
	echo 'sharing with Windows so that you can copy or move files to and from'
	echo 'the device. This also means it will be easier to get recorded sessions,'
	echo 'templates, and the archived file backed sessions from the drawpile'
	echo 'server to your computer.'
	echo
	echo 'What folders would you like to share to access on the network?'
	echo
	echo "${red}${bold}NOTE: If using server remotely that is NOT on your home network, you${normal}"
	echo "${red}${bold}      should NOT use this option. Select 4 to skip this step.${normal}"
	echo
	echo
	echo "							${bold}Actual Path to be shared${normal}"
	echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
	if [[ -d "$option_loc_1" ]]; then
		echo " 1 - ${underline}Public Folder (Recommended)${normal}			$option_loc_1"
	else
		echo " ${red}${bold}$invalid_path_text	$option_loc_1${normal}"
	fi
	echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
	if [[ -d "$option_loc_10" ]] && [[ -d "$option_loc_4" ]] && [[ -d "$option_loc_1" ]] && [[ -d "$option_loc_11" ]]; then
		echo " 2 - ${underline}Music, Pictures, Public, and Videos${normal}		$option_loc_10
							$option_loc_4
							$option_loc_1
							$option_loc_11"
	else
		echo " ${red}${bold}$invalid_path_text	$option_loc_10
							$option_loc_4
							$option_loc_1
							$option_loc_11${normal}"
	fi
	echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
	if [[ -d "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files" ]]; then
		echo " 3 - ${underline}Custom location of drawpile${normal}			$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files" || echo "${red}${bold}$invalid_path_text	- $dp_install_loc/Programs/Drawpile-Srv-Files${normal}"
		echo "     Server files only to be shared, like recordings,"
		echo "           templates, and file-backed sessions."
	elif [[ -d "$dp_install_loc/Programs/Drawpile-Srv-Files" ]]; then
		echo " 3 - ${underline}Server files only to be shared.${normal}			$dp_install_loc/Programs/Drawpile-Srv-Files"
		echo "     Server files only to be shared, like recordings,"
		echo "           templates, and file-backed sessions."
	else
		echo "${red}${bold} $invalid_path_text	$dp_install_loc/Programs/Drawpile-Srv-Files"
	fi
	echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
	echo " 4 - ${underline}No Windows file sharing to be set up.${normal}"
	echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
	echo
	read -r -p 'Enter a number and hit enter to continue: ' samba_choice
	echo
	if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then

		echo "${bold}${cyan}*****Installing Samba for Windows Network Sharing . . . *****${normal}"
		echo
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			version_samba=$( apt-cache policy samba | grep "Installed:" | cut -c 14-22 )
			# minimum_version_samba=2:4.13.13
			version_samba_common_bin=$( apt-cache policy samba-common-bin | grep "Installed:" | cut -c 14-22 )
			# minimum_version_samba_common_bin=2:4.13.13
			progs=(samba samba-common-bin);
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			version_samba=$( dnf info samba | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
			installation_status_samba=$( dnf info samba | sed -n '2 p' )
			# minimum_version_samba=2:4.13.13
			version_samba_common_bin=$( dnf info samba-common | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
			installation_status_samba_common_bin=$( dnf info samba-common | sed -n '2 p' )
			# minimum_version_samba_common_bin=2:4.13.13
			progs=(samba samba-common);
			# Installed Packages
			# Available Packages
			# Error: No matching Packages to list
		fi
		app_does_not_exist=0
		app_installed=0
		app_not_installed=0
		package_install_status_check_function		
		if [[ "$version_samba" = "(none)" ]] || [[ "$installation_status_samba" = "Available Packages" ]]; then
			echo "Installing package samba . . ."
			echo
			sudo $package_install_program samba # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			echo
		else
			echo "Package samba already installed."
		fi
		echo
		if [[ "$version_samba_common_bin" = "(none)" ]] || [[ "$installation_status_samba_common_bin" = "Available Packages" ]]; then
			echo "Installing package samba . . ."
			echo
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				package_name=samba-common-bin
			fi
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				package_name=samba-common
			fi
			sudo $package_install_program samba-common-bin # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			echo
		else
			echo "Package samba already installed."
		fi
		echo
		if [[ ! -e /etc/samba/smb.conf.bak && -e /etc/samba/smb.conf ]]; then
			sudo cp /etc/samba/smb.conf /etc/samba/smb.conf.bak
			# sudo cp /etc/samba/smb.conf.bak /etc/samba/smb.conf
			echo Backup made of smb.conf to smb.conf.bak
		fi
		sudo chmod 777 /etc/samba/smb.conf
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			sudo sed -i '/workgroup = WORKGROUP/ c\	workgroup = workgroup' /etc/samba/smb.conf
			sudo sed -i "s/workgroup = workgroup$/&\n	netbios name = $HOSTNAME/" /etc/samba/smb.conf
			sudo sed -i "s/netbios name = $HOSTNAME$/&\n	wins support = yes/" /etc/samba/smb.conf
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			sudo sed -i '/workgroup = SAMBA/ c\	workgroup = workgroup' /etc/samba/smb.conf
			sudo sed -i "s/workgroup = workgroup$/&\n	netbios name = $HOSTNAME/" /etc/samba/smb.conf
			sudo sed -i "s/netbios name = $HOSTNAME$/&\n	wins support = yes/" /etc/samba/smb.conf
			# sudo sed -i 's/workgroup = SAMBA$/&workgroup = WORKGROUP\n   netbios name = $HOSTNAME/' /etc/samba/smb.conf
			# sudo sed -i 's/netbios name = $HOSTNAME$/&netbios name = $HOSTNAME\n		wins support = yes/' /etc/samba/smb.conf
			# sudo sed -i '/\#   wins support = no/ c\   wins support = yes' /etc/samba/smb.conf
		fi
		
		echo
		sudo sed -i '\!^samba_choice =!{h;s!=.*!= '"$samba_choice"'!};${x;\!^$!{s!!samba_choice = '"$samba_choice"'!;H};x}' $drawpile_configuration_values_file
		
		if [ "$samba_choice" == "1" ]; then
			sudo chmod 777 $option_loc_1 -R
		echo "
[$current_username - Public]
	comment = $current_username Public Shared Folder
	path = $option_loc_1
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777" >> /etc/samba/smb.conf
			sudo chmod 641 /etc/samba/smb.conf
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				sudo systemctl restart smbd
				wait $!
				sudo systemctl restart nmbd
				wait $!
				sudo samba restart
				wait $!
			fi
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				sudo systemctl enable smb --now
				wait $!
				sudo systemctl restart smb
				wait $!
			fi
			echo 'Read more on Samba --> http://tinyurl.com/y9t5qxbv'
			#Read more on Samba --> https://www.daedtech.com/create-a-windows-share-on-your-raspberry-pi/
			echo
		elif [ "$samba_choice" == "2" ]; then
			sudo chmod 777 $option_loc_1 -R
			sudo chmod 777 $option_loc_10 -R
			sudo chmod 777 $option_loc_4 -R
			sudo chmod 777 $option_loc_11 -R
			echo "
[$current_username - Public]
	comment = $current_username Public Shared Folder
	path = $option_loc_1
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root

[$current_username - Music]
	comment = $current_username Music Shared Folder
	path = $option_loc_10
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root

[$current_username - Pictures]
	comment = $current_username Pictures Shared Folder
	path = $option_loc_4
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root

[$current_username - Videos]
	comment = $current_username Videos Shared Folder
	path = $option_loc_11
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root" >> /etc/samba/smb.conf
			sudo chmod 641 /etc/samba/smb.conf
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				sudo systemctl restart smbd
				wait $!
				sudo systemctl restart nmbd
				wait $!
				sudo samba restart
				wait $!
			fi
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				sudo systemctl enable smb --now
				wait $!
				sudo systemctl restart smb
				wait $!
			fi
			echo 'Read more on Samba --> http://tinyurl.com/y9t5qxbv'
			#Read more on Samba --> https://www.daedtech.com/create-a-windows-share-on-your-raspberry-pi/
		elif [ "$samba_choice" == "3" ]; then
			if [ -z "$dp_install_loc_9_custom" ]; then
				sudo chmod 777 "$dp_install_loc/Programs/Drawpile-Srv-Files/" -R
				echo "
[$HOSTNAME - Drawpile-Server]
	comment = $HOSTNAME Drawpile Server
	path = \"$dp_install_loc/Programs/Drawpile-Srv-Files\"
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root" >> /etc/samba/smb.conf
			else	
				sudo chmod 777 "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files/" -R
				echo "
[$HOSTNAME - Drawpile-Server]
	comment = $HOSTNAME Drawpile Server
	path = \"$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files\"
	guest ok = yes
	browsable = yes
	read only = no
	create mask = 0777
	directory mask = 0777
	force user = root" >> /etc/samba/smb.conf
			fi
		sudo chmod 641 /etc/samba/smb.conf
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				sudo systemctl restart smbd
				wait $!
				sudo systemctl restart nmbd
				wait $!
				sudo samba restart
				wait $!
			fi
			if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				sudo systemctl enable smb --now
				wait $!
				sudo systemctl restart smb
				wait $!
			fi
		echo 'Read more on Samba --> http://tinyurl.com/y9t5qxbv'
			#Read more on Samba --> https://www.daedtech.com/create-a-windows-share-on-your-raspberry-pi/
		else
			echo 'Invalid option selected. No Windows file sharing to be'
			echo 'set up! Moving on . . .'
			samba_choice=4
		fi
	else
		if [ "$samba_choice" == "4" ]; then
			echo 'No Windows file sharing to be set up. Moving on . . .'
		else
			echo 'Invalid option selected. No Windows file sharing to be'
			echo 'set up! Moving on . . .'
			samba_choice=4
		fi	
	fi
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
	# This section checks for SELinux and firewall-cmd blocks against Samba, and removes them accordingly.
	# https://docs.fedoraproject.org/en-US/quick-docs/samba/
	
	if [[ "$selinux_available_check" -ne "127" || "$firewall_cmd_available_check" -ne "1" ]] && (( "$samba_choice" >= "1" && "$samba_choice" <= "3" )); then
		# https://docs.fedoraproject.org/en-US/quick-docs/samba/
		<<comment_EOF_delete
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			echo
			echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
			echo
			echo "${bold}${cyan}Set password for connecting to Samba share.${normal}"
			echo "${bold}${cyan}If you mistype the password, it will continue${normal}"
			echo "${bold}${cyan}on. Copy the commands below to set a password ${normal}"
			echo "${bold}${cyan}after the script has completed. ${normal}"
			echo
			echo "${bold}${cyan}This will use the following commands:${normal}"
			echo "     sudo smbpasswd -a $current_username"
			echo "     sudo systemctl restart smb"
			echo
			echo "Enter the password now to connect to the machine over the network:"
			echo
			sudo smbpasswd -a $current_username
			echo
			sudo systemctl restart smb
		fi
comment_EOF_delete
		#---------------------------------------------------------------------------------------------------------------------------------
		function selinux_samba_adjustments_function () {
			if [ "$samba_choice" == "1" ]; then
				echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_1(/.*)?\""
				sudo semanage fcontext --add --type "samba_share_t" "$option_loc_1(/.*)?"
				echo
				echo "sudo restorecon -R \"$option_loc_1\""
				sudo restorecon -R "$option_loc_1"
			elif [ "$samba_choice" == "2" ]; then
				echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_1(/.*)?\""
				sudo semanage fcontext --add --type "samba_share_t" "$option_loc_1(/.*)?"
				echo
				echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_10(/.*)?\""
				sudo semanage fcontext --add --type "samba_share_t" "$option_loc_10(/.*)?"
				echo
				echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_4(/.*)?\""
				sudo semanage fcontext --add --type "samba_share_t" "$option_loc_4(/.*)?"
				echo
				echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$option_loc_11(/.*)?\""
				sudo semanage fcontext --add --type "samba_share_t" "$option_loc_11(/.*)?"
				echo
				sudo "restorecon -R \"$option_loc_1\""
				sudo restorecon -R "$option_loc_1"
				echo
				sudo "restorecon -R \"$option_loc_10\""
				sudo restorecon -R "$option_loc_10"
				echo
				sudo "restorecon -R \"$option_loc_4\""
				sudo restorecon -R "$option_loc_4"
				echo
				sudo "restorecon -R \"$option_loc_11\""
				sudo restorecon -R "$option_loc_11"
			elif [ "$samba_choice" == "3" ]; then
				if [ -z "$dp_install_loc_9_custom" ]; then
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$dp_install_loc/Programs/Drawpile-Srv-Files(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$dp_install_loc/Programs/Drawpile-Srv-Files(/.*)?"
					echo
					echo "sudo restorecon -R \"$dp_install_loc/Programs/Drawpile-Srv-Files\""
					sudo restorecon -R "$dp_install_loc/Programs/Drawpile-Srv-Files"
				else	
					echo "sudo semanage fcontext --add --type \"samba_share_t\" \"$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files(/.*)?\""
					sudo semanage fcontext --add --type "samba_share_t" "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files(/.*)?"
					echo
					echo "sudo restorecon -R \"$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files\""
					sudo restorecon -R "$dp_install_loc_9_custom/Programs/Drawpile-Srv-Files"
				fi
			else
				echo "${bold}${red}This message for SELinux Samba check should not be visible.${normal}"
				echo
				sleep 10
			fi
		}
		selinux_status=$( getenforce 2>/dev/null )
		selinux_available_check=$?
		echo
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		echo
		if [ "$selinux_available_check" -eq "0" ]; then
			# SELinux installed.
			if [ "$selinux_status" == "Disabled" ]; then
				echo "${bold}${green}SELinux status is: Disabled.${normal}"
				echo "No action is required. However, if you enable it in the future,"
				echo "it will cause samba to not function as intended."
				echo
				sleep 30
			else
				selinux_config_status=$( sestatus 2>/dev/null | grep -i "Mode from config file:" | awk '{ print $5 }' )
				# echo "SELinux Config Status:	$selinux_config_status"
				# echo
				if [ "${selinux_status,,}" == "${selinux_config_status,,}" ]; then
					echo "${bold}${green}SELinux status is not temporarily changed.${normal}"
					if [ "$selinux_status" == "Enforcing" ]; then
						echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
						echo
						echo "${bold}${yellow}Action required to ensure samba works.${normal}"
						echo
						echo '-------------------------------------------'				
						echo 
						selinux_samba_adjustments_function
						echo
						sleep 10
					elif [ "$selinux_status" == "Permissive" ]; then
						echo "${bold}${green}SELinux status is: Permissive.${normal}"
						echo
						echo "No action is required."
						echo
						sleep 10
					else
						echo "${bold}${red}This message for SELinux status Samba (1) should not be visible.${normal}"
					fi
				elif [ "${selinux_status,,}" != "${selinux_config_status,,}" ]; then
					echo "${bold}${yellow}SELinux status is temporarily changed."
					if [ "$selinux_status" == "Enforcing" ] && [ "$selinux_config_status" == "permissive" ]; then
						echo "${bold}${yellow}SELinux status is: Enforcing${normal}"
						echo
						echo "However, on system reboot the status will return to permissive."
						echo "No action is required. It is recommended that you reboot when"
						echo "the script is completed or turn it back to permissive mode with"
						echo "the following command:"
						echo "     sudo setenforce 0"
						echo
						pause
						echo
					elif [ "$selinux_status" == "Permissive" ] && [ "$selinux_config_status" == "enforcing" ]; then
						echo "${bold}${yellow}SELinux status is: Permissive.${normal}"
						echo
						echo "However, on system reboot the status will return to enforcing."
						echo "Action required to ensure samba works on reboot."
						echo
						echo '-------------------------------------------'				
						echo
						selinux_samba_adjustments_function
						echo
						sleep 10
					else
						echo "${bold}${red}This message for SELinux status Samba (2) should not be visible.${normal}"
						echo
						sleep 10
					fi
				else
					echo "${bold}${red}This message for SELinux temporary status should not be visible.${normal}"
					echo
					sleep 10
				fi
			fi
		elif [ "$selinux_available_check" -eq "127" ]; then
			echo "${bold}${green}SELinux is not available. No action required.${normal}"
			echo
			sleep 10
		else
			echo "${bold}${red}This message for SELinux check should not be visible.${normal}"
			echo
			sleep 10
		fi
		#---------------------------------------------------------------------------------------------------------------------------------
		function firewall_cmd_samba_adjustments_function () {
			firewall_zone_name=$( sudo firewall-cmd --list-all | sed -n '1 p' | awk '{ print $1 }' )
			
			echo "sudo firewall-cmd --permanent --zone=$firewall_zone_name --add-service=samba"
			sudo firewall-cmd --permanent --zone=$firewall_zone_name --add-service=samba
			echo
			echo "sudo firewall-cmd --reload"
			sudo firewall-cmd --reload
		}

		firewall_cmd_status=$( sudo firewall-cmd --state 2>/dev/null )
		firewall_cmd_available_check=$?
		# echo Check: $firewall_cmd_available_check
		echo
		echo "- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - "
		echo
		if [ "$firewall_cmd_available_check" -eq "0" ] || [ "$firewall_cmd_available_check" -eq "252" ] || [ "$firewall_cmd_available_check" -ne "1" ]; then
			# 0 is running, 252 is not running.
			# echo State: $firewall_cmd_status
			echo "${bold}${yellow}Firewall-cmd installed.${normal}"
			if [ "$firewall_cmd_status" == "running" ]; then
				echo "${bold}${yellow}Firewall-cmd is running currently.${normal}"
				echo
				echo "${bold}${yellow}Action required to ensure samba works.${normal}"
				echo
				echo '-------------------------------------------'				
				echo
				firewall_cmd_samba_adjustments_function
				echo
				sleep 10
			elif [ "$firewall_cmd_status" == "not running" ]; then
				echo "${bold}${green}Firewall-cmd is not running currently.${normal}"
				echo
				echo "${bold}${yellow}Action required to ensure samba works.${normal}"
				echo
				echo '-------------------------------------------'				
				echo
				firewall_cmd_samba_adjustments_function
				echo
				sleep 10
			else
				echo "${bold}${red}This message should not be visible for firewall-cmd status.${normal}"
				echo
				sleep 10
			fi
		elif [ "$firewall_cmd_available_check" -eq "1" ]; then
			echo "${bold}${green}Firewall_cmd is not available. No action required.${normal}"
			echo
			sleep 10
		else
			echo "${bold}${red}This message for Firewall_cmd check should not be visible.${normal}"
			echo
			sleep 10
		fi
	fi
	#---------------------------------------------------------------------------------------------------------------------------------
	#---------------------------------------------------------------------------------------------------------------------------------
else
	echo "This message should not be visible."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
# This function is no longer used but was a lot of work, so keeping for notes
function allowed_and_disallowed_characters_function () {
	echo
	echo "${bold}${green}You can use the following special characters: ${normal}"
	echo "${bold}${green} ~ \` ! @ # $ % ^ & * ( ) - _ = + { } [ ] | \ ; : ' \" , . < > ? ${normal}"
	echo
	echo "${bold}${red}You CANNOT use the ! character. ${normal}"
	# Old Notes
	# Technically the symbols: ! @ : '
	# work, however they are disallowed because of List Server and possibly confusing the script
	# Expression vs 2.1
	# [[ $nginx_username_2 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]
	# Original Expression
	# [[ $nginx_username_1 =~ ^[a-zA-Z0-9@*_=:\'\&\(\)\+\;\,\.\$-]*$ ]]
	echo
}
# ----------------------------------------------------------------------------------
# This function is no longer used but was a lot of work, so keeping for notes
function nginx_username_function () {
	read -r -p "01 - Enter username ONLY (without restricted characters): " nginx_username_1
	while :; do
		if [[ $nginx_username_1 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "01 - Enter username ONLY (without restricted characters): " nginx_username_1
		fi
	done

	read -r -p "02 - Enter username again (without restricted characters): " nginx_username_2
	while :; do
		if [[ $nginx_username_2 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "02 - Enter username again (without restricted characters): " nginx_username_2
		fi
	done
}
# ----------------------------------------------------------------------------------
# This function is no longer used but was a lot of work, so keeping for notes
function nginx_password_function () {
	read -r -p "01 - Enter password ONLY (without restricted characters): " nginx_htpasswd_1
	while :; do
		if [[ $nginx_htpasswd_1 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "01 - Enter password ONLY (without restricted characters): " nginx_htpasswd_1
		fi
	done

	read -r -p "02 - Enter password (without restricted characters) again: " nginx_htpasswd_2
	while :; do
		if [[ $nginx_htpasswd_2 =~ ^[a-zA-Z0-9*_=~\&\(\)\+\;\,\.\$-]*$ ]]; then
			break
		else
			allowed_and_disallowed_characters_function
			read -r -p "02 - Enter password (without restricted characters) again: " nginx_htpasswd_2
		fi
	done
}
# ----------------------------------------------------------------------------------
echo "${bold}${cyan}*****     Setting up NGINX for remote authentication     *****${normal}"
echo "${bold}${cyan}*****             for Server Administration.             *****${normal}"
echo
echo 'Please type in a username you wish to use for making changes to your drawpile'
echo 'server. If you make a mistake or need to update the server login, open a new'
echo 'terminal window and type in the following:'
echo
echo 'sudo htpasswd -bc /etc/nginx/passwords USERNAME PASSWORD'
echo
echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
echo "     The list server, in the configuration file, stores your username and"
echo "     password for admin in plain text format. The purpose is so the list"
echo "     server gains access to the admin interface to automatically list"
echo "     sessions that are hosted on the server."
echo "     "
echo "     Because of this, it would be helpful to store this information in "
echo "     the file where other server configuration settings are kept."
echo "           $drawpile_configuration_values_file"
echo "     "
echo "     You will be given a chance to decide if you want to save this info"
echo "     in plain text format. If you wish to have the list server in"
echo "     read-only mode so other servers cannot list on your list server,"
echo "     you MUST consent to this option to use it."
echo "     "
echo "     ${bold}${red}If you plan on doing so, do not use exclamation marks (!)${normal}"
echo "     ${bold}${red}in your password. It will not be able to store the password.${normal}"
echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
echo
echo "${bold}${green}This will be your username and login for web administration of the server.${normal}"
echo
read -r -p "Enter username                    : " nginx_username_1
read -r -p "Enter username again              : " nginx_username_2

while [ $nginx_username_1 != $nginx_username_2 ]
do
	echo
		echo "Usernames entered do not match!"
	echo
		read -r -p "Enter username                    : " nginx_username_1
		read -r -p "Enter username again              : " nginx_username_2
done
echo
echo "Server Administration username is : $nginx_username_1"
echo
echo
read -r -p "Enter password                    : " nginx_htpasswd_1
read -r -p "Enter password again              : " nginx_htpasswd_2
while [ $nginx_htpasswd_1 != $nginx_htpasswd_2 ]
do
	echo
		echo "Passwords entered do not match!"
	echo
		read -r -p "Enter password                    : " nginx_htpasswd_1
		read -r -p "Enter password again              : " nginx_htpasswd_2
done
echo
echo "Server Administration password is : $nginx_htpasswd_1"
echo
sudo htpasswd -bc /etc/nginx/passwords "$nginx_username_1" "$nginx_htpasswd_1"
echo
echo 'Modifying file nginx.conf for remote administration of the Drawpile Server.'
echo
echo

# Used for List Server to read hosted sessions and list them automatically, even with special characters being used.
nginx_username_encoded_1="$(echo "$nginx_username_1" | python -c 'import sys; from urllib.parse import quote; print(quote(sys.stdin.readline().strip(), safe=""))')"
# echo "Value Encoded $nginx_username_encoded_1"

# Used for List Server to read hosted sessions and list them automatically, even with special characters being used.
nginx_htpasswd_encoded_1="$(echo "$nginx_htpasswd_1" | python -c 'import sys; from urllib.parse import quote; print(quote(sys.stdin.readline().strip(), safe=""))')"
# echo "Value Encoded $nginx_htpasswd_encoded_1"

# To be used later with server management scripts, to decode URL encoded usernames/passwords
# raw_password="$(echo "$encoded_password" | python -c 'import sys; from urllib.parse import unquote; print(unquote(sys.stdin.readline().strip()))')"

# Refer to help with this command.
# https://superuser.com/questions/1254358/replace-single-line-with-multline-content-within-the-file-nginx-conf/1254366?noredirect=1#comment1842983_1254366
#

<<comment_server_management_script_later
nginx_username_1=ADMIN
nginx_username_2=ADMIN2
nginx_htpasswd_1=Password0123456789012

echo "${cyan}${bold}Contents of /etc/nginx/passwords${normal}"
cat /etc/nginx/passwords 
echo
echo
if cat /etc/nginx/passwords | grep -iox "$nginx_username_1:.*" > /dev/null 2>&1; then

	echo Found Username $nginx_username_1
	echo
	echo "${cyan}${bold}Contents of /etc/nginx/passwords with user filtered${normal}"
	passwords_filtered=$( cat /etc/nginx/passwords | grep -iox "$nginx_username_1:.*" )
	echo $passwords_filtered
	echo
	echo "${cyan}${bold}Contents of /etc/nginx/passwords with user filtered, inverted${normal}"
	grep -v "$passwords_filtered" /etc/nginx/passwords
	echo
	pause
	echo
	echo Removing $nginx_username_1
	grep -v "$passwords_filtered" /etc/nginx/passwords | sudo tee /etc/nginx/passwords > /dev/null 2>&1
	echo
	sudo htpasswd -b /etc/nginx/passwords $nginx_username_2 $nginx_htpasswd_1
	echo
	cat /etc/nginx/passwords 
fi
comment_server_management_script_later

sudo sed -i -e 's/# server_names_hash_bucket_size 64/server_names_hash_bucket_size 64/g' /etc/nginx/nginx.conf

sudo sed -i.bak 's/^	include \/etc\/nginx\/sites-enabled\/\*\;$/&\n	\n	server {\n		listen 8081\;\n		\n		location \/ {\n			proxy_pass http:\/\/127.0.0.1:27780\/api\/\;\n			proxy_redirect default\;\n			auth_basic "Server Administration"\;\n			auth_basic_user_file \/etc\/nginx\/passwords\;\n		}\n	}\n/' /etc/nginx/nginx.conf
sudo nginx -s reload

echo
echo ----------------------------------------------------------------------------------
echo
echo "${bold}${red}************************** REPEAT IMPORTANT NOTE: *************************${normal}"
echo "     The list server, in the configuration file, stores your username and"
echo "     password for admin in plain text format. The purpose is so the list"
echo "     server gains access to the admin interface to automatically list"
echo "     sessions that are hosted on the server."
echo "     "
echo "     Because of this, it would be helpful to store this information in "
echo "     the file where other server configuration settings are kept."
echo "           $drawpile_configuration_values_file"
echo "     "
echo "     This information would be used to potentially update the list server"
echo "     configuration file in the event of a admin username and/or password"
echo "     change. If you decide to not use this configuration, the list server"
echo "     will NOT automatically list sessions to make it easier for users to"
echo "     find sessions. You also cannot use the list server in read-only mode"
echo "     so other servers cannot use your list server."
echo "     "
echo "     It is recommended to enable this setting."
echo "     "
echo "     ${bold}${red}If you plan on doing so, do not use exclamation marks (!)${normal}"
echo "     ${bold}${red}in your password. It will not be able to store the password.${normal}"
echo "${bold}${red}************************** REPEAT IMPORTANT NOTE: *************************${normal}"
echo
echo "${bold}${red}Do you consent to store this information in plain text format on the server?${normal}"
while :; do
	read -r -p "${bold}${red} (Y)es or (N)o:${normal} " nginx_username_password_consent_query
	if [ "$nginx_username_password_consent_query" == "y" ] || [ "$nginx_username_password_consent_query" == "Y" ] || [ "$nginx_username_password_consent_query" == "yes" ] || [ "$nginx_username_password_consent_query" == "YES" ] || [ "$nginx_username_password_consent_query" == "Yes" ] || [ "$nginx_username_password_consent_query" == "n" ] || [ "$nginx_username_password_consent_query" == "N" ] || [ "$nginx_username_password_consent_query" == "no" ] || [ "$nginx_username_password_consent_query" == "NO" ] || [ "$nginx_username_password_consent_query" == "No" ]; then
		break
	else
		echo
		echo "${bold}${red}Invalid input selection, try again.${normal}"
		echo
		echo ----------------------------------------------------------------------------------
		echo
	fi
done

sudo sed -i '\!^nginx_username_password_consent_query =!{h;s!=.*!= '"$nginx_username_password_consent_query"'!};${x;\!^$!{s!!nginx_username_password_consent_query = '"$nginx_username_password_consent_query"'!;H};x}' $drawpile_configuration_values_file

if [ "$nginx_username_password_consent_query" == "y" ] || [ "$nginx_username_password_consent_query" == "Y" ] || [ "$nginx_username_password_consent_query" == "yes" ] || [ "$nginx_username_password_consent_query" == "YES" ] || [ "$nginx_username_password_consent_query" == "Yes" ]; then
	sudo sed -i '\!^nginx_username_encoded_1 =!{h;s!=.*!= '"$nginx_username_encoded_1"'!};${x;\!^$!{s!!nginx_username_encoded_1 = '"$nginx_username_encoded_1"'!;H};x}' $drawpile_configuration_values_file
	sudo sed -i '\!^nginx_htpasswd_encoded_1 =!{h;s!=.*!= '"$nginx_htpasswd_encoded_1"'!};${x;\!^$!{s!!nginx_htpasswd_encoded_1 = '"$nginx_htpasswd_encoded_1"'!;H};x}' $drawpile_configuration_values_file
elif [ "$nginx_username_password_consent_query" == "n" ] || [ "$nginx_username_password_consent_query" == "N" ] || [ "$nginx_username_password_consent_query" == "no" ] || [ "$nginx_username_password_consent_query" == "NO" ] || [ "$nginx_username_password_consent_query" == "No" ]; then
	# Do nothing as no error was detected. Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
else
	echo "This message should not be visible."
fi
echo
echo '--------------------------------------------------------------------------------'
echo

if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	is_apache_2_installed=$( apt-cache policy apache2 | grep "Installed:" | cut -c 14-40 )
	package_name=apache2
fi
if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
	# https://www.liquidweb.com/kb/how-to-install-apache-on-fedora-21/
	is_apache_2_installed=$( dnf info httpd | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
	installation_status_apache2=$( dnf info httpd | sed -n '2 p' )
	package_name=httpd
	# Installed Packages
	# Available Packages
	# Error: No matching Packages to list
fi

# Apache check
if [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" ]] || [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$port_443_listening" == "LISTEN" ]] || [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" ]] || [[ "$installation_status_apache2" == "Installed Packages" && "$port_443_listening" == "LISTEN" ]] || [[ "$port_80_listening" == "LISTEN" ]] || [[ "$port_443_listening" == "LISTEN" ]]; then
	# Checks if apache is installed and active in non-Fedora with apt-cache, installed and active in Fedora with dnf, or if some generic service using port 80 or port 443.
	if [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" ]] || [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$port_443_listening" == "LISTEN" ]]; then
		# Checks if apache is installed and active in non-Fedora with apt-cache
		sudo sed -i '\!^apache =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache = '"yes"'!;H};x}' $app_installation_status_file
		echo "${red}${bold}Apache2 is installed, version $is_apache_2_installed${normal}"
		if [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
			echo "Port 80 in use, port 443 is not in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
		elif [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" != "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 is not in use, port 443 in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		elif [[ "$is_apache_2_installed" != "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" && "$port_80_listening" == "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 and port 443 are in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "${yellow}This message should not be visible, regarding port 80 and 443.${normal}"
		fi		
	elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" ]] || [[ "$installation_status_apache2" == "Installed Packages" && "$port_443_listening" == "LISTEN" ]]; then
		# Checks if apache is installed and active in Fedora with dnf
		sudo sed -i '\!^apache =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache = '"yes"'!;H};x}' $app_installation_status_file
		echo "${red}${bold}Apache2 is installed, version $is_apache_2_installed${normal}"
		if [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
			echo "Port 80 in use, port 443 is not in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
		elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" != "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 is not in use, port 443 in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" == "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 and port 443 are in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "${yellow}This message should not be visible, regarding port 80 and 443.${normal}"
		fi		
	elif [[ "$port_80_listening" == "LISTEN" ]] || [[ "$port_443_listening" == "LISTEN" ]]; then
		# Checks for some generic service using port 80 or port 443.
		sudo sed -i '\!^apache =!{h;s!=.*!= '"other"'!};${x;\!^$!{s!!apache = '"other"'!;H};x}' $app_installation_status_file
		echo "${red}${bold}Some other website hosting service detected."${normal}
		if [[ "$port_80_listening" == "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
			echo "Port 80 in use, port 443 is not in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
		elif [[ "$port_80_listening" != "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 is not in use, port 443 in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		elif [[ "$port_80_listening" == "LISTEN" && "$port_443_listening" == "LISTEN" ]]; then
			echo "Port 80 and port 443 are in use."
			sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_80 = '"yes"'!;H};x}' $app_installation_status_file
			sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache_port_443 = '"yes"'!;H};x}' $app_installation_status_file
		else
			echo "${yellow}This message should not be visible, regarding port 80 and 443.${normal}"
		fi
	else
		echo "${yellow}Some error occurred in the script.${normal}"
		echo "${yellow}This message should not be visible.${normal}"
	fi
	echo 
	echo "${red}${bold}This will conflict with the existing installation of NGINX.${normal}"
	echo
	echo "In order to avoid a conflict, it is suggested that one of the"
	echo "following actions is taken:"
	echo
	echo "     * The default web page in NGINX is disabled and only to use "
	echo "       the reverse proxy for administrating the drawpile server."
	echo "       You CANNOT use web admin or list server if you do this."
	echo
	echo "     * Leave it enabled and migrate your web configuration to NGINX."
	echo
	echo "     * Migrate the configuration manually over to Apache or other"
	echo "       software."
	echo
	echo "${bold}Please make your selection.${normal}"
	echo "1 - Disable Default Web Page"
	echo "        (Command -- sudo rm /etc/nginx/sites-enabled/default)"
	echo "2 - Do nothing (advanced users only)"
	echo
	while :; do
	read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " nginx_default_config
		[[ $nginx_default_config =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $nginx_default_config >= 1 && $nginx_default_config <= 2)); then
			break
		else
			echo
			echo "${red}${bold}Invalid number selection, try again.${normal}"
			echo
		fi
	done
	echo
	if [ "$nginx_default_config" == "1" ]; then
		sudo rm /etc/nginx/sites-enabled/default
		echo
		echo "Default NGINX website disabled."
	else
		echo "${red}${bold}Doing nothing regarding conflicting installation.${normal}"
	fi
elif [[ "$is_apache_2_installed" = "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
	sudo sed -i '\!^apache =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
	echo "${green}Apache2 or other website hosting service is not installed.${normal}"
	echo "${green}No conflict detected with NGINX web server.${normal}"
elif [[ "$installation_status_apache2" == "Available Packages" && "$port_80_listening" != "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
	sudo sed -i '\!^apache =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
	echo "${green}Apache HTTP server (httpd apparently in Fedora, aka Apache2) or other${normal}"
	echo "${green}website hosting service is not installed. No conflict detected with${normal}"
	echo "${green}NGINX web server.${normal}"
elif [[ "$installation_status_apache2" == "Installed Packages" && "$port_80_listening" != "LISTEN" && "$port_443_listening" != "LISTEN" ]]; then
	sudo sed -i '\!^apache =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!apache = '"yes"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_80 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_80 = '"no"'!;H};x}' $app_installation_status_file
	sudo sed -i '\!^apache_port_443 =!{h;s!=.*!= '"no"'!};${x;\!^$!{s!!apache_port_443 = '"no"'!;H};x}' $app_installation_status_file
	echo "${green}Apache HTTP server (httpd apparently in Fedora, aka Apache2) is installed${normal}"
	echo "${green}but not currently active. No conflict detected with NGINX web server.${normal}"
else
	echo "${yellow}${bold}Cannot determine if Apache2 or other website hosting${normal}"
	echo "${yellow}${bold}service is installed, moving on.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo
# sudo /etc/init.d/nginx restart
# sudo nginx -s reload
# sudo /etc/init.d/nginx restart

sudo systemctl restart nginx
wait $!
sudo nginx -s reload
sudo systemctl restart nginx
wait $!
echo
# This specific step ensures a database file is generated and permissions assigned to it
# so drawpileuser can access it.
echo
sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
# sudo systemctl daemon-reload & sudo systemctl restart systemd-modules-load
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
wait $!
sudo systemctl start --now drawpile-srv.service
wait $!
sudo chmod 770 /home/drawpileuser/server.db
sudo chown drawpileuser /home/drawpileuser/server.db
wait $!
sudo systemctl stop --now drawpile-srv.service
wait $!
sleep 2
# Abuse Report String

if grep 'abuse_report_token_inserted = yes' $drawpile_configuration_values_file > /dev/null; then
	echo "${invis}Report Auth token already inserted into server settings database file.${normal}"
else
	echo "Inserting value into server database file so report mechanism works."
	echo "insert into settings values ('reporttoken', '$abuse_report_auth_token'), ('abusereport', 'true');" | sudo sqlite3 /home/drawpileuser/server.db
	sudo sed -i '\!^abuse_report_token_inserted =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!abuse_report_token_inserted = '"yes"'!;H};x}' $drawpile_configuration_values_file
fi

echo
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo  

if [[ "$ssl_encryption_config" == "3" ]]; then
	# echo 'Press 3 for no SSL security.'
	:
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
elif [[ "$ssl_encryption_config" == "1" ]] || [[ "$ssl_encryption_config" == "2" ]] || [[ "$ssl_encryption_config" != "3" ]] ; then
	# echo 'Press 1 for Self Signed Certificates'
	# echo 'Press 2 for Lets Encrypt'
	# The options below configured the server to use SSL, so restarting Drawpile systemd services would be necessary.
	
	echo "${bold}${cyan}*****Preparing setup for Drawpile List Server . . . *****${normal}"
	echo
	
	if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
		version_golang=$( apt-cache policy golang | grep "Installed:" | cut -c 14-21 )
	fi
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		version_golang=$( dnf info golang | grep -i "Version" | tail -1 | tr -s " " | awk '{ print $3 }' )
		installation_status_golang=$( dnf info golang | sed -n '2 p' )
		# Installed Packages
		# Available Packages
		# Error: No matching Packages to list
	fi
	minimum_version_golang=2:1.15~1
	if [[ "$version_golang" == "(none)" && "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]] && [[ "$version_golang" == "(none)" && "$what_linux_name" != "NAME=Fedora" ]] || [[ "$installation_status_golang" == "Available Packages" ]]; then
		echo "Installing package golang . . ."
		echo
		app_does_not_exist=0
		app_installed=0
		app_not_installed=0
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			progs=(golang);
			package_install_status_check_function
			sudo $package_install_program golang # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			progs=(golang gcc-go golang-bin);
			package_install_status_check_function
			sudo $package_install_program golang gcc-go golang-bin # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
		else
			:
		fi
	else
		echo "Package golang already installed."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	# Type the following to get a list of Go variables/info: go env
	go_path=$( go env GOPATH )
	if [[ -e  "/home/$current_username/go/bin/listserver" ]] || [[ -e  "/home/pi/go/bin/listserver" ]] || [[ -e  "$go_path/bin/listserver" ]]; then
		echo "Drawpile List Server already pulled."
	else
		echo "${bold}${cyan}***** Installing Drawpile List Server . . . *****${normal}"
		echo
		echo "This step may take a while, please be patient."
		echo
		if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
			# Version check provided by askmeaboutloom
			if go version | perl -0777 -ne 'exit(/\bgo([0-9]+\.[0-9]+)\./ && $1 >= 1.16 ? 0 : 1)'; then
				go install 'github.com/drawpile/listserver@latest'
			else
				# go get github.com/drawpile/listserver
				GO111MODULE=on go get 'github.com/drawpile/listserver@latest'
			fi
		fi
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
			package_name=golang
			version_test_by_distro_function
			echo "Go Version: $test_version_simple"
			if [[ "$test_version_simple" = "1.16" ]] || [[ "$test_version_simple" > "1.16" ]]; then
				go install 'github.com/drawpile/listserver@latest'
			elif [[ "$test_version_simple" < "1.16" ]]; then
				GO111MODULE=on go get 'github.com/drawpile/listserver@latest'
			else
				echo "This message for golang's version ($test_version_simple) should not be visible."
			fi
		fi
		# package_name=golang
		# version_test_by_distro_function
		# if [ "$test_version_simple" = "1.16" ] || [ "$test_version_simple" > "1.16" ]; then
		# 	go install 'github.com/drawpile/listserver@latest'
		# elif [ "$test_version_simple" < "1.16" ]; then
		# 	GO111MODULE=on go get 'github.com/drawpile/listserver@latest'
		# else
		# 	echo "This message for golang's version ($test_version_simple) should not be visible."
		# fi
	fi
	
	if [[ ! -e  "/usr/local/bin/listserver" ]]; then
		sudo cp $go_path/bin/listserver /usr/local/bin
	fi
	
	if [[ -e  "$go_path/bin/listserver" ]]; then
		echo "${invis} Located ListServer: $go_path/bin/listserver${normal}"
		go_path_manual=$go_path/bin/listserver
	elif [[ -e  "/home/$current_username/go/bin/listserver" ]]; then
		go_path_manual=/home/$current_username/go
		echo "${invis} Located ListServer: $go_path/bin/listserver${normal}"
	elif [[ -e  "/home/pi/go/bin/listserver" ]]; then
		go_path_manual=/home/pi/go
		echo "${invis} Located ListServer: $go_path/bin/listserver${normal}"
	else
		echo "${bold}${red}Was unable to determine location of listserver.${normal}"
		echo "${bold}${red}This will cause issues with the script.${normal}"
		echo
		sudo free -m
		echo
		echo "Please copy output from terminal for diagnostic purposes."
		# No longer needed I think
		# echo "${bold}${red}Script will exit in 30 seconds.${normal}"
		echo
		sleep 30
		# exit
	fi

	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	list_server_address_listen=127.0.0.1
	list_server_port=8080
	list_server_config_filename=listserverconfig.cfg
	list_server_config_file_location=/home/drawpileuser/$list_server_config_filename

	function invalid_list_server_database_connection_string () {
		echo
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo
		echo "${red}${bold}Invalid number selected, try again. ${normal}"
		echo
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo "${red}${bold}!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!${normal}"
		echo "${red}${bold}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
		echo 
	}

	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------

	function generate_list_server_config_filename () {
		echo "${bold}${cyan}***** Configuring settings for List Server . . . *****${normal}"
		echo
		echo "Please configure how you want the list server to function by selecting the number desired ..."
		echo
		echo "${bold}${yellow}Setting 1 of 11${normal}"
		echo
		echo Possible values:
		if [ "$nginx_username_password_consent_query" == "y" ] || [ "$nginx_username_password_consent_query" == "Y" ] || [ "$nginx_username_password_consent_query" == "yes" ] || [ "$nginx_username_password_consent_query" == "YES" ] || [ "$nginx_username_password_consent_query" == "Yes" ]; then
			echo "1 - none      - listserver will be in read-only mode"
		elif [ "$nginx_username_password_consent_query" == "n" ] || [ "$nginx_username_password_consent_query" == "N" ] || [ "$nginx_username_password_consent_query" == "no" ] || [ "$nginx_username_password_consent_query" == "NO" ] || [ "$nginx_username_password_consent_query" == "No" ]; then
			echo "${bold}${red}1 - none      - listserver will be in read-only mode (includeservers must be set, invalid option)${normal}"
			echo "     The earlier prompt asking to store the password was not consented to store in plain"
			echo "     text format. Therefore this option is not available."
		else
			echo "  -           - ${bold}${red}This message for list server in read-only mode should not be visible.${normal}"
		fi
		# echo "1 - none      - listserver will be in read-only mode (includeservers must be set)"
		echo "2 - memory    - sessions will be lost if server is restarted, but no database needed"
		echo "3 - filename  - keep sessions in a SQLite database. You will be prompted to enter name."
		echo

		while :; do
			read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " list_server_database_connection_string_num
			[[ $list_server_database_connection_string_num =~ ^[1-3]+$ ]] || { invalid_list_server_database_connection_string; continue; }
			if (( "$list_server_database_connection_string_num" >= "1" && "$list_server_database_connection_string_num" <= "3" )) ; then
				if [ "$nginx_username_password_consent_query" == "y" ] || [ "$nginx_username_password_consent_query" == "Y" ] || [ "$nginx_username_password_consent_query" == "yes" ] || [ "$nginx_username_password_consent_query" == "YES" ] || [ "$nginx_username_password_consent_query" == "Yes" ]; then
					if [ "$list_server_database_connection_string_num" == "1" ]; then
						listserver_database_connection_string="none"
						break
					elif [ "$list_server_database_connection_string_num" == "2" ]; then
						listserver_database_connection_string="memory"
						break
					elif [ "$list_server_database_connection_string_num" == "3" ]; then
						echo
						echo "${bold}${cyan} Please select an appropriate database name. ${normal}"
						echo "${bold}${cyan} Do not use spaces or include file extension.  ${normal}"
						echo "${bold}${cyan} Leaving blank will default database to this: ListServerDB  ${normal}"
						echo
						read -r -p "${bold}${cyan}Enter database name now ${normal}: " list_server_database_connection_string_name
						echo
						if [ "$list_server_database_connection_string_name" = "" ]; then
							listserver_database_connection_string="/home/drawpileuser/ListServerDB.db"
							echo "${bold}${cyan}Selected:${normal} $listserver_database_connection_string"
						else
							listserver_database_connection_string=/home/drawpileuser/$list_server_database_connection_string_name.db
							echo "${bold}${cyan}Selected:${normal} $listserver_database_connection_string"
						fi
						break
					else
						echo
						echo "This message should not be visible as an invalid option was provided."
						echo
						invalid_list_server_database_connection_string
					fi
				elif [ "$nginx_username_password_consent_query" == "n" ] || [ "$nginx_username_password_consent_query" == "N" ] || [ "$nginx_username_password_consent_query" == "no" ] || [ "$nginx_username_password_consent_query" == "NO" ] || [ "$nginx_username_password_consent_query" == "No" ]; then
					if [ "$list_server_database_connection_string_num" == "1" ]; then
						echo "${bold}${red}This option is invalid. You did not consent to store the password in plain text format.${normal}"
					elif [ "$list_server_database_connection_string_num" == "2" ]; then
						listserver_database_connection_string="memory"
						break
					elif [ "$list_server_database_connection_string_num" == "3" ]; then
						echo
						echo "${bold}${cyan} Please select an appropriate database name. ${normal}"
						echo "${bold}${cyan} Do not use spaces or include file extension.  ${normal}"
						echo "${bold}${cyan} Leaving blank will default database to this: ListServerDB  ${normal}"
						echo
						read -r -p "${bold}${cyan}Enter database name now ${normal}: " list_server_database_connection_string_name
						echo
						if [ "$list_server_database_connection_string_name" = "" ]; then
							listserver_database_connection_string="/home/drawpileuser/ListServerDB.db"
							echo "${bold}${cyan}Selected:${normal} $listserver_database_connection_string"
						else
							listserver_database_connection_string=/home/drawpileuser/$list_server_database_connection_string_name.db
							echo "${bold}${cyan}Selected:${normal} $listserver_database_connection_string"
						fi
						break
					else
						echo
						echo "This message should not be visible as an invalid option was provided."
						echo
						invalid_list_server_database_connection_string
					fi
				else
					echo "${bold}${red}This message for list server in read-only mode should not be visible.${normal}"
				fi
			else
				invalid_list_server_database_connection_string
			fi
		done
		sudo sed -i '\!^list_server_database_connection_string_num =!{h;s!=.*!= '"$list_server_database_connection_string_num"'!};${x;\!^$!{s!!list_server_database_connection_string_num = '"$list_server_database_connection_string_num"'!;H};x}' $drawpile_configuration_values_file
		wait $!
		sudo sed -i '\!^list_server_database_connection_string_name =!{h;s!=.*!= '"$listserver_database_connection_string"'!};${x;\!^$!{s!!list_server_database_connection_string_name = '"$listserver_database_connection_string"'!;H};x}' $drawpile_configuration_values_file
		wait $!
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 2 of 11${normal}"
		echo
		echo "${bold}${yellow}Optional setting:${normal} Use the default location by typing 1 and hitting enter, leave"
		echo "blank to disable the favicon, or Advanced Users may enter a local location for"
		echo "the favicon file. The default location will be the the following location:"
		echo "     https://$hostname/128.png"
		echo
		function favicon_instructions_function () {
			echo "Please prepare for images in the PNG file type with the filenames listed below."
			echo "Think of this as a logo to represent your server community and show up in the"
			echo "Session, Browse menu (for the beta client)."
			echo
			[[ "$dp_install_loc" == "$script_directory" ]] && echo "Once prepared, please place them here: "
			[[ "$dp_install_loc" == "$script_directory" ]] && echo "     $dp_install_loc"
			[[ "$dp_install_loc" != "$script_directory" ]] && echo "Once prepared, please place in one of these two locations below: "
			[[ "$dp_install_loc" != "$script_directory" ]] && echo "     $script_directory"
			[[ "$dp_install_loc" != "$script_directory" ]] && echo "     $dp_install_loc"
			echo
			echo "The script will handle the rest of the required configuration."
			echo "Using other configurations is not recommended except for advanced users."
			echo
			echo 'Resolution / Filename'
			echo '16x16      / 16.png'
			echo '32x32      / 32.png'
			echo '48x48      / 48.png'
			echo '64x64      / 64.png'
			echo '128x128    / 128.png (maximum size used by DP client)'
		}
		favicon_instructions_function
		echo
		echo "Leaving the field blank will assume there is no icon to be used."
		echo
		read -r -p "${bold}${cyan}Enter a location for the favicon${normal}: " list_server_favicon_location_entry
		echo
		if [ "$list_server_favicon_location_entry" = "" ]; then
			list_server_favicon_toggle="# favicon"
			list_server_favicon_location="\"\""
			echo "${bold}${cyan}Left blank, favicon will not be used.${normal}"
		elif [ "$list_server_favicon_location_entry" = "1" ]; then
			if [ "$ssl_encryption_config" == "1" ]; then
				# echo 'Press 1 for Self Signed Certificates'
				list_server_favicon_toggle="favicon"
				list_server_favicon_location="\"http://$hostname/128.png\""
			elif [ "$ssl_encryption_config" == "2" ] || [ "$ssl_encryption_config" != "1" || "$ssl_encryption_config" != "3" ]; then
				# echo 'Press 2 for Lets Encrypt'
				# echo Invalid option selected. Assuming option 2 intended.
				list_server_favicon_toggle="favicon"
				list_server_favicon_location="\"https://$hostname/128.png\""
			else
				:
				# Do nothing as no error was detected.
				# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			fi
			echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
		else
			list_server_favicon_toggle="favicon"
			list_server_favicon_location="\"$list_server_favicon_location_entry\""
			echo "${bold}${cyan}Selected:${normal} $list_server_favicon_location"
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 3 of 11${normal}"
		echo
		echo "Enter short name for this server, which a user will see when they choose their"
		echo "list server option when hosting their session."
		echo
		echo "If your server name was example.hostwebsite.com, consider using just: example"
		echo
		echo "Your hostname: $hostname"
		echo
		echo "Leaving the field blank will auto select the following: $hostname"
		echo
		read -r -p "${bold}${cyan}Enter a server short name${normal}: " list_server_short_name
		echo
		if [ "$list_server_short_name" = "" ]; then
			list_server_short_name="$hostname"
			echo "${bold}${cyan}Left blank, automatically selected:${normal} $hostname"
		else
			echo "${bold}${cyan}Selected:${normal} $list_server_short_name"
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 4 of 11${normal}"
		echo
		echo "Enter a description for the server a user will see when joining the server"
		echo "directly in the Drawpile client, by typing the server name at the bottom"
		echo "of the menu at Session, settings. Examples below:"
		echo
		echo "Serberus Drawpile Community Network"
		echo "Public Drawpile Server"
		echo "CloudyWave"
		echo "SyntheticDreams"
		echo
		echo "Leaving the field blank will auto select the following: Drawpile Server for $hostname"
		echo
		read -r -p "${bold}${cyan}Enter a server description${normal}: " list_server_description
		echo
		if [ "$list_server_description" = "" ]; then
			list_server_description="Drawpile Server for $hostname"
			echo "${bold}${cyan}Left blank, automatically selected:${normal} Drawpile Server for $hostname"
		else
			echo "${bold}${cyan}Selected:${normal} $list_server_description"
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 5 of 11${normal}"
		echo
		echo "${bold}${yellow}Optional setting:${normal} Enter a welcome message for listing the session"
		echo
		echo "Leaving the field blank will assume there is no welcome message to be used."
		echo
		read -r -p "${bold}${cyan}Enter a welcome message ${normal}: " list_server_welcome_msg
		echo
		if [ "$list_server_welcome_msg" = "" ]; then
			list_server_welcome_msg=""
			echo "${bold}${cyan}Left blank, welcome message will not be used.${normal}"
		else
			echo "${bold}${cyan}Selected:${normal} $list_server_welcome_msg"
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 6 of 11${normal}"
		echo
		echo "${bold}${yellow}Optional setting:${normal} Configure not safe for work auto-flag sessions"
		echo
		echo "Default list is as follows:"
		echo "     \"NSFW\", \"NSFM\", \"18+\", \"18 +\", \"+18\", \"+ 18\", \"R18\","
		echo "     \"R-18\", \"K18\", \"K-18\", \"ERP\", \"DRP\" "
		echo
		echo "Format entries as displayed above. Leaving the field blank will"
		echo "assume to use the default list above."
		echo
		read -r -p "${bold}${cyan} Enter list of NSFW, using the formatting listed above ${normal}: " list_server_nsfm_words_list
		echo
		if [ "$list_server_nsfm_words_list" = "" ]; then
			list_server_nsfm_words_list="\"NSFW\", \"NSFM\", \"18+\", \"18 +\", \"+18\", \"+ 18\", \"R18\", \"R-18\", \"K18\", \"K-18\", \"ERP\", \"DRP\" "
			echo "${bold}${cyan}Left blank, default NSFM words list used.${normal}"
		else
			echo "${bold}${cyan}Selected:${normal} $list_server_nsfm_words_list"
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 7 of 11${normal}"
		echo
		if [ "$list_server_database_connection_string_num" == "1" ]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for max listings per external host. ${normal}: "
			list_server_max_sessions_per_host_toggle=# list_server_max_sessions_per_host
		else
			echo "${bold}${yellow}Optional setting:${normal} Configure the max number of listings for other unspecified servers."
			echo
			echo "For example, server abc could list 3 sessions by default on your $hostname"
			echo "listing server. Leaving the field blank will assume other unspecified servers"
			echo "cannot use your list server. Acceptable inputs (without commas) 1, 6, 10, ..."
			echo
			read -r -p "${bold}${cyan} Enter max number of listings for other unspecified servers ${normal}: " list_server_max_sessions_per_host
			echo
			if [ "$list_server_max_sessions_per_host" = "" ]; then
				list_server_max_sessions_per_host="0"
				list_server_max_sessions_per_host_toggle="# list_server_max_sessions_per_host"
				echo "${bold}${cyan}Left blank, unspecified servers not allowed to list.${normal}"
			else
				list_server_max_sessions_per_host_toggle="list_server_max_sessions_per_host"
				echo "${bold}${cyan}Selected:${normal} $list_server_max_sessions_per_host"
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 8 of 11${normal}"
		echo
		if [ "$list_server_database_connection_string_num" == "1" ]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for max listings per named host. ${normal}: "
			max_sessions_per_named_host_toggle="# max_sessions_per_named_host"
		else
			echo "${bold}${yellow}Optional setting:${normal} Configure the max number of listings for other named servers."
			echo
			echo "For example, server abc could list 3 sessions by default on your $hostname"
			echo "listing server. Leaving the field blank will assume other specifically allowed"
			echo "servers cannot use your list server. Acceptable inputs (without commas) 1, 6, 10, ..."
			echo
			read -r -p "${bold}${cyan} Enter max number of listings for named servers ${normal}: " max_sessions_per_named_host
			echo
			if [ "$max_sessions_per_named_host" = "" ]; then
				max_sessions_per_named_host="0"
				max_sessions_per_named_host_toggle="# max_sessions_per_named_host"
				echo "${bold}${cyan}Left blank, named servers not allowed to list.${normal}"
			else
				max_sessions_per_named_host_toggle="max_sessions_per_named_host"
				echo "${bold}${cyan}Selected:${normal} $max_sessions_per_named_host"
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 9 of 11${normal}"
		echo
		if [ "$list_server_database_connection_string_num" == "1" ]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for server listing limitation. ${normal}: "
			trusted_list_hosts_toggle="# trusted_list_hosts"
		else
			echo "${bold}${yellow}Optional setting:${normal} Configure servers which are exempt from listing limitations"
			echo
			echo "For example:"
			echo "     \"pub.drawpile.net\", \"example.hostwebsite.com\" "
			echo
			echo "Leaving it blank will assume you do not wish to exempt any servers."
			echo
			read -r -p "${bold}${cyan} Enter list servers you wish to exempt from listing limitations ${normal}: " trusted_list_hosts 
			echo
			if [ "$trusted_list_hosts" = "" ]; then
				trusted_list_hosts_toggle="# trusted_list_hosts"
				echo "${bold}${cyan}Left blank, no external servers will be exempt.${normal}"
			else
				trusted_list_hosts_toggle="trusted_list_hosts"
				echo "${bold}${cyan}Selected:${normal} $trusted_list_hosts"
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 10 of 11${normal}"
		echo
		if [ "$list_server_database_connection_string_num" == "1" ]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for servers banned from listing. ${normal}: "
			list_server_banned_hosts_toggle="# list_server_banned_hosts"
		else
			echo "${bold}${yellow}Optional setting:${normal} Configure servers that are banned from listing sessions"
			echo
			echo "For example (Not real servers):"
			echo "     \"trollserver.example.com\", \"drawpile.4chan.com\" "
			echo
			echo "Leaving it blank will assume you do not wish to block any servers from listing."
			echo
			read -r -p "${bold}${cyan} Enter list servers you wish to ban from listing limitations ${normal}: " banned_list_hosts
			echo
			if [ "$banned_list_hosts" = "" ]; then
				list_server_banned_hosts_toggle="# list_server_banned_hosts"
				echo "${bold}${cyan}Left blank, no external servers banned from listing limitations.${normal}"
			else
				list_server_banned_hosts_toggle="list_server_banned_hosts"
				echo "${bold}${cyan}Selected:${normal} $banned_list_hosts"
			fi
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${yellow}Setting 11 of 11${normal}"
		echo
		if [ "$list_server_database_connection_string_num" == "1" ]; then
			echo "${bold}${cyan} Configured in read only mode, skipping setting for minutes passed before session de-listed and use default. ${normal}"
			list_server_delist_time="10"
		else
			echo "${bold}${yellow}Optional setting:${normal} Number of minutes after which a session is automatically de-listed unless refreshed"
			echo "A good example is that a server went offline due to loss of power or internet connection. Or that all"
			echo "users left the session and it closed. Do not select a value under 10 minutes!"
			echo
			echo "For example: 10"
			echo
			echo "Leaving it blank will assume default value of 10 minutes"
			echo
			echo "${bold}${yellow}Note: ${normal}"
			echo "The value can be set to 2 minutes (but not lower), however, drawpile-srv updates the list server every"
			echo "10 minutes. Which means this value should not be under 10, as it will cause issues with people listing"
			echo "sessions on the server that keep disappearing and re-appearing."
			echo
			while :; do
				read -r -p "${bold}${cyan} Enter minutes after which session is automatically de-listed ${normal}: " list_server_delist_time
				echo
				[[ "$list_server_delist_time" = "" || $list_server_delist_time =~ ^[0-9]+$ ]] || { echo "Enter a valid number, 10 or above."; echo; echo '--------------------------------------------------------------------------------'; echo; continue; }
				if [ "$list_server_delist_time" = "" ]; then
					echo "${bold}${cyan}Left blank, assuming default time of 10 minutes.${normal}"
					list_server_delist_time="10"
					break
				elif (( $list_server_delist_time >= 10 && $list_server_delist_time <= 1440 )); then
					echo "${bold}${cyan}Selected:${normal} $list_server_delist_time"
					break
				else
					echo
					echo "Invalid number selection, try again. Selecting a value under 10 minutes"
					echo "will result in list server issues."
					echo
					echo '--------------------------------------------------------------------------------'
					echo
				fi
			done
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}***** Creating List Server Configuration . . . *****${normal}"
		echo
		echo "No messages should show up in this section."
		echo
		if [ "$nginx_username_password_consent_query" == "y" ] || [ "$nginx_username_password_consent_query" == "Y" ] || [ "$nginx_username_password_consent_query" == "yes" ] || [ "$nginx_username_password_consent_query" == "YES" ] || [ "$nginx_username_password_consent_query" == "Yes" ]; then
			list_server_include_servers_username_and_pass="includeservers=[\"http://$nginx_username_encoded_1:$nginx_htpasswd_encoded_1@localhost:27780/api/\"]"
			# list_server_include_servers_username_and_pass="$nginx_username_1:$nginx_htpasswd_1"
		elif [ "$nginx_username_password_consent_query" == "n" ] || [ "$nginx_username_password_consent_query" == "N" ] || [ "$nginx_username_password_consent_query" == "no" ] || [ "$nginx_username_password_consent_query" == "NO" ] || [ "$nginx_username_password_consent_query" == "No" ]; then
			list_server_include_servers_username_and_pass="# includeservers="
			# list_server_include_servers_username_and_pass=""
		else
			echo "This message should not be visible."
		fi
		# Example configuration file
		# https://github.com/drawpile/listserver/blob/master/example.cfg
		cat <<EOF | sudo tee "$script_directory/$list_server_config_filename" >/dev/null
# This is a sample List Server settings file.
# When creating your own site specific configuration,
# set at least the settings in the "important" section.

#### Important settings #####

# HTTP server listening address port
# listen = "127.0.0.1:8080"
listen = "$list_server_address_listen:$list_server_port"

# The database connection string
# Possible values:
# "none"     - listserver will be in read-only mode (includeservers must be set)
# "memory"   - sessions will be lost if server is restarted, but no database needed
# "filename" - keep sessions in a SQLite database
database="$listserver_database_connection_string"

# Include sessions fetched from a drawpile server's admin API (optional)
# includeservers=["http://username:password@localhost:27780/api/"]
$list_server_include_servers_username_and_pass

#
# Note. You should set at least one of database or includeserver settings.
# Otherwise, listserver will do nothing.
#

# The short name of this server (shown in the selection dropdown box)
# name="demo server"
name="$list_server_short_name"

# A longer description of this server
# description="this is a demo listing server"
description="$list_server_description"

# Set this if you're using a reverse proxy like nginx or apache
# proxyheaders = true
remoteAddressHeader = "X-Real-Ip"

##### Optional settings #####

# By default, all origins are allowed to fetch the session list.
# Setting this to an empty list disallows all cross-origin requests.
# If you want to limit this, you may want to at least allow "drawpile.net"
# so the session list can be shown on the community page.
# alloworigins=[]

# URL of an icon that will be shown next to the server name
# favicon = ""
$list_server_favicon_toggle = $list_server_favicon_location

# A message that is sent to the users of the session that was just announced
# welcome = "this session was just announced at the demo list server!"
welcome = "$list_server_welcome_msg"

# Any of these words in the title autotags the session as NSFM
# nsfmWords = [ "NSFW", "18+", "NSFM" ]
nsfmWords = [ $list_server_nsfm_words_list ]

# Allow listed servers using ports < 1024
# allowWellKnownPorts = false
allowWellKnownPorts = false

# Allow only these protocol version to be listed
# protocolWhiteList = [ "15.6", "dp:4.20.1", "dp:4.21.2" ]
protocolWhiteList = [ "15.6", "dp:4.20.1", "dp:4.21.2", "dp:4.24.0" ]

# Allow only this many active listings per host address
$list_server_max_sessions_per_host_toggle = $list_server_max_sessions_per_host

# Allow this many active listings per named host address (this is never less than max_sessions_per_host)
$max_sessions_per_named_host_toggle = $max_sessions_per_named_host

# Trusted hosts are exempt from limits and bans
# trustedHosts = [ "drawpile.net" ]
$trusted_list_hosts_toggle = [ $trusted_list_hosts ]

# Banned hosts can't list here at all
# bannedHosts = [ "trolls.example.com" ]
$list_server_banned_hosts_toggle = [ $banned_list_hosts ]

# Notify users if their host address is an IPv6 address
# This is not necessarily a bad thing, but many people
# still don't have IPv6 capable Internet connections.
# warnIpv6 = true
warnIpv6 = true

# Allow public session listings
# public = true
public = true

# Enable room code generation (private sessions)
# roomcodes = true
roomcodes = true

# Check that there really is a Drawpile server at the announced address
# checkServer = true
checkServer = true

# Number of seconds to wait while connections are still open before shutting down
# Used for testing the list server for development reasons, not needed. 
# shutdownTimeout = 1

# Number of minutes after which a session is automatically delisted unless refreshed
# sessionTimeout = 10
sessionTimeout = $list_server_delist_time

# Log requests?
# logRequests = false
logRequests = false

# Enable administration API?
# Set the environment variable DRAWPILE_LISTSERVER_USER to the username and
# DRAWPILE_LISTSERVER_PASS to the password to allow connecting as an admin user.
# You can create additional accounts from there.
# Not available in read-only mode, there's nothing to administer in it.
# enableAdminApi = true
EOF

		sudo mv "$script_directory/$list_server_config_filename" "$list_server_config_file_location"
	}
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------

	if [[ -e  "/home/drawpileuser/listserverconfig.cfg" ]]; then
		echo "${bold}${cyan}*****List server configuration file exists . . . *****${normal}"
		echo
		echo 'You should regenerate the configuration if you set up a'
		echo 'different username or password for web admin and elected'
		echo 'to store the password in plain text on the server.'
		echo
		echo 'Press 1 to use this existing configuration'
		echo 'Press 2 to re-generate configuration for List Server'
		echo
		echo 'Enter a number and hit enter to continue.'
		echo
		read list_server_config
		echo
		if [ "$list_server_config" == "1" ]; then
			echo "List server configuration file exists, skipping . . ."
		elif [ "$list_server_config" == "2" ]; then
			echo
			echo 'Before removing the configuration file, would you like to view'
			echo 'the content of the file? This is a fairly large document to read.'
			echo
			echo 'Press 1 for yes'
			echo 'Press 2 for no'
			echo
			read list_server_config_contents
			echo
			if [ "$list_server_config_contents" == "1" ]; then
				echo Reading contents of "$list_server_config_file_location"
				echo
				sudo cat "$list_server_config_file_location"
			elif [ "$list_server_config_contents" == "2" ]; then
				echo Not reading file contents in Bash Terminal. Removing file.
			else
				echo Invalid option selected.
				echo Not reading file contents in Bash Terminal. Removing file.
			fi
			echo
			sudo systemctl stop --now drawpile-listserver.service
			wait $!
			sudo rm -r -f "$list_server_config_file_location"
			generate_list_server_config_filename
			sudo systemctl start --now drawpile-listserver.service
			wait $!
		else
			echo Invalid option selected.
			echo List server configuration file exists, skipping . . .
		fi
	else
		generate_list_server_config_filename
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Running SystemD configuration for List Server . . .*****${normal}"
	echo
	cat <<EOF | sudo tee /etc/systemd/system/drawpile-listserver.service >/dev/null
[Unit]
Description=Drawpile statistics proxy
After=network.target

[Service]
ExecStart=/usr/local/bin/listserver -c $list_server_config_file_location
# ExecStart=$go_path_manual/bin/listserver -c $list_server_config_file_location
User=drawpileuser

[Install]
WantedBy=multi-user.target
EOF

	sudo systemctl enable --now drawpile-listserver.service
	wait $!
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo
	echo "${bold}${cyan}*****Displaying Drawpile List Server Status . . .*****${normal}"
	echo
	systemctl status drawpile-listserver.service --no-pager
	wait $!
	echo
	pause
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'

	function favicon_copy_function () {
		if [[ -e  "$dp_install_loc/16.png" ]]; then
			sudo cp $dp_install_loc/16.png /var/www/html/drawpile/16.png
		elif [[ -e  "$script_directory/16.png" ]]; then
			sudo cp $script_directory/16.png /var/www/html/drawpile/16.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '16x16      / 16.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/16.png" ]]; then
				sudo cp $dp_install_loc/16.png /var/www/html/drawpile/16.png
			elif [[ -e  "$script_directory/16.png" ]]; then
				sudo cp $script_directory/16.png /var/www/html/drawpile/16.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/32.png" ]]; then
			sudo cp $dp_install_loc/32.png /var/www/html/drawpile/32.png
		elif [[ -e  "$script_directory/32.png" ]]; then
			sudo cp $script_directory/32.png /var/www/html/drawpile/32.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '32x32      / 32.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/32.png" ]]; then
				sudo cp $dp_install_loc/32.png /var/www/html/drawpile/32.png
			elif [[ -e  "$script_directory/32.png" ]]; then
				sudo cp $script_directory/32.png /var/www/html/drawpile/32.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/48.png" ]]; then
			sudo cp $dp_install_loc/48.png /var/www/html/drawpile/48.png
		elif [[ -e  "$script_directory/48.png" ]]; then
			sudo cp $script_directory/48.png /var/www/html/drawpile/48.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '48x48      / 48.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/48.png" ]]; then
				sudo cp $dp_install_loc/48.png /var/www/html/drawpile/48.png
			elif [[ -e  "$script_directory/48.png" ]]; then
				sudo cp $script_directory/48.png /var/www/html/drawpile/48.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/64.png" ]]; then
			sudo cp $dp_install_loc/64.png /var/www/html/drawpile/64.png
		elif [[ -e  "$script_directory/64.png" ]]; then
			sudo cp $script_directory/64.png /var/www/html/drawpile/64.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '64x64      / 64.png'
			echo
			pause
			if [[ -e  "$dp_install_loc/64.png" ]]; then
				sudo cp $dp_install_loc/64.png /var/www/html/drawpile/64.png
			elif [[ -e  "$script_directory/64.png" ]]; then
				sudo cp $script_directory/64.png /var/www/html/drawpile/64.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		if [[ -e  "$dp_install_loc/128.png" ]]; then
			sudo cp $dp_install_loc/128.png /var/www/html/drawpile/128.png
		elif [[ -e  "$script_directory/128.png" ]]; then
			sudo cp $script_directory/128.png /var/www/html/drawpile/128.png
		else
			favicon_instructions_function
			echo
			echo "Once ready with the file below, press any key to continue."
			echo '128x128    / 128.png (maximum size used by DP client)'
			echo
			pause
			if [[ -e  "$dp_install_loc/128.png" ]]; then
				sudo cp $dp_install_loc/128.png /var/www/html/drawpile/128.png
			elif [[ -e  "$script_directory/128.png" ]]; then
				sudo cp $script_directory/128.png /var/www/html/drawpile/128.png
			else
				echo "Ok, fine, find out what happens when you don't read instructions."
				echo "Exiting script."
				pause
				exit
			fi
		fi
		
		sudo chmod 754 /var/www/html/drawpile/16.png
		sudo chmod 754 /var/www/html/drawpile/32.png
		sudo chmod 754 /var/www/html/drawpile/48.png
		sudo chmod 754 /var/www/html/drawpile/64.png
		sudo chmod 754 /var/www/html/drawpile/128.png
	}
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Running NGINX Configuration for List Server . . .*****${normal}"
	echo
	
	if [ "$ssl_encryption_config" == "1" ]; then
		# echo 'Press 1 for Self Signed Certificates'
		
		# LISTEVER CONFIG - NEED TO CHANGE FAVICON FROM HTTPS TO HTTP

		sudo mkdir -p /var/www/html/drawpile && cd "$_"
		curl -s -L https://github.com/drawpile/dpserver/tarball/master | sudo tar xz --strip-components 2 --wildcards "*/public_html"
		echo
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "${bold}${cyan}*****Editing index.html file for list server . . .${normal}*****"
		echo
		# --------------------------------------------------------------------------------
		# This section below set to modify List server page with server specific information.
		sudo sed -i -e "s/<title>Drawpile Public Community<\/title>/<title>$hostname Server<\/title>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<title>Drawpile Public Community<\/title>/<title>example.hostwebsite.com Community Server<\/title>/g' /var/www/html/drawpile/index.html

		sudo sed -i -e "s/https:\/\/__DOMAIN__\/listing\//http:\/\/$hostname\/listing\//g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/https:\/\/__DOMAIN__\/listing\//http:\/\/example.hostwebsite.com\/listing\//g' /home/pi/Public/index.html

		sudo sed -i -e "s/<code>pub.drawpile.net<\/code>/<code>$hostname<\/code>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<code>pub.drawpile.net<\/code> /<code>example.hostwebsite.com<\/code>/g' /var/www/html/drawpile/index.html
		echo
		echo "${bold}${cyan}Would you like NSFM sessions to show up on the web page for the list server?${normal}"
		echo "Leaving this blank will default to (N)o."
		echo
		echo " (Y)es - Show NSFM sessions on the web page for list server."
		echo " (N)o  - Do not show NSFM sessions on the web page for list server."
		echo
		while :; do
			read -r -p "${bold}${red}Type (y)es to allow NSFM listings, or (n)o to hide:${normal} " toggle_nsfm_on_list_server_web_page
			echo
			if [ "$toggle_nsfm_on_list_server_web_page" == "y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "YES" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "n" ] || [ "$toggle_nsfm_on_list_server_web_page" == "N" ] || [ "$toggle_nsfm_on_list_server_web_page" == "no" ] || [ "$toggle_nsfm_on_list_server_web_page" == "NO" ] || [ "$toggle_nsfm_on_list_server_web_page" == "No" ] || [ "$toggle_nsfm_on_list_server_web_page" == "" ]; then
				break
			else
				echo
				echo "${bold}${red}Invalid input selection, try again.${normal}"
				echo
				echo ----------------------------------------------------------------------------------
				echo
			fi
		done
		if [ "$toggle_nsfm_on_list_server_web_page" == "y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Y" ] || [ "$toggle_nsfm_on_list_server_web_page" == "yes" ] || [ "$toggle_nsfm_on_list_server_web_page" == "YES" ] || [ "$toggle_nsfm_on_list_server_web_page" == "Yes" ]; then
			echo "${bold}${red}Show NSFM sessions on list server web page.${normal}"
			sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"\/listing\/sessions\/?nsfm=true\"/g" /var/www/html/drawpile/index.html
		elif [ "$toggle_nsfm_on_list_server_web_page" == "n" ] || [ "$toggle_nsfm_on_list_server_web_page" == "N" ] || [ "$toggle_nsfm_on_list_server_web_page" == "no" ] || [ "$toggle_nsfm_on_list_server_web_page" == "NO" ] || [ "$toggle_nsfm_on_list_server_web_page" == "No" ]; then
			echo "${bold}${cyan}Do not show NSFM sessions on list server web page.${normal}"
		else
			echo "${bold}${cyan}Left blank. Will not show NSFM sessions on list server web page.${normal}"
		fi
		# Previous version before I realized I didn't need to specify the website name....
		# sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"https:\/\/$hostname\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		# Original
		# sudo sed -i -e 's/list-url="\/listing\/sessions\/"/list-url="http:\/\/example.hostwebsite.com\/listing\/sessions\/"/g' /home/pi/Public/index.html
		# --------------------------------------------------------------------------------
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "*****${bold}${cyan}Preparing Favicon Setup . . .${normal}*****"
		echo
		if [ "$list_server_favicon_location_entry" = "" ]; then
			echo "${bold}${cyan}Selected nothing, favicon will not be used. Skipping.${normal}"
			# Do nothing as no error was detected.
			# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		elif [ "$list_server_favicon_location_entry" = "1" ]; then
			echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
			echo
			favicon_copy_function
			sudo sed -i '\!<link rel="stylesheet" href="/css/styles.css">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/128.png" sizes="128x128">!;H};x}' /var/www/html/drawpile/index.html
			sleep 5
		else
			echo "${bold}${cyan}Selected Custom location:${normal} $list_server_favicon_location"
			echo
			echo Edit the index.html file located: /var/www/html/drawpile
			echo You can do so with this command : sudo nano /var/www/html/drawpile/index.html
			echo
			echo Edit the values noted below, editing the filename for "href=" to 
			echo match the filenames and path you decided to use earlier that
			echo is noted above. 
			echo
			echo '<link rel="icon" type="image/png" href="/16.png" sizes="16x16">'
			echo '<link rel="icon" type="image/png" href="/32.png" sizes="32x32">'
			echo '<link rel="icon" type="image/png" href="/48.png" sizes="48x48">'
			echo '<link rel="icon" type="image/png" href="/64.png" sizes="64x64">'
			echo '<link rel="icon" type="image/png" href="/128.png" sizes="128x128">'
			echo
			echo No further guidance will be provided. When you are ready to continue...
		fi

		cat <<EOF | sudo tee /etc/nginx/conf.d/localsite.conf >/dev/null
server {
	listen *:80;
	listen [::]:80;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	error_log /var/log/nginx/localsite.error_log info;
	
	location / {
		try_files \$uri \$uri/ =404;
	}
	
	location /listing/ {
		proxy_pass http://127.0.0.1:8080/;
		proxy_redirect default;
		proxy_set_header X-Real-IP \$remote_addr;
	}
	
	location /admin/ {
		return 301 https://\$server_name\$request_uri;
	}
}

server {
	listen *:443 ssl;
	listen [::]:443 ssl;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	ssl_certificate $ssl_certificate;
	ssl_certificate_key $ssl_private_cert_key;

	location / {
		return 301 http://\$server_name\$request_uri;
	}

	location /admin/ {
		auth_basic "admin";
		auth_basic_user_file /etc/nginx/passwords;
		try_files \$uri /admin/index.html =404;
		
		location /admin/api/ {
			proxy_pass http://127.0.0.1:27780/api/;
			proxy_redirect default;
		}
	}
	location /listing/ {
		return 301 http://\$server_name\$request_uri;
	}

	location /listing/sessions/ {
		proxy_pass http://127.0.0.1:8080/sessions/;
		proxy_redirect default;
		proxy_set_header X-Real-IP \$remote_addr;
	}
}
EOF
	elif [ "$ssl_encryption_config" == "2" ] || [ "$ssl_encryption_config" != "1" || "$ssl_encryption_config" != "3" ]; then
		# echo 'Press 2 for Lets Encrypt'
		# echo Invalid option selected. Assuming option 2 intended.
		echo
		sudo mkdir -p /var/www/html/drawpile && cd "$_"
		curl -s -L https://github.com/drawpile/dpserver/tarball/master | sudo tar xz --strip-components 2 --wildcards "*/public_html"
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "*****${bold}${cyan}Editing index.html file for list server . . .${normal}*****"
		echo
		# --------------------------------------------------------------------------------
		# This section below set to modify List server page with server specific information.
		sudo sed -i -e "s/<title>Drawpile Public Community<\/title>/<title>$hostname Server<\/title>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<title>Drawpile Public Community<\/title>/<title>example.hostwebsite.com Community Server<\/title>/g' /var/www/html/drawpile/index.html

		sudo sed -i -e "s/https:\/\/__DOMAIN__\/listing\//https:\/\/$hostname\/listing\//g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/https:\/\/__DOMAIN__\/listing\//https:\/\/example.hostwebsite.com\/listing\//g' /home/pi/Public/index.html

		sudo sed -i -e "s/<code>pub.drawpile.net<\/code>/<code>$hostname<\/code>/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/<code>pub.drawpile.net<\/code> /<code>example.hostwebsite.com<\/code>/g' /var/www/html/drawpile/index.html

		sudo sed -i -e "s/list-url=\"\/listing\/sessions\/\"/list-url=\"https:\/\/$hostname\/listing\/sessions\/\"/g" /var/www/html/drawpile/index.html
		# sudo sed -i -e 's/list-url="\/listing\/sessions\/"/list-url="https:\/\/example.hostwebsite.com\/listing\/sessions\/"/g' /home/pi/Public/index.html
		# --------------------------------------------------------------------------------
		echo '--------------------------------------------------------------------------------'
		echo
		echo "*****${bold}${cyan}Preparing Favicon Setup . . .${normal}*****"
		echo
		if [ "$list_server_favicon_location_entry" = "" ]; then
			echo "${bold}${cyan}Selected nothing, favicon will not be used. Skipping.${normal}"
			# Do nothing as no error was detected.
			# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
			:
		elif [ "$list_server_favicon_location_entry" = "1" ]; then
			echo "${bold}${cyan}Selected 1, favicon will use default value to be configured in script.${normal}"
			echo
			favicon_copy_function
			sudo sed -i '\!<link rel="stylesheet" href="/css/styles.css">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/16.png" sizes="16x16">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/32.png" sizes="32x32">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/48.png" sizes="48x48">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!;H};x}' /var/www/html/drawpile/index.html
			sudo sed -i '\!	<link rel="icon" type="image/png" href="/64.png" sizes="64x64">!{x;\!^$!{s!!	<link rel="icon" type="image/png" href="/128.png" sizes="128x128">!;H};x}' /var/www/html/drawpile/index.html
			sleep 5
		else
			echo "${bold}${cyan}Selected Custom location:${normal} $list_server_favicon_location"
			echo
			echo Edit the index.html file located: /var/www/html/drawpile
			echo You can do so with this command : sudo nano /var/www/html/drawpile/index.html
			echo
			echo Edit the values noted below, editing the filename for "href=" to 
			echo match the filenames and path you decided to use earlier that
			echo is noted above. 
			echo
			echo '<link rel="icon" type="image/png" href="/16.png" sizes="16x16">'
			echo '<link rel="icon" type="image/png" href="/32.png" sizes="32x32">'
			echo '<link rel="icon" type="image/png" href="/48.png" sizes="48x48">'
			echo '<link rel="icon" type="image/png" href="/64.png" sizes="64x64">'
			echo '<link rel="icon" type="image/png" href="/128.png" sizes="128x128">'
			echo
			echo No further guidance will be provided. When you are ready to continue...
			echo
			pause
		fi
		echo
		echo '--------------------------------------------------------------------------------'
		echo
		echo "*****${bold}${cyan}Generating systemd configuration for list server and web admin. . .${normal}*****"
		echo
	cat <<EOF | sudo tee -a /etc/nginx/conf.d/localsite.conf >/dev/null                                                                      
server {
        listen *:80;
        listen [::]:80;

        root /var/www/html/drawpile;

        location / {
                return 307 https://\$host:443\$request_uri;
                # return 307 https://$request_uri;
                # try_files $uri $uri/ =404;
        }

        location /.well-known/acme-challenge/ {
                # root /var/www/certbot;
				root /etc/letsencrypt/renewal;
        }
}

server {
	# listen *:80;
	# listen [::]:80;
	listen *:443 ssl;
	listen [::]:443 ssl;
	
	server_name $hostname;
	root /var/www/html/drawpile;
	
	ssl_certificate $ssl_certificate;
	ssl_certificate_key $ssl_private_cert_key;
	
	location / {
			try_files \$uri \$uri/ =404;
	}
	
	location /admin/ {
			auth_basic "admin";
			auth_basic_user_file /etc/nginx/passwords;
			try_files \$uri /admin/index.html =404;
			location /admin/api/ {
					proxy_pass http://127.0.0.1:27780/api/;
					proxy_redirect default;
			}
	}
	
	location /listing/ {
			proxy_pass http://127.0.0.1:8080/;
			proxy_redirect default;
			proxy_set_header X-Real-IP \$remote_addr;
	}
}
EOF
		# sudo systemctl enable --now nginx
		# nginx -t -c /etc/nginx/nginx.conf

		# echo Create a password to access the admin panel under http://$hostname/admin/api
		# sudo sh -c "openssl passwd -apr1" | sudo tee -a /etc/nginx/passwords
		# sudo sed -i -e 's/^/admin:/' /etc/nginx/passwords
	else
		:
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	fi

	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	# sudo systemctl restart drawpile-listserver.service & systemctl status drawpile-listserver.service --no-pager
	sudo systemctl restart drawpile-listserver.service
	systemctl status drawpile-listserver.service --no-pager
	wait $!
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	# sudo systemctl daemon-reload & sudo systemctl restart systemd-modules-load & sudo nginx -s reload & sudo systemctl restart nginx.service & systemctl status nginx.service --no-pager
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	sudo nginx -s reload
	sudo systemctl restart nginx.service
	systemctl status nginx.service --no-pager
	wait $!
	echo
	echo '--------------------------------------------------------------------------------'
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Configuring Web Admin interface . . .*****${normal}"
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Checking for Node.JS installation and version . . . (Install 1 of 2) *****${normal}"
	echo
	function nodejs_warning_raspbian_for_desktop_x86_64_only () {
		echo "**********************************************************************************"
		echo
		echo "${bold}${red}### WARNING ###"
		echo "${bold}${red}DO NOT EXPOSE NODE-RED TO THE OPEN INTERNET WITHOUT SECURING IT FIRST${normal}"
		echo 
		echo "${bold}${red}Even if your Node-RED does not have anything valuable, (automated) attacks will${normal}"
		echo "${bold}${red}happen and could provide a foothold in your local network"
		echo 
		echo "${bold}${red}Follow the guide at https://nodered.org/docs/user-guide/runtime/securing-node-red${normal}"
		echo "${bold}${red}to setup security.${normal}"
		echo 
		echo "### ADDITIONAL RECOMMENDATIONS ###"
		echo " - Remove the /etc/sudoers.d/010_pi-nopasswd file to require entering your password"
		echo "   when performing any sudo/root commands:"
		echo 
		echo "sudo rm -f /etc/sudoers.d/010_pi-nopasswd"
		echo 
		echo " - You can customise the initial settings by running:"
		echo 
		echo "  node-red admin init"
		echo 
		echo " - After running Node-RED for the first time, change the ownership of the settings"
		echo "   file to 'root' to prevent unauthorised changes:"
		echo 
		echo "	  sudo chown root:root ~/.node-red/settings.js"
		echo
		**********************************************************************************
	}

	function install_or_update_nodejs () {
		echo
		echo "Running apt update and apt upgrade"
		echo
		# Node must be version 14 or higher, has version 12 by default on latest version of Rasbpian...
		# https://pimylifeup.com/raspberry-pi-nodejs/
		# node --version
		sudo $packages_update_program
		sudo $packages_system_upgrade
		echo
		app_does_not_exist=0
		app_installed=0
		app_not_installed=0
		progs=(nodejs);
		package_install_status_check_function
		echo
		
		package_name=nodejs
		minimum_versionnodejs=14.0.0
		if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ] && [ "$verify_pi_model" == "Raspberry Pi Zero W" ]; then
			echo "${bold}${red}Pi Zero can only get to NodeJS version 10 by default. That's${normal}"
			echo "${bold}${red}a pretty big problem since we need at least version 14 or later.${normal}"
			echo
			echo "Would you like to try an unofficial install of NodeJS LTS?"
			echo "Note that this has not currently been tested by the maker of"
			echo "this script, this was something that someone else tried as they"
			echo "wanted to run it on a Pi Zero W. Do this at your own risk!"
			echo
			echo "Read more here --> https://gist.github.com/mandrean/71f2cbf707025a5983c0fc04d78f3e9a"
			echo 
			read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " pi_zero_nodejs
			echo
			if [ "$pi_zero_nodejs" == "yes" ] || [ "$pi_zero_nodejs" == "YES" ] || [ "$pi_zero_nodejs" == "Yes" ] ; then
				# update system
				sudo apt update && sudo apt upgrade
				#
				# uninstall old node (v10?)
				sudo apt remove nodejs npm -y
				#
				# install nvm
				curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.2/install.sh | bash
				#
				# use 'unofficial builds' in nvm
				echo "export NVM_NODEJS_ORG_MIRROR=https://unofficial-builds.nodejs.org/download/release" >> ~/.bashrc
				#
				# reload bashrc
				source ~/.bashrc
				#
				# install latest LTS
				nvm install --lts
				nvm use --lts
				#
				# verify versions
				node -v
				npm -v
			elif [ "$pi_zero_nodejs" == "no" ] || [ "$pi_zero_nodejs" == "NO" ] || [ "$pi_zero_nodejs" == "No" ] ; then
				echo "Skipping Node.JS Installation for Pi Zero W . . ."
			else
				echo "Invalid selection option, skipping installation of unofficial NodeJS LTS."
				pi_zero_nodejs=no
			fi
		else
			if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]; then
				# Raspbian for Desktop
				echo "${bold}${cyan}Installing NodeJS from Node-Red Script (need 32 bit binary)${normal}"
				echo
				# Acquired from - https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered
				nodered_install_log=nodered-install.log
				tgtl18=18.4.0    # need x86 latest from https://unofficial-builds.nodejs.org/download/release/
				tgtl=$tgtl18
				tgta18=18.16.1    # need armv6l latest from https://unofficial-builds.nodejs.org/download/release/
				tgta=$tgta18
				echo "Using 32bit nodejs" | sudo tee -a /var/log/$nodered_install_log >>/dev/null
				curl -sSL -o /tmp/node.tgz https://unofficial-builds.nodejs.org/download/release/v$tgtl/node-v$tgtl-linux-x86.tar.gz 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null
				# unpack it into the correct places
				hd=$(head -c 9 /tmp/node.tgz)
				if [ "$hd" == "<!DOCT" ] || [ "$hd" == "<html>" ]; then
					CHAR="$CROSS File $f not downloaded";
				else
					if [[ -d /tmp/nodejs ]]; then
						sudo rm -rf /tmp/nodejs
					fi
					mkdir -p /tmp/nodejs
					sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /tmp/nodejs
					sudo chown -R 0:0 /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					if sudo cp -PR /tmp/nodejs/* /usr/ 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
					sudo rm -rf /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					# if sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /usr 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
				fi
				# rm /tmp/node.tgz 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
				echo "  Install Node.js for i686            $CHAR"
				echo
				echo "Installed version is . . ."
				node -v
				echo
				test_installation_status="Installed"
				test_version=$(node -v | cut -c 2-100)
			
<<comment_EOF_delete
			echo "${bold}${cyan}Would you like to try (1) Node-RED Install or just update (2) nodejs which may not work?${normal}"
			echo
			read nodejs_or_red
			if [ "$nodejs_or_red" == "1" ]; then
				echo "Adding Node.JS repository to get latest version . . ."
				echo
				# sudo curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
				bash <(curl -sL https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered) --node18
				# Search for the line below for cleanup.
				# echo "${bold}${cyan}*****Cleanup on Raspbian for Desktop . . . (Final Step)*****${normal}"
				test_installation_status="Installed"
				test_version=$(node -v | cut -c 2-100)
			else
				# Acquired from - https://raw.githubusercontent.com/node-red/linux-installers/master/deb/update-nodejs-and-nodered
				nodered_install_log=nodered-install.log
				tgtl18=18.4.0    # need x86 latest from https://unofficial-builds.nodejs.org/download/release/
                tgtl=$tgtl18
				tgta18=18.16.1    # need armv6l latest from https://unofficial-builds.nodejs.org/download/release/
                tgta=$tgta18
				echo "Using 32bit nodejs" | sudo tee -a /var/log/$nodered_install_log >>/dev/null
				curl -sSL -o /tmp/node.tgz https://unofficial-builds.nodejs.org/download/release/v$tgtl/node-v$tgtl-linux-x86.tar.gz 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null
				# unpack it into the correct places
				hd=$(head -c 9 /tmp/node.tgz)
				if [ "$hd" == "<!DOCT" ] || [ "$hd" == "<html>" ]; then
					CHAR="$CROSS File $f not downloaded";
				else
					if [[ -d /tmp/nodejs ]]; then
						sudo rm -rf /tmp/nodejs
					fi
					mkdir -p /tmp/nodejs
					sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /tmp/nodejs
					sudo chown -R 0:0 /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					if sudo cp -PR /tmp/nodejs/* /usr/ 2>&1 | sudo tee -a /var/log/$nodered_install_log >>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
					sudo rm -rf /tmp/nodejs 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
					# if sudo tar -zxof /tmp/node.tgz --strip-components=1 -C /usr 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null; then CHAR=$TICK; else CHAR=$CROSS; fi
				fi
				rm /tmp/node.tgz 2>&1 | sudo tee -a /var/log/$nodered_install_log>>/dev/null
				echo "  Install Node.js for i686            $CHAR"
				echo
				echo "Installed version is . . ."
				node -v
				echo
				test_installation_status="Installed"
				test_version=$(node -v | cut -c 2-100)
			fi
comment_EOF_delete
			elif [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]] || [[ ( "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ) && ( "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ) && "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ]]; then
				# Should work for Ubuntu, Debian, and Raspbian for ARM, but NOT Raspbian for Desktop
				# https://github.com/nodesource/distributions
				# https://github.com/nodesource/distributions#debian-and-ubuntu-based-distributions
				sudo apt-get update
				sudo apt-get install -y ca-certificates curl gnupg
				sudo mkdir -p /etc/apt/keyrings
				curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | sudo gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg
				NODE_MAJOR=18
				# NODE_MAJOR=20
				echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_$NODE_MAJOR.x nodistro main" | sudo tee /etc/apt/sources.list.d/nodesource.list
				sudo apt-get update
				sudo apt-get install nodejs -y
				version_test_by_distro_function
			elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				# https://github.com/nodesource/distributions
				# https://github.com/nodesource/distributions#fedora-versions
				#
				# NODE_MAJOR=18 --> Label only, do not need to uncomment, can uncomment below if wishing to activate
				sudo yum install https://rpm.nodesource.com/pub_18.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y
				sudo yum install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1
				#
				# NODE_MAJOR=20 --> Label only, do not need to uncomment, can uncomment below if wishing to activate
				# sudo yum install https://rpm.nodesource.com/pub_20.x/nodistro/repo/nodesource-release-nodistro-1.noarch.rpm -y
				# sudo yum install nodejs -y --setopt=nodesource-nodejs.module_hotfixes=1
				version_test_by_distro_function
			elif [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]]; then
				# See the "SCRIPT DEPRECATION WARNING" in the 'else' section below.
				echo "Adding Node.JS repository to get latest version . . ."
				echo
				
				sudo curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
				echo
				echo "Installing/updating Node.JS . . ."
				sudo $package_install_program nodejs # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				echo
				echo "Installed version is . . ."
				node -v
				echo
				version_test_by_distro_function
			else
				#						SCRIPT DEPRECATION WARNING                   
				#	This script, located at https://deb.nodesource.com/setup_X, used to
				#	install Node.js is deprecated now and will eventually be made inactive.
				#
				#	Please visit the NodeSource distributions Github and follow the
				#	instructions to migrate your repo.
				#	https://github.com/nodesource/distributions
				#
				#	The NodeSource Node.js Linux distributions GitHub repository contains
				#	information about which versions of Node.js and which Linux distributions
				#	are supported and how to install it.
				#	https://github.com/nodesource/distributions
				#						SCRIPT DEPRECATION WARNING
				echo "Adding Node.JS repository to get latest version . . ."
				echo
				sudo curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
				sleep 20
				echo
				echo "Installing/updating Node.JS . . ."
				sudo $package_install_program nodejs # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
				echo
				echo "Installed version is . . ."
				node -v
				echo
				version_test_by_distro_function
			fi
		fi
		if [[ "$test_installation_status" = "Not Installed" ]]; then
			echo "${bold}${red}Failed to install . . .${normal}"
			echo "${bold}${red}The web admin interface will not work!${normal}"
			echo
			sleep 30
		elif [[ "$test_version" < "$minimum_versionnodejs" ]]; then
			echo "${bold}${red}Failed to update past minimum version $minimum_versionnodejs . . .${normal}"
			echo "${bold}${red}The web admin interface will not work!${normal}"
			echo
			sleep 30
		elif [[ "$test_version" = "$minimum_versionnodejs" ]]; then
			echo "${bold}${red}Meets minimum version $minimum_versionnodejs requirements for Node . . .${normal}"
			echo "${bold}${green}The web admin interface should work!${normal}"
			echo
			sleep 5
		elif [[ "$test_version" > "$minimum_versionnodejs" ]]; then
			echo "${bold}${green}Updated successfully past minimum version $minimum_versionnodejs . . .${normal}"
			echo "${bold}${green}The web admin interface should work!${normal}"
			echo
			sleep 5
		else
			echo "This message should not be visible."
			echo
			echo "Package nodejs installed version: "
			node -v
			sleep 10
		fi
	}

	# versionnodejs=$( apt-cache policy nodejs | grep "Installed:" | cut -c 14-20 )
	package_name=nodejs
	version_test_by_distro_function
	minimum_versionnodejs=14.0.0
	if [[ "$test_installation_status" = "Not Installed" ]]; then
		echo "Preparing to install package node.js . . ."
		echo Version installed is $test_version . . .
		echo
		install_or_update_nodejs
	elif [[ "$test_version" < "$minimum_versionnodejs" ]]; then
		echo "Preparing to update package node.js . . ."
		echo Version installed is $test_version . . .
		echo
		install_or_update_nodejs
	else
		echo "Package nodejs already installed."
		echo Version installed is $test_version . . .
		echo Status: $test_installation_status
		echo
		node -v
		echo
		install_or_update_nodejs
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	function install_or_update_npm () {
		if [ "$what_linux_name" != "NAME=\"Ubuntu\"" ]; then
			# You do not need to install npm when installing nodejs from nodesource, as it already includes npm.
			# https://askubuntu.com/questions/899756/cant-install-npm-unable-to-correct-problems-you-have-held-broken-packages
			echo "${bold}${cyan}*****Checking for NPM installation . . . (Install 2 of 2) *****${normal}"
			echo
			echo "Installing package npm . . ."
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			if [[ "$what_linux_name" != "NAME=\"Fedora Linux\"" && "$what_linux_name" != "NAME=Fedora" ]]; then
				progs=(npm);
				package_install_status_check_function
				sudo $package_install_program npm # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			elif [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
				progs=(nodejs-npm);
				package_install_status_check_function
				sudo $package_install_program nodejs-npm # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			else
				:
			fi
		fi
	}
	package_name=npm
	test_side_load_installation_status="Installed"
	command -v $package_name > /dev/null 2>&1 || type $package_name > /dev/null 2>&1 || hash $package_name 2>/dev/null || test_side_load_installation_status="Not Installed"
	if [[ "$test_side_load_installation_status" = "Not Installed" ]]; then
		install_or_update_npm
	elif [[ "$test_side_load_installation_status" = "Installed" ]]; then
		echo "${bold}${cyan}*****Checking for NPM installation . . . (Install 2 of 2) *****${normal}"
		echo
		echo "Skipping installation of NPM, already installed with NodeJS and gets broken "
		echo "packages message on install attempt in Ubuntu."
	else
		echo "This message should not be visible for NPM."
	fi
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Downloading Web Admin interface . . . (Step 1 of 6) *****${normal}"
	echo
	if [[ -d  "$dp_install_loc/Programs/dpwebadmin" ]]; then
		# echo "Drawpile Web Admin already pulled, changing directory..."
		# cd "$dp_install_loc/Programs/dpwebadmin/src"
		echo Download detected of Drawpile Admin, removing content before downloading.
		rm -f -R "$dp_install_loc/Programs/dpwebadmin"
	fi
	echo Downloading dp web admin from github.
	echo
	cd "$dp_install_loc/Programs"
	git clone https://github.com/drawpile/dpwebadmin.git
	cd "$dp_install_loc/Programs/dpwebadmin"
	# Doesn't work
	# drawpile_dp_webadmin_version_with_git=$( git describe )
	# sudo sed -i '\!^drawpile_dp_webadmin_version_with_git =!{h;s!=.*!= '"$drawpile_dp_webadmin_version_with_git"'!};${x;\!^$!{s!!drawpile_dp_webadmin_version_with_git = '"$drawpile_dp_webadmin_version_with_git"'!;H};x}' $drawpile_configuration_values_file
	# git describe - fatal: No names found, cannot describe anything.
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Generate .env for Web Admin interface . . . (Step 2 of 6) *****${normal}"
	echo
cat <<EOF | tee -a .env.local >/dev/null
REACT_APP_BASENAME=/admin
REACT_APP_APIROOT=/admin/api
REACT_APP_AUTHMODE=basic
EOF
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Preparing package.json for Web Admin interface . . . (Step 3 of 6) *****${normal}"
	echo
	if [[ ! -e "$dp_install_loc/Programs/dpwebadmin/package-orig.json" ]]; then
		cp "$dp_install_loc/Programs/dpwebadmin/package.json" "$dp_install_loc/Programs/dpwebadmin/package-orig.json"
	fi
	sudo sed -i "s|\"proxy\": \"http://localhost:27780/\"|\"proxy\": \"http://localhost:27780/\",\n  \"homepage\": \"/admin/\"|g" "$dp_install_loc/Programs/dpwebadmin/package.json"
	# Olde commands
	# mv package.json package-orig.json
	# node -p "JSON.stringify({...require('./package-orig.json'), homepage: '/admin/'}, 0, 2)" > package.json
	#
	# node -p "JSON.stringify({...require('./package-orig.json'), homepage: '.'}, 0, 2)" > package.json
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Building for Web Admin interface . . . (Step 4 of 6) *****${normal}"
	echo
	echo This step may take a while to complete. Please be patient.
	echo
	# if [ "$no_swap_available" == "true" ]; then
	if (( "$swap_total" == "0" )) || [ "$no_swap_available" == "true" ] || (( "$mem_total" <= "512" )); then
		echo '--------------------------------------------------------------------------------'
		echo "Running Command: NODE_OPTIONS=--max_old_space_size=1024 npm install"
		echo '--------------------------------------------------------------------------------'
		if ! NODE_OPTIONS=--max_old_space_size=1024 npm install; then
			command_die "${bold}${red}Command 'npm install' failed.${normal}"
		fi
	else
		# elif [ "$no_swap_available" == "false" ]; then
		echo '--------------------------------------------------------------------------------'
		echo "Running Command: npm install"
		echo '--------------------------------------------------------------------------------'
		if ! npm install; then
			command_die "${bold}${red}Command 'npm install' failed.${normal}"
		fi
	fi
	# node_return_status_01=$?
	# echo
	# 134 - FATAL ERROR: Ineffective mark-compacts near heap limit Allocation failed - JavaScript heap out of memory
	# echo Return status of command: $node_return_status_01
	echo
	echo '--------------------------------------------------------------------------------'
	echo "Running Command: NODE_OPTIONS=--openssl-legacy-provider npm run build"
	echo '--------------------------------------------------------------------------------'
	if ! NODE_OPTIONS=--openssl-legacy-provider npm run build; then
		command_die "${bold}${red}Command 'NODE_OPTIONS=--openssl-legacy-provider npm run build' failed${normal}"
	fi
	# node_return_status_02=$?
	# echo
	# 254 - Could not read package.json: Error: ENOENT: no such file or directory, open '/home/ubuntu/package.json'
	# echo Return status of command: $node_return_status_02
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Editing and Moving to root web directory . . . (Step 5 of 6)*****${normal}"
	echo
	sudo sed -i -e "s/<title>Drawpile Server Admin<\/title>/<title>Drawpile Server Admin - $hostname<\/title>/g" "$dp_install_loc/Programs/dpwebadmin/build/index.html"
	# sudo sed -i -e "s/<title>Drawpile Server Admin<\/title>/<title>Drawpile moo.strongson.com Server Admin<\/title>/g" "/var/www/html/drawpile/admin/index.html"
	sudo mv build /var/www/html/drawpile/admin
	sudo restorecon -R /var/www/html/drawpile/
	echo
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}*****Reloading NGINX to see new data files . . . (Step 6 of 6)*****${normal}"
	echo
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]]; then
		sudo systemctl enable nginx.service
	fi
	# sudo systemctl daemon-reload & sudo systemctl restart systemd-modules-load & sudo nginx -s reload & sudo systemctl restart nginx.service & systemctl status nginx.service --no-pager
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	sudo nginx -s reload
	sudo systemctl restart nginx.service
	systemctl status nginx.service --no-pager
	wait $!
	echo
	# https://create-react-app.dev/
	# npx create-react-app builddpwebadmin
	# npm install -g npm@9.5.1
	# cd "$dp_install_loc/Programs/dpwebadmin/dpwebadmin"
	# npm start
<<comment_EOF_delete
	if [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "Raspberry Pi" ] & [ "$nodejs_or_red" == "1" ]; then
		# https://nodered.org/docs/user-guide/runtime/securing-node-red
		# http://stevesnoderedguide.com/securing-node-red-ssl
		# https://flowforge.com/blog/2023/04/securing-node-red-in-production/
		echo "${bold}${cyan}*****Cleanup on Raspbian for Desktop . . . (Final Step)*****${normal}"
		echo
		sudo /usr/bin/node-red-stop
		# sudo npm remove -g node-red
		sudo npm remove -g node-red node-red-admin
		sudo rm /lib/systemd/system/nodered.service
		sudo npm uninstall node-red-dashboard
		# nodejs_warning_raspbian_for_desktop_x86_64_only
		# echo
		# pause
		# echo
		# echo "Running tool to update login info for NodeRed to better secure the default installation."
		# echo
		# node-red admin init
		echo
	fi
comment_EOF_delete
elif [ "$ssl_encryption_config" == "3" ]; then
	echo "${bold}${red}List server needs HTTPS in order to work.${normal}"
	echo "${bold}${red}Skipping List Server setup.${normal}"
	echo
	echo "Waiting 30 seconds before continuing."
	echo
	sleep 30
else
	echo "${bold}${red}This message should not be visible,${normal}"
	echo "${bold}${red}regarding list server and web admin.${normal}"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]]; then
	variable_to_read_1="Pi_Hole_Status"
	variable_to_read_2=""
	variable_to_read_3=""

	value_description_1=""
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		Pi_Hole_Status=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		echo "${bold}${cyan}***** Configure Pi for Home Network Ad-Blocking . . . *****${normal}"
		echo 
		echo This is certainly outside the scope of the project, but I will include it as an
		echo installation option so users can choose to also use it, as there is special
		echo nginx configuration required to work simultaneously with Drawpile. A description
		echo of the software from github is included below:
		echo
		echo "${bold}${green}The Pi-hole® is a DNS sinkhole that protects your devices from unwanted content${normal}"
		echo "${bold}${green}without installing any client-side software.${normal}"
		echo
		echo "* Easy-to-install: our dialogs walk you through the simple installation process"
		echo "    in less than ten minutes"
		echo "* Resolute: content is blocked in non-browser locations, such as ad-laden mobile"
		echo "    apps and smart TVs"
		echo "* Responsive: seamlessly speeds up the feel of everyday browsing by caching DNS"
		echo "    queries"
		echo "* Lightweight: runs smoothly with minimal hardware and software requirements"
		echo "* Robust: a command-line interface that is quality assured for interoperability"
		echo "* Insightful: a beautiful responsive Web Interface dashboard to view and control"
		echo "    your Pi-hole"
		echo "* Versatile: can optionally function as a DHCP server, ensuring all your devices "
		echo "    are protected automatically"
		echo "* Scalable: capable of handling hundreds of millions of queries when installed "
		echo "     on server-grade hardware"
		echo "* Modern: blocks ads over both IPv4 and IPv6"
		echo "* Free: open source software that helps ensure you are the sole person in "
		echo "     control of your privacy"
		echo
		echo "${bold}${green}Read more on GitHub:${normal}"
		echo "     https://github.com/pi-hole/pi-hole/"
		echo
		echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
		echo "     This script pipes code via curl to bash via the following command:"
		echo "          curl -sSL https://install.pi-hole.net | bash"
		echo "     Piping to bash is controversial, as it prevents you from reading code"
		echo "     that is about to run on your system."
		echo "     "
		echo "     However, I don't wish to put a ton of effort into maintaining this"
		echo "     additional set up, so please only proceed if you are comfortable"
		echo "     with it and trust the makers of Pi-Hole."
		echo "     "
		echo "     ${bold}${red}Read more on Pi-Hole's blog${normal}"
		echo "          https://pi-hole.net/blog/2016/07/25/curling-and-piping-to-bash/"
		echo "${bold}${red}***************************** IMPORTANT NOTE: *****************************${normal}"
		echo
		echo "${bold}${red}Would you like to install Pi-Hole? Note, you MUST type 'yes' without quotes${normal}"
		echo "${bold}${red}in order for the installation to work.${normal}"
		echo
		read -r -p "${bold}${red}Without quotes, type 'yes' or 'no':${normal} " Pi_Hole_Status
		echo
		if [ "$Pi_Hole_Status" == "yes" ] || [ "$Pi_Hole_Status" == "YES" ] || [ "$Pi_Hole_Status" == "Yes" ] ; then
			echo Command to run: "curl -sSL https://install.pi-hole.net | bash"
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			curl -sSL https://install.pi-hole.net | bash
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo Pi-Hole installed. Will start configuration to work with nginx.
			sleep 10
			sudo service lighttpd stop
			echo
			if [[ "$using_what_linux_kernel" == "4.14" ]] && [[ "$using_what_rasp_codename" == "stretch" ]] ; then
				echo Detected Raspbian Stretch, kernel 4.14. Setting appropriate packages for pi-hole.
				echo
				pihole_packages="nginx php7.3-fpm php7.3-cgi php7.3-xml php7.3-sqlite3 php7.3-intl apache2-utils"
			elif [[ "$using_what_linux_kernel" == "6.1" ]] && [[ "$using_what_rasp_codename" == "bullseye" ]] ; then
				echo Detected Raspbian Bullseye, kernel 6.1. Setting appropriate packages for pi-hole.
				echo
				pihole_packages="nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils"
			else
				echo "${bold}${red}Unable to determine appropriate packages required for Pi-Hole${normal}"
				echo "${bold}${red}Here goes nothing... hoping for the best!${normal}"
				echo
				sleep 10
				
				pihole_packages="nginx php7.4-fpm php7.4-cgi php7.4-xml php7.4-sqlite3 php7.4-intl apache2-utils"
			fi
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=($pihole_packages);
			package_install_status_check_function
			sudo $package_install_program $pihole_packages # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			sudo systemctl disable lighttpd
			sudo systemctl enable php7.4-fpm
			if [[ ! -e "/$dp_install_loc/default-sites-available-backup" ]]; then
				sudo cp /etc/nginx/sites-available/default "/$dp_install_loc/default-sites-available-backup"
			fi
			cat <<EOF | sudo tee /etc/nginx/sites-available/default >/dev/null
server {
    listen 80 default_server;
    listen [::]:80 default_server;

    root /var/www/html;
    server_name _;
    autoindex off;

    index pihole/index.php index.php index.html index.htm;

    location / {
        expires max;
        try_files \$uri \$uri/ =404;
    }

    location ~ \.php\$ {
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME \$document_root/\$fastcgi_script_name;
        fastcgi_pass unix:/run/php/php7.4-fpm.sock;
        fastcgi_param FQDN true;
        auth_basic "Restricted"; # For Basic Auth
        auth_basic_user_file /etc/nginx/passwords_pihole; # For Basic Auth
    }

    location /*.js {
        index pihole/index.js;
        auth_basic "Restricted"; # For Basic Auth
        auth_basic_user_file /etc/nginx/passwords_pihole; # For Basic Auth
    }

    location /admin {
        root /var/www/html;
        index index.php index.html index.htm;
        auth_basic "Restricted"; # For Basic Auth
        auth_basic_user_file /etc/nginx/passwords_pihole; # For Basic Auth
    }

    location ~ /\.ht {
        deny all;
    }
}
EOF
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo "${bold}${cyan}*****Configure Pi-Hole Admin Password in NGINX  . . . *****${normal}"
			echo
			echo 'Please type in a username you wish to use for making changes to your Pi-Hole'
			echo 'server. If you make a mistake or need to update the server login, open a new'
			echo 'terminal window and type in the following:'
			echo
			echo 'sudo htpasswd -bc /etc/nginx/passwords_pihole USERNAME PASSWORD'
			echo
			echo
			echo 'You can change the web interface password itself with this command:'
			echo
			echo 'pihole -a -p'
			echo
			echo 'Where USERNAME can be any username you wish to use for login and PASSWORD'
			echo 'can be any password you like to use without spaces.'
			echo
			read -r -p "Enter username: " nginx_username_pihole_1
			read -r -p "Enter username again: " nginx_username_pihole_2
			while [ $nginx_username_pihole_1 != $nginx_username_pihole_2 ]
			do
				echo
					echo "Usernames entered do not match!"
				echo
					read -r -p "Enter username: " nginx_username_pihole_1
					read -r -p "Enter username again: " nginx_username_pihole_2
			done
			echo
			echo "Your Server Administration username is: $nginx_username_pihole_1"
			echo
			echo
			read -r -p "Enter password without spaces: " nginx_htpasswd_pihole_1
			read -r -p "Enter password without spaces again: " nginx_htpasswd_pihole_2
			while [ $nginx_htpasswd_pihole_1 != $nginx_htpasswd_pihole_2 ]
			do
				echo
					echo "Passwords entered do not match!"
				echo
					read -r -p "Enter password without spaces: " nginx_htpasswd_pihole_1
					read -r -p "Enter password without spaces again: " nginx_htpasswd_pihole_2
			done
			echo
			echo "Your Pi-Hole Administration password is: $nginx_htpasswd_pihole_1"
			echo
			sudo htpasswd -bc /etc/nginx/passwords_pihole $nginx_username_pihole_1 $nginx_htpasswd_pihole_1
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			sudo chown -R www-data:www-data /var/www/html
			sudo chmod -R 755 /var/www/html
			sudo usermod -aG pihole www-data
			sudo service php7.4-fpm start
			sudo systemctl daemon-reload & sudo systemctl restart systemd-modules-load & sudo nginx -s reload & sudo systemctl restart nginx.service & systemctl status nginx.service --no-pager
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			if [[ -d "$option_loc_2" ]]; then
				if [[ ! -e "$option_loc_2/Pi-Hole Local.desktop" ]]; then
					echo Creating shortcut for Pi-Hole Local on Desktop.
					echo
					cat <<EOF | sudo tee "$option_loc_2/Pi-Hole Local.desktop" >/dev/null
[Desktop Entry]
Name=Pi-Hole Local
Comment=Pi-Hole Localhost Web Page
Terminal=false
Exec=chromium-browser http://localhost/admin
Type=Application
Icon=/var/www/html/admin/img/favicons/android-chrome-192x192.png
Name[en_GB]=Pi-Hole Local
EOF
					sudo chown $current_username "$option_loc_2/Pi-Hole Local.desktop"
					sudo chmod 754 "$option_loc_2/Pi-Hole Local.desktop"
				else
					echo Shortcut for Pi-Hole Local already exists on Desktop.
				fi
				
				if [[ ! -e "$option_loc_2/Pi-Hole.desktop" ]]; then
					echo Creating shortcut for Pi-Hole on Desktop.
					cat <<EOF | sudo tee "$option_loc_2/Pi-Hole.desktop" >/dev/null
[Desktop Entry]
Name=Pi-Hole
Comment=Pi-Hole Web Page
Terminal=false
Exec=chromium-browser http://pi.hole/admin
Type=Application
Icon=/var/www/html/admin/img/favicons/android-chrome-192x192.png
Name[en_GB]=Pi-Hole
EOF
					sudo chown $current_username "$option_loc_2/Pi-Hole.desktop"
					sudo chmod 755 "$option_loc_2/Pi-Hole.desktop"
				else
					echo Shortcut for Pi-Hole already exists on Desktop.
				fi
			fi
		elif [ "$Pi_Hole_Status" == "no" ] || [ "$Pi_Hole_Status" == "NO" ] || [ "$Pi_Hole_Status" == "No" ] ; then
			echo Skipping installation of Pi-Hole.
		else
			echo Invalid selection option, skipping installation of Pi-Hole.
			Pi_Hole_Status=no
		fi
		sudo sed -i '\!^Pi_Hole_Status =!{h;s!=.*!= '"$Pi_Hole_Status"'!};${x;\!^$!{s!!Pi_Hole_Status = '"$Pi_Hole_Status"'!;H};x}' $app_installation_status_file
	else
		echo "This message should not be visible."
	fi
else
	echo "${bold}${red}Not on Raspberry Pi, skipping installation prompt for Pi-Hole.${normal}"
	Pi_Hole_Status=no
	sudo sed -i '\!^Pi_Hole_Status =!{h;s!=.*!= '"$Pi_Hole_Status"'!};${x;\!^$!{s!!Pi_Hole_Status = '"$Pi_Hole_Status"'!;H};x}' $app_installation_status_file
fi
<<comment_EOF
# https://docs.pi-hole.net/guides/webserver/nginx/
sudo service lighttpd stop
sudo $package_install_program nginx php7.3-fpm php7.3-cgi php7.3-xml php7.3-sqlite3 php7.3-intl apache2-utils
systemctl disable lighttpd
systemctl enable php7.3-fpm
comment_EOF
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
if [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" || "$what_linux_name" == "NAME=\"Raspbian GNU/Linux\"" ]] && [[ "$what_architecture" == "Architecture: arm64" || "$what_architecture" == "Architecture: arm" ]]; then
	variable_to_read_1="RPi_Monitor_Status"
	variable_to_read_2="RPi_Monitor_Dark_Mode"
	variable_to_read_3=""

	value_description_1="Query 01: RPi_Monitor_Dark_Mode"
	value_description_2=""
	value_description_3=""
	value_description_4=""
	value_description_5=""

	read_stored_config_value_query_function
	if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
		echo "Storing value and moving on."
		RPi_Monitor_Status=$read_stored_config_value_query_1
	elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
		# samba_choice=1
		# ssl_encryption_config=1
		# dp_install_loc=/home/pi/Public
		# current_username=pi

		echo "${bold}${cyan}*****Configure Pi Monitoring . . . *****${normal}"
		echo
		echo RPi-Monitor is an application designed to perform real time monitoring embedded
		echo devices. The development platform is a Raspberry Pi B.
		echo
		echo RPi-Monitor provides a lot of feature such as Embedded Web server, Alert 
		echo messaging, SNMP integration...
		echo
		echo For details, refer to keys features of RPi-Monitor in documentation.
		echo
		echo https://github.com/XavierBerger/RPi-Monitor
		echo
		read -r -p "${bold}${cyan}1 for yes, 2 for no${normal}: " RPi_Monitor_Status
		echo
		if [ "$RPi_Monitor_Status" == "1" ]; then
			# Install notes
			# https://xavierberger.github.io/RPi-Monitor-docs/11_installation.html#installation-from-repository
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(dirmngr);
			package_install_status_check_function # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			sudo $package_install_program dirmngr # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "Exiting script..." && echo "" && sleep 10 && exit
			sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com 2C0D3C0F
			sudo wget -q --show-progress http://goo.gl/vewCLL -O /etc/apt/sources.list.d/rpimonitor.list
			# Necessary after adding repository, don't remove or rpimonitor will fail to install
			sudo $packages_update_program
			app_does_not_exist=0
			app_installed=0
			app_not_installed=0
			progs=(rpimonitor);
			package_install_status_check_function
			sudo $package_install_program rpimonitor # || echo "" && echo "${bold}${red}Installation failed.${normal}" && echo "" && sleep 30
			pihostname=$(hostname)
			# echo http:\/\/$pihostname.local:8888
			# chromium-browser http:\/\/$pihostname.local:8888
			# chromium-browser http://pi4brokesd.local:8888/
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			echo Enable dark mode for RPi-Monitor web page?
			# echo 1 for yes, 2 for no, 3 to revert.
			read -r -p "1 for yes, 2 for no, 3 to revert: " RPi_Monitor_Dark_Mode
			echo
			if [ "$RPi_Monitor_Dark_Mode" == "2" ] || [ "$RPi_Monitor_Dark_Mode" = "3" ] || [ "$RPi_Monitor_Dark_Mode" != "1" ]; then
				# Light Mode - https://xavierberger.github.io/RPi-Monitor-docs/31_configuration_examples.html
				# Original colors are #f2f2f2 and #e9e9e9
				rpi_monitor_services_color01=#d9d9d9
				rpi_monitor_services_color02=#000000
			fi
			
			if [ "$RPi_Monitor_Dark_Mode" == "1" ]; then
				rpi_monitor_services_color01=#343434
				rpi_monitor_services_color02=#e9e9e9
				# Read more
				# https://github.com/XavierBerger/RPi-Monitor/issues/264
				if [[ ! -e "/usr/share/rpimonitor/web/css/rpimonitor.css.bak" ]]; then
					echo Creating backup of original file.
					echo /usr/share/rpimonitor/web/css/rpimonitor.css.bak
					echo
					sudo cp /usr/share/rpimonitor/web/css/rpimonitor.css /usr/share/rpimonitor/web/css/rpimonitor.css.bak
				elif [[ -e "/usr/share/rpimonitor/web/css/rpimonitor.css.bak" ]]; then
					echo Backup of original file exists, creating edited backup.
					echo /usr/share/rpimonitor/web/css/rpimonitor_last_edit.css.bak
					echo 
					sudo cp /usr/share/rpimonitor/web/css/rpimonitor.css /usr/share/rpimonitor/web/css/rpimonitor_last_edit.css.bak
				else
					echo This message should not be visible.
				fi
				cat <<EOF | sudo tee -a /usr/share/rpimonitor/web/css/rpimonitor.css >/dev/null
/*--- -- --- -- ---*/
/* -- DARK MODE -- */
/*--- -- --- -- ---*/

/* Nav & Menu */
.dropdown-menu,
.navbar-inverse .navbar-nav > .active > a,
.navbar-inverse .navbar-nav > .active > a:focus,
.navbar-inverse .navbar-nav > .active > a:hover {
	background-color: #3c3c3c !important;
}

.dropdown-menu > li > a {
	color: gray !important;
}

.dropdown-menu > li > a:hover {
	background-color: #6a6a6a !important;
	color: white !important;
}

body {
	background-color: #1a1a1a !important;
	color: rgb(150, 150, 150) !important;
}

/* Status */
.list-group-item {
	background-color: #1a1a1a !important;
	color: white !important;
}

hr {
	border-color: black !important;
}

.column-fluid {
	column-rule-color: black !important;
}

.justgage svg text {
	filter: contrast(0%) !important;
}

/* Statistics */
td {
	color: white;
}

.legendColorBox,
.legendLabel {
	background-color: #3c3c3c;
	color: lightgray;
}

.btn,
input[type="button"],
select {
	background-color: #222222;
	color: lightgray;
}

.btn:hover,
input[type="button"]:hover,
select:hover {
	color: gray;
}

/* Addons */
.panel-default > .panel-heading {
	background-color: #6a6a6a !important;
	color: white !important;
}

.panel-body {
	background-color: #3c3c3c;
	color: white;
}

/* Options */
.modal-content {
	background-color: #3c3c3c !important;
	color: white;
}
/*--- -- --- -- ---*/
/* -- DARK MODE -- */
/*--- -- --- -- ---*/
EOF
			# Dark Mode
			sudo service rpimonitor restart
			echo
			echo If changes do not display immediately, clear cached history in Chrome.
			sleep 5
			elif [ "$RPi_Monitor_Dark_Mode" == "2" ]; then
				echo Skipping Dark Mode setup of RPi-Monitor.
			elif [ "$RPi_Monitor_Dark_Mode" == "3" ]; then
				sudo wget -q --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/master/src/usr/share/rpimonitor/web/css/rpimonitor.css -O /usr/share/rpimonitor/web/css/rpimonitor.css
				if [[ -e "/usr/share/rpimonitor/web/css/rpimonitor.css.bak" ]]; then
					echo Removing backup of original file.
					echo /usr/share/rpimonitor/web/css/rpimonitor.css.bak
					echo
					sudo rm -f /usr/share/rpimonitor/web/css/rpimonitor.css.bak
				fi
			else
				echo Invalid selection option, skipping installation of Dark Mode for RPi-Monitor.
			fi
			echo
			echo '--------------------------------------------------------------------------------'
			echo
			# Read more
			# https://github.com/XavierBerger/RPi-Monitor/issues/264
			if [[ ! -e "/etc/rpimonitor/template/network.conf.bak" ]]; then
				echo Creating backup of original file.
				echo /etc/rpimonitor/template/network.conf
				echo
				sudo cp /etc/rpimonitor/template/network.conf /etc/rpimonitor/template/network.conf.bak
			fi
			if [[ ! -e "/etc/rpimonitor/template/wlan.conf.bak" ]]; then
				echo Creating backup of original file.
				echo /etc/rpimonitor/template/wlan.conf
				echo
				sudo cp /etc/rpimonitor/template/wlan.conf /etc/rpimonitor/template/wlan.conf.bak
			fi
			# sudo wget -q --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/network.conf -O /etc/rpimonitor/template/network.conf
			sudo sed -i '\!^RPi_Monitor_Dark_Mode =!{h;s!=.*!= '"$RPi_Monitor_Dark_Mode"'!};${x;\!^$!{s!!RPi_Monitor_Dark_Mode = '"$RPi_Monitor_Dark_Mode"'!;H};x}' $app_installation_status_file
			cat <<EOF | sudo tee /etc/rpimonitor/template/network.conf >/dev/null
########################################################################
# Extract Network information
#  Page: 1
#  Information               Status     Statistics
#  - recieved                - yes      - yes
#  - send                    - yes      - yes
#
# Note: Replace 'eth0' in the configuration bellow by the name of your
#       network interface and uncomment the line according to your needs
########################################################################
dynamic.1.name=net_received
dynamic.1.source=/sys/class/net/eth0/statistics/rx_bytes
dynamic.1.regexp=(.*)
dynamic.1.postprocess=
#dynamic.1.postprocess=$1*-1
dynamic.1.rrd=DERIVE
#dynamic.1.max=0

dynamic.2.name=net_send
dynamic.2.source=/sys/class/net/eth0/statistics/tx_bytes
dynamic.2.regexp=(.*)
dynamic.2.postprocess=
dynamic.2.rrd=DERIVE
#dynamic.2.min=0

web.status.1.content.8.name=Ethernet
web.status.1.content.8.icon=network.png
web.status.1.content.8.line.1="Ethernet Sent: <b>"+KMG(data.net_send)+"<i class='icon-arrow-up'></i></b> Received: <b>"+KMG(Math.abs(data.net_received)) + "<i class='icon-arrow-down'></i></b>"

web.statistics.1.content.8.name=Ethernet
#web.statistics.1.content.8.title="Network"
web.statistics.1.content.8.graph.1=net_send
web.statistics.1.content.8.graph.2=net_received
web.statistics.1.content.8.graph_options.yaxis={ tickFormatter: function (v) { if (Math.abs(v) > 1048576) return (Math.round(v*10/1024/1024)/10) + " MiB/s" ; if (Math.abs(v) > 1024) return (Math.round(v*10/1024)/10) + " KiB/s" ; else return v + " B/s" }, }
web.statistics.1.content.8.ds_graph_options.net_send.label=Upload bandwidth (bytes)
web.statistics.1.content.8.ds_graph_options.net_send.lines={ fill: true }
web.statistics.1.content.8.ds_graph_options.net_send.color="#FF7777"
web.statistics.1.content.8.ds_graph_options.net_received.label=Download bandwidth (bytes)
web.statistics.1.content.8.ds_graph_options.net_received.lines={ fill: true }
web.statistics.1.content.8.ds_graph_options.net_received.color="#77FF77"
EOF
		#---------------------------------------------------------------------------------------------------------------------------------
		#---------------------------------------------------------------------------------------------------------------------------------
		# sudo wget -q  --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/wlan.conf -O /etc/rpimonitor/template/wlan.conf
			cat <<EOF | sudo tee /etc/rpimonitor/template/wlan.conf >/dev/null
########################################################################
# Extract WiFi information
#  Page: 1
#  Information               Status     Statistics
#  - recieved                - yes      - yes
#  - sent                    - yes      - yes
########################################################################
dynamic.1.name=wifi_received
dynamic.1.source=/sys/class/net/wlan0/statistics/rx_bytes
dynamic.1.regexp=(.*)
dynamic.1.postprocess=
#dynamic.1.postprocess=$1*-1
dynamic.1.rrd=DERIVE

dynamic.2.name=wifi_send
dynamic.2.source=/sys/class/net/wlan0/statistics/tx_bytes
dynamic.2.regexp=(.*)
dynamic.2.postprocess=
dynamic.2.rrd=DERIVE

web.status.1.content.9.name=WiFi
web.status.1.content.9.icon=wifi.png
web.status.1.content.9.line.1="WiFi Sent: <b>"+KMG(data.wifi_send)+"<i class='icon-arrow-up'></i></b> Received: <b>"+KMG(Math.abs(data.wifi_received)) + "<i class='icon-arrow-down'></i></b>"

web.statistics.1.content.9.name=WiFi
#web.statistics.1.content.9.title="WiFi"
web.statistics.1.content.9.graph.1=wifi_send
web.statistics.1.content.9.graph.2=wifi_received
web.statistics.1.content.9.graph_options.yaxis={ tickFormatter: function (v) { if (Math.abs(v) > 1048576) return (Math.round(v*10/1024/1024)/10) + " MiB/s" ; if (Math.abs(v) > 1024) return (Math.round(v*10/1024)/10) + " KiB/s" ; else return v + " B/s" }, }
web.statistics.1.content.9.ds_graph_options.wifi_send.label=Upload bandwidth (bits)
web.statistics.1.content.9.ds_graph_options.wifi_send.lines={ fill: true }
web.statistics.1.content.9.ds_graph_options.wifi_send.color="#FF7777"
web.statistics.1.content.9.ds_graph_options.wifi_received.label=Download bandwidth (bits)
web.statistics.1.content.9.ds_graph_options.wifi_received.lines={ fill: true }
web.statistics.1.content.9.ds_graph_options.wifi_received.color="#77FF77"
EOF
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			
			# For invalid options, 4 is assumed (no Samba).
			
			if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
				services_conf_contents_samba_choice_01=$(cat << EOF

dynamic.19.name=smbd_desc
dynamic.19.source=service smbd status | grep "smbd.service - "
dynamic.19.regexp=- (.*)
dynamic.20.name=smbd_act
dynamic.20.source=service smbd status | grep "Active: "
dynamic.20.regexp=(\(.*\))
dynamic.21.name=smbd_runtime
dynamic.21.source=service smbd status | grep "Active: "
dynamic.21.regexp=; (.*)
EOF
)
			else
				services_conf_contents_samba_choice_01=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
				if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
				services_conf_contents_samba_choice_02=$(cat << EOF
<tr><td>"+Label(data.smbd_act,"=='(running)'","OK","success")+Label(data.smbd_act,"!='(running)'","KO","danger")+"</td><td><b>smbd</b></td><td>" + data.smbd_desc + "</td><td>"+Label(data.smbd_act,"=='(running)'",data.smbd_runtime,"default")+Label(data.smbd_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
			else
				services_conf_contents_samba_choice_02=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			
			if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
				# Samba is actively being used
				DYN01=22
				DYN02=23
				DYN03=24
				DYN04=25
				DYN05=26
				DYN06=27
			else
				# Samba is not actively being used
				DYN01=19
				DYN02=20
				DYN03=21
				DYN04=22
				DYN05=23
				DYN06=24
			fi
			
			# echo 'Press 1 for Self Signed Certificates'
			# echo "Press 2 for Lets Encrypt ${bold}(Default)${normal}"
			# echo 'Press 3 for no SSL security.
			# For invalid options, 2 is assumed. 
			
			if [ "$ssl_encryption_config" == "2" ]; then
				services_conf_contents_Lets_Encrypt_01=$(cat << EOF

dynamic.$DYN01.name=certbot_service_desc
dynamic.$DYN01.source=systemctl status certbot.service | grep "certbot.service -"
dynamic.$DYN01.regexp=- (.*)
dynamic.$DYN02.name=certbot_service_act
dynamic.$DYN02.source=systemctl status certbot.service | grep "Active: "
dynamic.$DYN02.regexp=(\(.*\))
dynamic.$DYN03.name=certbot_service_runtime
dynamic.$DYN03.source=systemctl status certbot.service | grep "Active: "
dynamic.$DYN03.regexp=; (.*)

dynamic.$DYN04.name=certbot_timer_desc
dynamic.$DYN04.source=systemctl status certbot.timer | grep "certbot.timer -"
dynamic.$DYN04.regexp=- (.*)
dynamic.$DYN05.name=certbot_timer_act
dynamic.$DYN05.source=systemctl status certbot.timer | grep "Active: "
dynamic.$DYN05.regexp=(\(.*\))
dynamic.$DYN06.name=certbot_timer_runtime
dynamic.$DYN06.source=systemctl status certbot.timer | grep "Active: "
dynamic.$DYN06.regexp=; (.*)
EOF
)
			else
				services_conf_contents_Lets_Encrypt_01=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			if [ "$ssl_encryption_config" == "2" ]; then
				services_conf_contents_Lets_Encrypt_02=$(cat << EOF
<tr><td>"+Label(data.certbot_service_act,"=='(running)'","OK","success")+Label(data.certbot_service_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Certbot</b></td><td>" + data.certbot_service_desc + "</td><td>"+Label(data.certbot_service_act,"=='(running)'",data.certbot_service_runtime,"default")+Label(data.certbot_service_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.certbot_timer_act,"=='(running)'","OK","success")+Label(data.certbot_timer_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Timer</b></td><td>" + data.certbot_timer_desc + "</td><td>"+Label(data.certbot_timer_act,"=='(running)'",data.certbot_timer_runtime,"default")+Label(data.certbot_timer_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
			else
				services_conf_contents_Lets_Encrypt_02=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
			if [[ "$samba_choice" == "1" || "$samba_choice" == "2" || "$samba_choice" == "3" ]] && [ "$ssl_encryption_config" == "2" ] && [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				# echo 1 Samba yes, LE Yes, Pi-Hole yes
				DYN07=28
				DYN08=29
				DYN09=30
			elif [[ "$samba_choice" == "1" || "$samba_choice" == "2" || "$samba_choice" == "3" ]] && [ "$ssl_encryption_config" != "2" ] && [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				# echo 2 Samba yes, LE no, Pi-Hole yes
				DYN07=22
				DYN08=23
				DYN09=24
			elif [ "$samba_choice" == "4" ] && [ "$ssl_encryption_config" == "2" ] && [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				# echo 3 Samba no, LE yes, Pi-Hole yes
				DYN07=25
				DYN08=26
				DYN09=27
			elif [ "$samba_choice" == "4" ] && [ "$ssl_encryption_config" != "2" ] && [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				# echo 4 Samba no, LE no, Pi-Hole yes
				DYN07=19
				DYN08=20
				DYN09=21
			else
				# echo No PiHole Config Required.
				:
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			if [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				services_conf_contents_PiHole_01=$(cat << EOF

dynamic.$DYN07.name=pihole_desc
dynamic.$DYN07.source=systemctl status pihole-FTL.service | grep "pihole-FTL.service -"
dynamic.$DYN07.regexp=- (.*)
dynamic.$DYN08.name=pihole_act
dynamic.$DYN08.source=systemctl status pihole-FTL.service | grep "Active: "
dynamic.$DYN08.regexp=(\(.*\))
dynamic.$DYN09.name=pihole_runtime
dynamic.$DYN09.source=systemctl status pihole-FTL.service | grep "Active: "
dynamic.$DYN09.regexp=; (.*)
EOF
)
			else
				services_conf_contents_PiHole_01=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			if [[ "$Pi_Hole_Status" == "yes" || "$Pi_Hole_Status" == "YES" || "$Pi_Hole_Status" == "Yes" ]]; then
				services_conf_contents_PiHole_02=$(cat << EOF
<tr><td>"+Label(data.pihole_act,"=='(running)'","OK","success")+Label(data.pihole_act,"!='(running)'","KO","danger")+"</td><td><b>pihole-FTL.service</b></td><td>" + data.pihole_desc + "</td><td>"+Label(data.pihole_act,"=='(running)'",data.pihole_runtime,"default")+Label(data.pihole_act,"!='(running)'","-","default")+"</td></tr>
EOF
)
			else
				services_conf_contents_PiHole_02=""
			fi
			#---------------------------------------------------------------------------------------------------------------------------------
			#---------------------------------------------------------------------------------------------------------------------------------
		services_conf_contents=$(cat << EOF
########################################################################
# Extract information about Opened Port
#  Page: 1
#  Information               Status     Statistics
#  - ssh port (22)           - yes      - no
#  - rpimonotor port (8888)  - yes      - no
#  - http port (80)          - yes      - yes
#  - https port (443)        - yes      - yes
#  - mysql port (3306) - yes - no
########################################################################
dynamic.1.name=rpimonitor_desc
dynamic.1.source=service rpimonitor status | grep "rpimonitor.service -"
dynamic.1.regexp=- (.*)
dynamic.2.name=rpimonitor_act
dynamic.2.source=service rpimonitor status | grep "Active: "
dynamic.2.regexp=(\(.*\))
dynamic.3.name=rpimonitor_runtime
dynamic.3.source=service rpimonitor status | grep "Active: "
dynamic.3.regexp=; (.*)

dynamic.4.name=nginx_desc
dynamic.4.source=systemctl status nginx.service | grep "nginx.service -"
dynamic.4.regexp=- (.*)
dynamic.5.name=nginx_act
dynamic.5.source=systemctl status nginx.service | grep "Active: "
dynamic.5.regexp=(\(.*\))
dynamic.6.name=nginx_runtime
dynamic.6.source=systemctl status nginx.service | grep "Active: "
dynamic.6.regexp=; (.*)

dynamic.7.name=drawpile_srv_socket_desc
dynamic.7.source=systemctl status drawpile-srv.socket | grep "drawpile-srv.socket -"
dynamic.7.regexp=- (.*)
dynamic.8.name=drawpile_srv_socket_act
dynamic.8.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.8.regexp=(\(.*\))
dynamic.9.name=drawpile_srv_socket_runtime
dynamic.9.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.9.regexp=; (.*)

dynamic.10.name=drawpile_srv_desc
dynamic.10.source=systemctl status drawpile-srv.service | grep "drawpile-srv.service -"
dynamic.10.regexp=- (.*)
dynamic.11.name=drawpile_srv_act
dynamic.11.source=systemctl status drawpile-srv.service | grep "Active: "
dynamic.11.regexp=(\(.*\))
dynamic.12.name=drawpile_srv_runtime
dynamic.12.source=systemctl status drawpile-srv.service | grep "Active: "
dynamic.12.regexp=; (.*)

dynamic.13.name=drawpile_listserver_desc
dynamic.13.source=systemctl status drawpile-listserver.service | grep "drawpile-listserver.service -"
dynamic.13.regexp=- (.*)
dynamic.14.name=drawpile_listserver_act
dynamic.14.source=systemctl status drawpile-listserver.service | grep "Active: "
dynamic.14.regexp=(\(.*\))
dynamic.15.name=drawpile_listserver_runtime
dynamic.15.source=systemctl status drawpile-listserver.service | grep "Active: "
dynamic.15.regexp=; (.*)

dynamic.16.name=abuse_report_desc
dynamic.16.source=systemctl status drawpile_abuse_report.service | grep "drawpile_abuse_report.service -"
dynamic.16.regexp=- (.*)
dynamic.17.name=abuse_report_act
dynamic.17.source=systemctl status drawpile_abuse_report.service | grep "Active: "
dynamic.17.regexp=(\(.*\))
dynamic.18.name=abuse_report_runtime
dynamic.18.source=systemctl status drawpile_abuse_report.service | grep "Active: "
dynamic.18.regexp=; (.*)
$services_conf_contents_samba_choice_01
$services_conf_contents_Lets_Encrypt_01
$services_conf_contents_PiHole_01

web.status.1.content.11.name=Services
web.status.1.content.11.icon=daemons.png
web.status.1.content.11.line.1="<style type=\"text/css\">.tg331 {border-collapse:collapse;border-spacing:0;}.tg331 tr:nth-child(even){background-color: #343434}.tg331 table{border: 0px solid #e9e9e9;}.tg331 td{font-family:Arial, sans-serif;font-size:14px;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 .tg331-yw4l{vertical-align:top;text-align: left;}.tg331 hr {display: block;margin-top: 0.5em;margin-bottom: 0.5em;margin-left: auto;margin-right: auto;border-style: inset; border-width: 1px;}</style><table width=\"100%\" class=\"tg331\"><tr><td><b>Status</b></td><td><b>Service Name</b></td><td><b>Service Description</b></td><td><b>Run Time</b></td></tr><tr><td>"+Label(data.rpimonitor_act,"=='(running)'","OK","success")+Label(data.rpimonitor_act,"!='(running)'","KO","danger")+"</td><td><b>rpimonitor</b></td><td>" + data.rpimonitor_desc + "</td><td>"+Label(data.rpimonitor_act,"=='(running)'",data.rpimonitor_runtime,"default")+Label(data.rpimonitor_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.nginx_act,"=='(running)'","OK","success")+Label(data.nginx_act,"!='(running)'","KO","danger")+"</td><td><b>nginx.service</b></td><td>" + data.nginx_desc + "</td><td>"+Label(data.nginx_act,"=='(running)'",data.nginx_runtime,"default")+Label(data.nginx_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_socket_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-srv.socket</b></td><td>" + data.drawpile_srv_socket_desc + "</td><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'",data.drawpile_srv_socket_runtime,"default")+Label(data.drawpile_srv_socket_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.drawpile_srv_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-srv.service</b></td><td>" + data.drawpile_srv_desc + "</td><td>"+Label(data.drawpile_srv_act,"=='(running)'",data.drawpile_srv_runtime,"default")+Label(data.drawpile_srv_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.drawpile_listserver_act,"=='(running)'","OK","success")+Label(data.drawpile_listserver_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-listserver.service</b></td><td>" + data.drawpile_listserver_desc + "</td><td>"+Label(data.drawpile_listserver_act,"=='(running)'",data.drawpile_listserver_runtime,"default")+Label(data.drawpile_listserver_act,"!='(running)'","-","default")+"</td></tr><tr><td>"+Label(data.abuse_report_act,"=='(running)'","OK","success")+Label(data.abuse_report_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile_abuse_report.service</b></td><td>" + data.abuse_report_desc + "</td><td>"+Label(data.abuse_report_act,"=='(running)'",data.abuse_report_runtime,"default")+Label(data.abuse_report_act,"!='(running)'","-","default")+"</td></tr>$services_conf_contents_samba_choice_02$services_conf_contents_Lets_Encrypt_02$services_conf_contents_PiHole_02</table>"
EOF
)
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
<<comment_EOF
web.status.1.content.11.title="Services"
web.status.1.content.11.icon=daemons.png

web.status.1.content.11.line.1="<style type=\"text/css\">.tg331 {border-collapse:collapse;border-spacing:0;}.tg331 tr:nth-child(even){background-color: #343434}.tg331 table{border: 0px solid #e9e9e9;}.tg331 td{font-family:Arial, sans-serif;font-size:14px;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 th{font-family:Arial, sans-serif;font-size:14px;font-weight:normal;padding:12px 2px;border-style:solid;border-width:0px;overflow:hidden;word-break:normal;}.tg331 .tg331-yw4l{vertical-align:top;text-align: left;}.tg331 hr {display: block;margin-top: 0.5em;margin-bottom: 0.5em;margin-left: auto;margin-right: auto;border-style: inset; border-width: 1px;}</style><table width=\"100%\" class=\"tg331\"><tr><td><b>Status</b></td><td><b>Service Name</b></td><td><b>Service Description</b></td><td><b>Run Time</b></td></tr>

<tr><td>"+Label(data.rpimonitor_act,"=='(running)'","OK","success")+Label(data.rpimonitor_act,"!='(running)'","KO","danger")+"</td><td><b>rpimonitor</b></td><td>" + data.rpimonitor_desc + "</td><td>"+Label(data.rpimonitor_act,"=='(running)'",data.rpimonitor_runtime,"default")+Label(data.rpimonitor_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.nginx_act,"=='(running)'","OK","success")+Label(data.nginx_act,"!='(running)'","KO","danger")+"</td><td><b>nginx.service</b></td><td>" + data.nginx_desc + "</td><td>"+Label(data.nginx_act,"=='(running)'",data.nginx_runtime,"default")+Label(data.nginx_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_socket_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-srv.socket</b></td><td>" + data.drawpile_srv_socket_desc + "</td><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'",data.drawpile_srv_socket_runtime,"default")+Label(data.drawpile_srv_socket_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.drawpile_srv_act,"=='(running)'","OK","success")+Label(data.drawpile_srv_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-srv.service</b></td><td>" + data.drawpile_srv_desc + "</td><td>"+Label(data.drawpile_srv_act,"=='(running)'",data.drawpile_srv_runtime,"default")+Label(data.drawpile_srv_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.drawpile_listserver_act,"=='(running)'","OK","success")+Label(data.drawpile_listserver_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile-listserver.service</b></td><td>" + data.drawpile_listserver_desc + "</td><td>"+Label(data.drawpile_listserver_act,"=='(running)'",data.drawpile_listserver_runtime,"default")+Label(data.drawpile_listserver_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"+Label(data.abuse_report_act,"=='(running)'","OK","success")+Label(data.abuse_report_act,"!='(running)'","KO","danger")+"</td><td><b>drawpile_abuse_report.service</b></td><td>" + data.abuse_report_desc + "</td><td>"+Label(data.abuse_report_act,"=='(running)'",data.abuse_report_runtime,"default")+Label(data.abuse_report_act,"!='(running)'","-","default")+"</td></tr>

$services_conf_contents_samba_choice_02$services_conf_contents_Lets_Encrypt_02$services_conf_contents_PiHole_01"

#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
$services_conf_contents_samba_choice_01

dynamic.22.name=drawpile_srv_socket_desc2
dynamic.22.source=systemctl status drawpile-srv.socket | grep "drawpile-srv.socket -"
dynamic.22.regexp=- (.*)
dynamic.23.name=drawpile_srv_socket_enabled2
dynamic.23.source=systemctl status drawpile-srv.socket | grep "Loaded: "
dynamic.23.regexp=; (.*); vendor preset: enabled\)
dynamic.24.name=drawpile_srv_socket_act2
dynamic.24.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.24.regexp=(\(.*\))
dynamic.24.name=drawpile_srv_socket_runtime2
dynamic.24.source=systemctl status drawpile-srv.socket | grep "Active: "
dynamic.24.regexp=; (.*)
# Loaded: loaded (/etc/systemd/system/drawpile-srv.socket; disabled; vendor preset: enabled)
$services_conf_contents_Lets_Encrypt_01



<tr><td>"
+Label(data.drawpile_srv_socket_act,"=='(running)'","OK","success")
+Label(data.drawpile_srv_socket_act,"=='inactive (dead)'","KO","warning")
+Label(data.drawpile_srv_socket_act,"!='(running)'","KO","danger")
+"</td><td><b>drawpile-srv.socket</b></td><td>" + data.drawpile_srv_socket_desc + "</td><td>"+Label(data.drawpile_srv_socket_act,"=='(running)'",data.drawpile_srv_socket_runtime,"default")+Label(data.drawpile_srv_socket_act,"!='(running)'","-","default")+"</td></tr>

<tr><td>"
+Label(data.drawpile_srv_act,"=='(running)'","OK","success")
+Label(data.drawpile_srv_act,"=='inactive (dead)'","KO","warning")
+Label(data.drawpile_srv_act,"!='(running)'","KO","danger")
+"</td><td><b>drawpile-srv.service</b></td><td>" + data.drawpile_srv_desc + "</td><td>"+Label(data.drawpile_srv_act,"=='(running)'",data.drawpile_srv_runtime,"default")+Label(data.drawpile_srv_act,"!='(running)'","-","default")+"</td></tr>

$services_conf_contents_samba_choice_02
+Label(data.drawpile_srv_socket_act2,"=='(running)'","OK","success")
+Label(data.drawpile_srv_socket_enabled2,"=='disabled'","KO","warning")
+Label(data.drawpile_srv_socket_act2,"!='(running)'","KO","danger")
+"</td><td><b>drawpile-srv.socket2</b></td><td>" + data.drawpile_srv_socket_desc2 + "</td><td>"+Label(data.drawpile_srv_socket_act2,"=='(running)'",data.drawpile_srv_socket_runtime2,"default")+Label(data.drawpile_srv_socket_act2,"!='(running)'","-","default")+"</td></tr>"
#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
<tr><td>"+Label(data.smbd_act,"=='(running)'","OK","success")+Label(data.smbd_act,"!='(running)'","KO","danger")+"</td><td><b>smbd</b></td><td>" + data.smbd_desc + "</td><td>"+Label(data.smbd_act,"=='(running)'",data.smbd_runtime,"default")+Label(data.smbd_act,"!='(running)'","-","default")+"</td></tr>

sudo systemctl enable --now certbot.service
<tr><td>"+Label(data.certbot_service_act,"=='(running)'","OK","success")+Label(data.certbot_service_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Certbot</b></td><td>" + data.certbot_service_desc + "</td><td>"+Label(data.certbot_service_act,"=='(running)'",data.certbot_service_runtime,"default")+Label(data.certbot_service_act,"!='(running)'","-","default")+"</td></tr>

sudo systemctl enable --now certbot.timer
<tr><td>"+Label(data.certbot_timer_act,"=='(running)'","OK","success")+Label(data.certbot_timer_act,"!='(running)'","KO","danger")+"</td><td><b>Let's Encrypt Timer</b></td><td>" + data.certbot_timer_desc + "</td><td>"+Label(data.certbot_timer_act,"=='(running)'",data.certbot_timer_runtime,"default")+Label(data.certbot_timer_act,"!='(running)'","-","default")+"</td></tr>
comment_EOF
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			echo "$services_conf_contents" | sudo tee /etc/rpimonitor/template/services.conf >/dev/null

			sudo sed -i -e 's/#include=\/etc\/rpimonitor\/template\/services.conf/include=\/etc\/rpimonitor\/template\/wlan.conf/g' "/etc/rpimonitor/data.conf"
			sudo sed -i -e 's/#include=\/etc\/rpimonitor\/template\/wlan.conf/include=\/etc\/rpimonitor\/template\/services.conf/g' "/etc/rpimonitor/data.conf"
			if [ "$Pi_Hole_Status" == "yes" ] || [ "$Pi_Hole_Status" == "YES" ] || [ "$Pi_Hole_Status" == "Yes" ] ; then
				# Info found - https://www.reddit.com/r/pihole/comments/4659mn/pihole_and_rpi_monitor/
				sudo sed -i -e 's/#web.addons.2.name=Addons example/web.addons.2.name=Pi-Hole/g' "/etc/rpimonitor/data.conf"
				sudo sed -i -e 's/#web.addons.2.showTitle=0/web.addons.2.showTitle=0/g' "/etc/rpimonitor/data.conf"
				sudo sed -i -e 's/#web.addons.2.addons=example/web.addons.2.addons=custom\nweb.addons.2.url=http:\/\/localhost\/admin\//g' "/etc/rpimonitor/data.conf"
			else
				# Do nothing, no changes needed if Pi-Hole was not installed.
				:
			fi
			# sudo sed -i -e 's/#include=\/etc\/rpimonitor\/template\/services.conf\n#include=\/etc\/rpimonitor\/template\/wlan.conf\n/include=\/etc\/rpimonitor\/template\/wlan.conf\ninclude=\/etc\/rpimonitor\/template\/services.conf\n/g' "/etc/rpimonitor/data.conf"
			# sudo sed -i -e 's/include=\/etc\/rpimonitor\/template\/services.conf\ninclude=\/etc\/rpimonitor\/template\/wlan.conf\n/include=\/etc\/rpimonitor\/template\/wlan.conf\ninclude=\/etc\/rpimonitor\/template\/services.conf\n/g' "/etc/rpimonitor/data.conf"
			sudo service rpimonitor restart
			# sudo /etc/init.d/rpimonitor restart
			# Restore config lines and restart service
			# sudo wget -q  --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/wlan.conf -O /etc/rpimonitor/template/wlan.conf & sudo wget -q --show-progress https://raw.githubusercontent.com/XavierBerger/RPi-Monitor/develop/src/etc/rpimonitor/template/wlan.conf -O /etc/rpimonitor/template/wlan.conf & sudo /etc/init.d/rpimonitor restart
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			#-----------------------------------------------------------------------------------------------------------------------------------------------------------------
			
			echo '--------------------------------------------------------------------------------'
			echo
			if [[ ! -e "$option_loc_4/drawpile_icons/rpi-logo-img.png" ]]; then
				echo Downloading image to use for RPi-Monitor Shortcut.
				echo
				sudo wget -q --show-progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/rpi-logo-img.png -O $option_loc_4/drawpile_icons/rpi-logo-img.png
			else
				echo Image already downloaded to use for RPi-Monitor Shortcut.
			fi
			echo
			if [[ -d "$option_loc_2" ]]; then
				if [[ ! -e "$option_loc_2/RPi-Monitor.desktop" ]]; then
					echo Creating shortcut for RPi-Monitor on Desktop.
					echo
					cat <<EOF | sudo tee $option_loc_2/RPi-Monitor.desktop >/dev/null
[Desktop Entry]
Name=RPi-Monitor
Comment=RPi-Monitor Web Page
Terminal=false
Exec=chromium-browser http://$pihostname.local:8888
Type=Application
#Icon=/usr/share/rpimonitor/web/img/logo.png
Icon=$option_loc_4/drawpile_icons/rpi-logo-img.png
Name[en_GB]=RPi-Monitor
EOF
					sudo chown $current_username $option_loc_2/RPi-Monitor.desktop
					sudo chmod 754 $option_loc_2/RPi-Monitor.desktop
				else
					echo Shortcut for RPi-Monitor already exists on Desktop.
				fi
			fi
		elif [ "$RPi_Monitor_Status" == "2" ]; then
			echo skipping installation of RPi-Monitor.
		else
			echo Invalid selection option, skipping installation of RPi-Monitor.
		fi
		sudo sed -i '\!^RPi_Monitor_Status =!{h;s!=.*!= '"$RPi_Monitor_Status"'!};${x;\!^$!{s!!RPi_Monitor_Status = '"$RPi_Monitor_Status"'!;H};x}' $app_installation_status_file
	else
		echo "This message should not be visible."
	fi
else	
	echo "${bold}${red}Not on Raspberry Pi, skipping installation prompt for RPi-Monitor.${normal}"
	RPi_Monitor_Status=2
	sudo sed -i '\!^RPi_Monitor_Status =!{h;s!=.*!= '"$RPi_Monitor_Status"'!};${x;\!^$!{s!!RPi_Monitor_Status = '"$RPi_Monitor_Status"'!;H};x}' $app_installation_status_file
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo

sudo chmod 777 $app_installation_status_file
sudo chmod 777 $drawpile_configuration_values_file
# sudo adduser $current_username drawpileread
if [[ -e "/home/drawpileuser/cert.pem" ]]; then sudo chmod 700 /home/drawpileuser/cert.pem; fi
if [[ -e "/home/drawpileuser/key.pem" ]]; then sudo chmod 700 /home/drawpileuser/key.pem; fi
sudo chown drawpileuser:drawpileread /home/drawpileuser/ -R

variable_to_read_1="dp_srv_startup"
variable_to_read_2=""
variable_to_read_3=""

value_description_1=""
value_description_2=""
value_description_3=""
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	dp_srv_startup=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo "${bold}${cyan}***** Drawpile Server Startup Configuration . . .*****${normal}"
	echo
	echo 'Enable socket activation or start server when the Raspberry Pi powers on?'
	echo
	echo "${bold}${cyan}1 - Socket Activation - Recommended${normal}"
	echo '    This setting is less resource intensive on the server or Raspberry Pi,'
	echo '     as the drawpile server is only running when a user is connected.'
	echo "${bold}${cyan}2 - Server starts on Server or Raspberry Pi power up${normal}"
	echo '    Runs all the time in the background.'
	echo
	while :; do
	read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " dp_srv_startup
		[[ $dp_srv_startup =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $dp_srv_startup >= 1 && $dp_srv_startup <= 2)); then
			break
		else
			echo
			echo "${red}${bold}Invalid number selection, try again.${normal}"
			echo
		fi
	done
	echo
	if [ "$dp_srv_startup" == "1" ]; then
		sudo cp /etc/systemd/system/drawpile-srv01.service /etc/systemd/system/drawpile-srv.service
		wait $!
		echo
		echo 'Reloading systemctl and systemd.'
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		wait $!
		echo
		sudo systemctl enable --now drawpile-srv.socket
		wait $!
		#Read more on systemd --> https://drawpile.net/help/server
	elif [ "$dp_srv_startup" == "2" ]; then
		sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
		wait $!
		echo
		echo 'Reloading systemctl and systemd.'
		sudo systemctl daemon-reload
		sudo systemctl restart systemd-modules-load
		wait $!
		echo
		sudo systemctl enable --now drawpile-srv.service
		wait $!
		#Read more on systemd --> https://drawpile.net/help/server
	else
		echo "This message should not be visible."
	fi
	sudo sed -i '\!^dp_srv_startup =!{h;s!=.*!= '"$dp_srv_startup"'!};${x;\!^$!{s!!dp_srv_startup = '"$dp_srv_startup"'!;H};x}' $drawpile_configuration_values_file
	echo
else
	echo "This message should not be visible."
fi

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

function certbot_configure_deploy_hook_function () {
	sudo sed -i -e '$adeploy-hook = systemctl reload nginx.service' /etc/letsencrypt/cli.ini
	
	if [ "$dp_srv_startup" == "1" ]; then
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.socket' /etc/letsencrypt/cli.ini
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.service' /etc/letsencrypt/cli.ini
	elif [ "$dp_srv_startup" == "2" ]; then
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.service' /etc/letsencrypt/cli.ini
	else
		sudo sed -i -e '$adeploy-hook = systemctl reload drawpile-srv.service' /etc/letsencrypt/cli.ini
	fi
}

function testing_config_for_certbot_function () {
	echo '--------------------------------------------------------------------------------'
	echo
	echo "${bold}${cyan}***** Testing Lets Encrypt Certbot config for auto renewal . . . *****${normal}"
	echo
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	# echo "${bold}${cyan}Stopping NGINX web server ... ${normal}"
	# sudo systemctl stop --now nginx.service
	# echo
	echo "${bold}${cyan}Initiating certbot renewal dry run ... ${normal}"
	sudo certbot renew --dry-run
	echo
	# echo "${bold}${cyan}Starting NGINX web server ... ${normal}"
	# sudo systemctl start --now nginx.service
	echo
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "You should get a message similar to the following near the bottom."
	echo
	echo "Congratulations, all simulated renewals succeeded:"
	echo "  ssl_fullchain_certificate (success)"
	echo
	echo "Note that if you did not, something was done wrong or is configured"
	echo "differently than this script was expecting. The server will not"
	echo "behave as intended."
	echo
	echo "${bold}Note:${normal} An error message indicating the following:"
	echo "${red}     Dry run: skipping deploy hook command: systemctl restart drawpile-srv.service${normal}"
	echo "is not necessarily a sign of failure. I haven't yet tested this"
	echo "as Raspbian has an older version of certbot that will not restart"
	echo "the Drawpile server if no cert renewal actually occurred."
	echo "It is currently believed this is needed to read the new SSL cert"
	echo "when they are generated so users can connect."
	echo
	# The following command with deploy hooks appears to only be available to recent versions of certbot.
	# sudo certbot renew --dry-run --run-deploy-hooks

	if [[ "$is_apache_2_installed" = "(none)" ]]; then
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	elif [[ $is_apache_2_installed == *.* ]]; then
		echo "${bold}${red}Apache appears to be installed and will need to be manually${normal}"
		echo "${bold}${red}configured to work with certbot if port 80 is in use.${normal}"
	else
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
		:
	fi
	echo
	echo "If all is well, press any key to continue set up for automatic"
	echo "SSL Key renewal by certbot."
	echo
	pause
	echo
	#Files are located here: /usr/lib/systemd/system/
	# sudo systemctl enable --now /usr/lib/systemd/system/certbot.service
	# sudo systemctl enable --now certbot.service
	sudo systemctl enable --now certbot.timer
	wait $!
}

if [ "$ssl_encryption_config" == "1" ] || [ "$ssl_encryption_config" == "3" ]; then
	# echo 'Press 1 for Self Signed Certificates' / # echo 'Press 3 for no SSL security.'
	echo "${invis}SSL Encryption Config set to 1 or 3, skipping certbot testing and timer.${normal}"
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
elif [ "$ssl_encryption_config" == "2" ] || [[ "$ssl_encryption_config" != "1" && "$ssl_encryption_config" != "3" ]]; then
	# echo 'Press 2 for Lets Encrypt'
	# echo Invalid option selected. Assuming option 2 intended.
	echo "${invis}SSL Encryption Config set to 2 or invalid option, certbot testing required.${normal}"
	# The options below configured the server to use SSL, so restarting Drawpile systemd services would be necessary.
	if [ "$systemd_selection" == "1" ] || [ "$systemd_selection" == "2" ] || [ "$systemd_selection" == "3" ] || [ "$systemd_selection" == "4" ] || [ "$systemd_selection" == "6" ] || [ "$systemd_selection" == "8" ] ||  [ "$systemd_selection" == "11" ]; then
		echo "${invis}The systemd_selection was set to 1, 2, 3, 4, 6, 8, or 11.${normal}"
		certbot_configure_deploy_hook_function
		testing_config_for_certbot_function
	elif [ "$systemd_selection" == "5" ] || [ "$systemd_selection" == "7" ] || [ "$systemd_selection" == "9" ] || [ "$systemd_selection" == "10" ] || [ "$systemd_selection" == "12" ] || [ "$systemd_selection" == "13" ] || [ "$systemd_selection" == "14" ] || [ "$systemd_selection" == "15" ] || [ "$systemd_selection" == "16" ] || [ "$systemd_selection" == "17" ] || [ "$systemd_selection" == "18" ] || [ "$systemd_selection" == "19" ] || [ "$systemd_selection" == "20" ]; then
		# Numbers 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, and 20 option do not use SSL
		echo "${invis}The systemd_selection was set to 5, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, or 20, and do not use SSL.${normal}"
		# Do nothing as no error was detected.
		# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	else
		# This is because the user provided invalid input, which assumed the use of SSL certs with systemd configuration.
		echo "${invis}SSL Encryption Config set to invalid option, certbot testing required.${normal}"
		certbot_configure_deploy_hook_function
		testing_config_for_certbot_function
	fi
else
	echo "${invis}Error: SSL Encryption Config is somehow wrong for certbot timer. Skipping step.${normal}"
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
variable_to_read_1="drawpile_external_authentication"
variable_to_read_2=""
variable_to_read_3=""

value_description_1=""
value_description_2=""
value_description_3=""
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	drawpile_external_authentication=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo
	echo "${bold}${cyan}*****Enable Drawpile External Authentication . . .*****${normal}"
	echo
	echo 'Drawpile now supports saved username logins. To enable this feature, you'
	echo 'must login to the server using the remote administration feature and then'
	echo "you must copy in the following line into the ${underline}Validation key:${normal}"
	echo
	echo '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='
	# 9 echo Jenga 2 tango Mary Jenga lima quebec green Sierra quebec Hotel Oscar India Kite / Green India / quebec zebra Sierra 1 4 Whiskey quebec India x-ray Hotel echo Bravo 1 India mary 5 Hotel sierra / Charlie Charlie Charlie kite =
	echo
	echo "${underline}External authentication${normal} must also be checked. It is highly suggested that"
	echo "the ${underline}Permit guest logins when ext-auth server is unreachable${normal} is checked and"
	echo "${underline}Allow ext-auth moderators${normal} is unchecked."
	echo
	echo "To read more on ${bold}External authentication${normal}, go to this link"
	echo "and find that header on the website."
	echo "https://drawpile.net/help/server/"
	echo
	echo "If you want, the script can enable this feature automatically!"
	echo "     1 - Enable External Authentication."
	echo "     2 - Do not Enable External Authentication."
	echo
	while :; do
	read -r -p "${bold}${cyan}Enter a number and hit enter to continue${normal}: " drawpile_external_authentication
	echo
		[[ $drawpile_external_authentication =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $drawpile_external_authentication >= 1 && $drawpile_external_authentication <= 2)); then
			break
		else
			echo "${red}${bold}Invalid number selection, try again.${normal}"
			echo
			echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
			echo
		fi
	done
	if [ "$drawpile_external_authentication" == "1" ]; then
		echo "insert into settings values ('extauthkey', '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='), ('extauth', 'true'), ('extauthgroup', 'drawpile');" | sudo sqlite3 /home/drawpileuser/server.db
		echo
		echo "Inserted setting for external authentication to server"
		echo "database."
	elif [ "$drawpile_external_authentication" == "2" ]; then
		echo "Did not add setting for external authentication to server."
	else
		echo "This message should not be visible for Drawpile external authentication."
	fi
	sudo sed -i '\!^drawpile_external_authentication =!{h;s!=.*!= '"$drawpile_external_authentication"'!};${x;\!^$!{s!!drawpile_external_authentication = '"$drawpile_external_authentication"'!;H};x}' $drawpile_configuration_values_file
	echo
else
	echo "This message should not be visible."
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
function journalctl_set_size_function () {
	echo "${bold}${cyan}Please select a size limit by number only:${normal}"
	echo "1 -    512 Megabytes (0.5 Gigabytes)"
	echo "2 -  1,024 Megabytes (1 Gigabyte)"
	echo "3 -  2,048 Megabytes (2 Gigabytes)"
	echo "4 -  4,096 Megabytes (4 Gigabytes) - Default Maximum"
	echo "5 -  8,192 Megabytes (8 Gigabytes)"
	echo "6 - 16,384 Megabytes (16 Gigabytes)"
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " journalctl_systemmaxuse
		[[ $journalctl_systemmaxuse =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $journalctl_systemmaxuse >= 1 && $journalctl_systemmaxuse <= 6 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	if [[ "$journalctl_systemmaxuse" = "1" ]]; then journalctl_systemmaxuse="512M"; fi
	if [[ "$journalctl_systemmaxuse" = "2" ]]; then journalctl_systemmaxuse="1024M"; fi
	if [[ "$journalctl_systemmaxuse" = "3" ]]; then journalctl_systemmaxuse="2048M"; fi
	if [[ "$journalctl_systemmaxuse" = "4" ]]; then journalctl_systemmaxuse="4096M"; fi
	if [[ "$journalctl_systemmaxuse" = "5" ]]; then journalctl_systemmaxuse="8192M"; fi
	if [[ "$journalctl_systemmaxuse" = "6" ]]; then journalctl_systemmaxuse="16384M"; fi
}
function journalctl_set_time_function () {
	echo "${bold}${cyan}Please select a time frame by number only:${normal}"
	echo "1 - 14 days"
	echo
	echo "2 - 1 month"
	echo "3 - 2 months"
	echo "4 - 3 months"
	echo "5 - 6 months"
	echo
	echo "6 - 1 year"
	echo "7 - 2 years"
	echo
	echo "${bold}${red}Note:${normal} This does not set a size limit, and very busy servers may still fill up the disk."
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " journalctl_maxretentionsec
		[[ $journalctl_maxretentionsec =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $journalctl_maxretentionsec >= 1 && $journalctl_maxretentionsec <= 7 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	if [[ "$journalctl_maxretentionsec" = "1" ]]; then journalctl_maxretentionsec="14day"; fi
	if [[ "$journalctl_maxretentionsec" = "2" ]]; then journalctl_maxretentionsec="1month"; fi
	if [[ "$journalctl_maxretentionsec" = "3" ]]; then journalctl_maxretentionsec="2month"; fi
	if [[ "$journalctl_maxretentionsec" = "4" ]]; then journalctl_maxretentionsec="3month"; fi
	if [[ "$journalctl_maxretentionsec" = "5" ]]; then journalctl_maxretentionsec="6month"; fi
	if [[ "$journalctl_maxretentionsec" = "6" ]]; then journalctl_maxretentionsec="1year"; fi
	if [[ "$journalctl_maxretentionsec" = "7" ]]; then journalctl_maxretentionsec="2year"; fi
}
variable_to_read_1="journalctl_log_limit"
variable_to_read_2=""
variable_to_read_3=""

value_description_1=""
value_description_2=""
value_description_3=""
value_description_4=""
value_description_5=""

read_stored_config_value_query_function
if [ "$maybe_use_config_value" == "y" ] || [ "$maybe_use_config_value" == "Y" ] || [ "$maybe_use_config_value" == "yes" ] || [ "$maybe_use_config_value" == "YES" ] || [ "$maybe_use_config_value" == "Yes" ]; then
	echo "Storing value and moving on."
	journalctl_log_limit=$read_stored_config_value_query_1
elif [ "$maybe_use_config_value" == "n" ] || [ "$maybe_use_config_value" == "N" ] || [ "$maybe_use_config_value" == "no" ] || [ "$maybe_use_config_value" == "NO" ] || [ "$maybe_use_config_value" == "No" ]; then
	echo
	echo "${bold}${cyan}***** Configure Journalctl Logging Limits . . . *****${normal}"
	echo
	echo "${bold}${cyan}Current Disk Usage:${normal}"
	df -h
	echo
	echo "${bold}${cyan}Logging Disk Usage:${normal}"
	sudo journalctl --disk-usage
	echo
	echo "${bold}${cyan}Why should I do this?${normal}"
	echo "The purpose of limiting logging is that excessively large logs could"
	echo " take up a large amount of disk space. Over time, that prevents the server"
	echo " from operating properly due to no disk space available."
	echo 
	echo "Note that journalctl logs up to 10% of drive space or 4 GB at max, which"
	echo " ever value is smaller. Also note that changing this setting requires a "
	echo " system reboot once the script has completed all operations in order to"
	echo " take effect."
	echo
	if [[ ! -d "/etc/systemd/journald.conf.d" ]]; then
		echo "If configured, the script will create a conf file here:"
	fi
	if [[ -d "/etc/systemd/journald.conf.d" ]]; then
		if test -n "$(find /etc/systemd/journald.conf.d -maxdepth 1 -name '*.conf' -print -quit)"; then echo "There are journalctl conf files already."; echo "Try investigating this directory manually:"; fi
	fi
	echo "     /etc/systemd/journald.conf.d/journald-local.conf"
	echo
	echo "${bold}${cyan}Would you like to limit the size of journalctl logs on the system:${normal}"
	echo " 1 - By file size"
	echo " 2 - By file size and by length of time"
	echo " 3 - By length of time"
	echo "     ${bold}${red}Note:${normal} This does not set a size limit, and very busy servers may still"
	echo "           fill up the disk."
	echo
	echo " 9 - Do not limit size of journalctl logs"
	echo
	while :; do
		read -r -p "${bold}${cyan}Enter a number and hit enter to continue:${normal} " journalctl_log_limit
		[[ $journalctl_log_limit =~ ^[0-9]+$ ]] || { echo; echo "Enter a valid number."; echo; continue; }
		if (( $journalctl_log_limit >= 1 && $journalctl_log_limit <= 3 || $journalctl_log_limit == 9 )); then
			break
		else
			echo
			echo "Invalid number selection, try again."
			echo
			echo '--------------------------------------------------------------------------------'
			echo
		fi
	done
	echo
	sudo sed -i '\!^journalctl_log_limit =!{h;s!=.*!= '"$journalctl_log_limit"'!};${x;\!^$!{s!!journalctl_log_limit = '"$journalctl_log_limit"'!;H};x}' $drawpile_configuration_values_file
	if [ "$journalctl_log_limit" == "1" ]; then
		journalctl_set_size_function
		journalctl_systemmaxuse="SystemMaxUse=$journalctl_systemmaxuse"
		journalctl_maxretentionsec="#MaxRetentionSec="
	elif [ "$journalctl_log_limit" == "2" ]; then
		journalctl_set_size_function
		echo
		journalctl_set_time_function
		journalctl_systemmaxuse="SystemMaxUse=$journalctl_systemmaxuse"
		journalctl_maxretentionsec="MaxRetentionSec=$journalctl_maxretentionsec"
	elif [ "$journalctl_log_limit" == "3" ]; then
		journalctl_set_time_function
		journalctl_systemmaxuse="#SystemMaxUse="
		journalctl_maxretentionsec="MaxRetentionSec=$journalctl_maxretentionsec"
	elif [ "$journalctl_log_limit" == "9" ]; then
		echo "Skipping setup of journalctl limitations."
	else
		echo "This message should not be visible for journalctl."
	fi
	if [ "$journalctl_log_limit" != "9" ]; then
		sudo sed -i '\!^journalctl_systemmaxuse =!{h;s!=.*!= '"$journalctl_systemmaxuse"'!};${x;\!^$!{s!!journalctl_systemmaxuse = '"$journalctl_systemmaxuse"'!;H};x}' $drawpile_configuration_values_file
		sudo sed -i '\!^journalctl_maxretentionsec =!{h;s!=.*!= '"$journalctl_maxretentionsec"'!};${x;\!^$!{s!!journalctl_maxretentionsec = '"$journalctl_maxretentionsec"'!;H};x}' $drawpile_configuration_values_file
		if [[ ! -d "/etc/systemd/journald.conf.d" ]]; then
			sudo mkdir -p -v "/etc/systemd/journald.conf.d"
		fi
		cat <<EOF | sudo tee "/etc/systemd/journald.conf.d/journald-local.conf" >/dev/null
#  This file is part of systemd.
#
#  systemd is free software; you can redistribute it and/or modify it under the
#  terms of the GNU Lesser General Public License as published by the Free
#  Software Foundation; either version 2.1 of the License, or (at your option)
#  any later version.
#
# Entries in this file show the compile time defaults. Local configuration
# should be created by either modifying this file, or by creating "drop-ins" in
# the journald.conf.d/ subdirectory. The latter is generally recommended.
# Defaults can be restored by simply deleting this file and all drop-ins.
#
# Use 'systemd-analyze cat-config systemd/journald.conf' to display the full config.
#
# See journald.conf(5) for details.
# Or go to this web page:
# https://www.freedesktop.org/software/systemd/man/journald.conf.html

[Journal]
#Storage=auto
#Compress=yes
#Seal=yes
#SplitMode=uid
#SyncIntervalSec=5m
#RateLimitIntervalSec=30s
#RateLimitBurst=10000
$journalctl_systemmaxuse
#     SystemMaxUse=
#SystemKeepFree=
#SystemMaxFileSize=
#SystemMaxFiles=100
#RuntimeMaxUse=
#RuntimeKeepFree=
#RuntimeMaxFileSize=
#RuntimeMaxFiles=100
$journalctl_maxretentionsec
#     MaxRetentionSec=
#MaxFileSec=1month
#ForwardToSyslog=yes 	# Debian, Ubuntu, Raspbian
#ForwardToSyslog=no 	# Fedora
#ForwardToKMsg=no
#ForwardToConsole=no
#ForwardToWall=yes
#TTYPath=/dev/console
#MaxLevelStore=debug
#MaxLevelSyslog=debug
#MaxLevelKMsg=notice
#MaxLevelConsole=info
#MaxLevelWall=emerg
#LineMax=48K
#ReadKMsg=yes
#Audit=no				# Debian, Ubuntu, Raspbian
#Audit=yes				# Fedora
EOF
	echo
	echo "To reload the configuration, you should restart the server when the script"
	echo "has completed, as this is much easier than reloading every single running"
	echo "service."
	echo
	echo "Read more on why this is here (warning for technical content):"
	echo "https://unix.stackexchange.com/questions/253203/how-to-tell-journald-to-re-read-its-configuration"
	echo
	echo "You can reboot the system with this command:"
	echo "sudo reboot"
	echo
	echo "Waiting 30 seconds before continuing script."
	sleep 30
	fi
else
	echo "This message should not be visible."
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${cyan}*****Scripts to be downloaded for managing server. . . .*****${normal}"
echo "${bold}${red}*****     (To be completed at a later date)             *****${normal}"
echo
sudo mkdir -p -v "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/"
sudo chmod 777 "$dp_install_loc/Programs/Drawpile-Srv-Files/server-scripts/" -R
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo

# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# End Section of Scripts to be generated for managing server. 
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------
# ----------------------------------------------------------------------------------------------------------------------------------------------------------------

# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
# Removal of Testing Distro Changes if Previously Applied
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------
sudo sed -i '\!^testing_package_decision =!{h;s!=.*!= '"$testing_package_decision"'!};${x;\!^$!{s!!testing_package_decision = '"$testing_package_decision"'!;H};x}' $drawpile_configuration_values_file

if [ "$testing_package_decision" == "y" ] || [ "$testing_package_decision" == "Y" ] || [ "$testing_package_decision" == "yes" ] || [ "$testing_package_decision" == "YES" ] || [ "$testing_package_decision" == "Yes" ] ; then
	echo
	echo "${bold}${cyan}*****Removing Testing Package Repo for updated packages. . . .*****${normal}"
	echo
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	if [[ "$file_buster_pref_exist" = "yes" ]]; then
		echo "File buster.pref already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_buster_pref_exist" = "no" ]]; then
		echo "File buster.pref did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/preferences.d/buster.pref
	else
		echo "Cannot determine if file buster.pref existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	if [[ "$file_buster_list_exist" = "yes" ]]; then
		echo "File buster.list already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_buster_list_exist" = "no" ]]; then
		echo "File buster.list did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/sources.list.d/buster.list
	else
		echo "Cannot determine if file buster.list existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	if [[ "$file_stretch_pref_exist" = "yes" ]]; then
		echo "File stretch.pref already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_stretch_pref_exist" = "no" ]]; then
		echo "File stretch.pref did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/preferences.d/stretch.pref
	else
		echo "Cannot determine if file stretch.pref existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	if [[ "$file_stretch_list_exist" = "yes" ]]; then
		echo "File stretch.list already existed prior to script modification."
		echo "No changes made to this file."
	elif [[ "$file_stretch_list_exist" = "no" ]]; then
		echo "File stretch.list did not exist prior to script modification."
		echo "Removing this file."
		sudo rm -f /etc/apt/sources.list.d/stretch.list
	else
		echo "Cannot determine if file stretch.list existed or not prior"
		echo "to script modification of the system."
		echo
		echo "This message should not be visible."
	fi
	# --------------------------------------------------------------------------------
	# --------------------------------------------------------------------------------
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo
elif [ "$testing_package_decision" == "n" ] || [ "$testing_package_decision" == "N" ] || [ "$testing_package_decision" == "no" ] || [ "$testing_package_decision" == "NO" ] || [ "$testing_package_decision" == "No" ] ; then
	# Do nothing as no error was detected.
	# Symbol --> : (a colon) --> Do nothing beyond expanding arguments and performing redirections. The return status is zero.
	:
else
	:
fi
# --------------------------------------------------------------------------------
# --------------------------------------------------------------------------------

function drawpile_custom_shortcut_icon_preference () {
	mkdir -p -v "$option_loc_4/drawpile_icons"
	if [[ -e "$dp_install_loc/drawpile_list_server.png" ]]; then
		echo "Using existing image to use for Drawpile List-Server Shortcut."
		echo "Copying to: $option_loc_4/drawpile_icons"
		echo
		sudo cp "$dp_install_loc/drawpile_list_server.png" "$option_loc_4/drawpile_icons/drawpile_list_server.png"
		list_server_shortcut_png=$option_loc_4/drawpile_icons/drawpile_list_server.png
	else
		sudo wget -q --show-progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/drawpile_list_server.png -O $option_loc_4/drawpile_icons/drawpile_list_server.png
		list_server_shortcut_png=$option_loc_4/drawpile_icons/drawpile_list_server.png
	fi

	if [[ -e "$dp_install_loc/drawpile_web_admin.png" ]]; then
		echo "Using existing image to use for Drawpile List-Server Shortcut."
		echo "Copying to: $option_loc_4/drawpile_icons"
		echo 
		sudo cp "$dp_install_loc/drawpile_web_admin.png" "$option_loc_4/drawpile_icons/drawpile_web_admin.png"
		server_web_admin_shortcut_png=$option_loc_4/drawpile_icons/drawpile_web_admin.png
	else
		sudo wget -q --show-progress https://raw.githubusercontent.com/$github_account_name/$github_project_name/master/images/drawpile_web_admin.png -O $option_loc_4/drawpile_icons/drawpile_web_admin.png
		server_web_admin_shortcut_png=$option_loc_4/drawpile_icons/drawpile_web_admin.png
	fi
	
	sudo chmod 754 $list_server_shortcut_png
	sudo chown $current_username $list_server_shortcut_png
	
	sudo chmod 754 $server_web_admin_shortcut_png
	sudo chown $current_username $server_web_admin_shortcut_png
}
	
if [[ -d "$option_loc_2" ]]; then
	# sudo rm -f "$option_loc_2/Drawpile Admin.desktop" # sudo rm -f "$option_loc_2/Drawpile ListServer.desktop"
	echo
	echo "${bold}${cyan}*****Drawpile List Server and Web Admin Shortcuts . . .*****${normal}"
	echo
	echo "Would you like to use a custom icons for Desktop shortcuts to the Drawpile"
	echo "     List Server and Web Admin, or use your largest favicon available?"
	echo
	echo "     If using wanting generic drawpile icons I made, press 1. Or use your own"
	echo "     custom icons for managing web admin and list server), name and place here:"
	echo "       $dp_install_loc/drawpile_list_server.png"
	echo "       $dp_install_loc/drawpile_web_admin.png"
	echo
	echo "     If using favicon (2) , will accept these icons, preferring largest first"
	[[ -e "$dp_install_loc/256.png" ]] && echo "       $dp_install_loc/256.png (In case you want a really high quality icon)" || [[ -e "$script_directory/256.png" ]] && echo "       $script_directory/256.png (In case you want a really high quality icon)"
	[[ -e "$dp_install_loc/128.png" ]] && echo "       $dp_install_loc/128.png (maximum size used by DP client)" || [[ -e "$script_directory/128.png" ]] && echo "       $script_directory/128.png (maximum size used by DP client)"
	[[ -e "$dp_install_loc/64.png" ]] && echo "       $dp_install_loc/64.png" || [[ -e "$script_directory/64.png" ]] && echo "       $script_directory/64.png"
	echo
	echo "Press 1 for custom icons, or 2 to use favicons."
	echo
	read -r -p ${bold}${cyan}"Enter your selection now. Invalid option will select 1:${normal} " drawpile_shortcut_icon_preference
	echo
	# --------------------------------------------------------------------------------
	if [ "$drawpile_shortcut_icon_preference" == "1" ]; then
		drawpile_custom_shortcut_icon_preference
	elif [ "$drawpile_shortcut_icon_preference" == "2" ]; then
		mkdir -p -v "$option_loc_4/drawpile_icons"
		if [[ -e "$dp_install_loc/256.png" ]]; then
			echo Copying 256x256 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			echo
			sudo cp "$dp_install_loc/256.png" "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-256.png
		elif [[ -e "$dp_install_loc/128.png" ]]; then
			echo Copying 128x128 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			echo
			sudo cp "$dp_install_loc/128.png" "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-128.png
		elif [[ -e "$dp_install_loc/64.png" ]]; then
			echo Copying 64x64 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			echo
			sudo cp "$dp_install_loc/64.png" "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-64.png
		else
			:
		fi
		
		if [[ -e "$script_directory/256.png" ]]; then
			echo Copying 256x256 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			echo
			sudo cp "$script_directory/256.png" "$option_loc_4/drawpile_icons/server-shortcut-256.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-256.png
		elif [[ -e "$script_directory/128.png" ]]; then
			echo Copying 128x128 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			echo
			sudo cp "$script_directory/128.png" "$option_loc_4/drawpile_icons/server-shortcut-128.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-128.png
		elif [[ -e "$script_directory/64.png" ]]; then
			echo Copying 64x64 favicon image to use for Drawpile Shortcuts.
			echo "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			echo
			sudo cp "$script_directory/64.png" "$option_loc_4/drawpile_icons/server-shortcut-64.png"
			server_shortcut_png=$option_loc_4/drawpile_icons/server-shortcut-64.png
		else
			:
		fi
		server_web_admin_shortcut_png=$server_shortcut_png
		list_server_shortcut_png=$server_shortcut_png
		sudo chmod 754 $server_shortcut_png
		sudo chown drawpileuser drawpileread $server_shortcut_png
	else
		echo "Invalid option selected. Assuming option 1 intended."
		drawpile_shortcut_icon_preference=1
		drawpile_custom_shortcut_icon_preference
	fi
	sudo sed -i '\!^drawpile_shortcut_icon_preference =!{h;s!=.*!= '"$drawpile_shortcut_icon_preference"'!};${x;\!^$!{s!!drawpile_shortcut_icon_preference = '"$drawpile_shortcut_icon_preference"'!;H};x}' $drawpile_configuration_values_file
	echo
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile ListServer.desktop" ]]; then
		echo Creating shortcut for Drawpile ListServer on Desktop.
		echo
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile ListServer.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile ListServer
Comment=Drawpile ListServer
Terminal=false
Exec=/usr/bin/firefox https://$hostname
Type=Application
Icon=$list_server_shortcut_png
Name[en_GB]=Drawpile ListServer
EOF
			echo
		elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile ListServer.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile ListServer
Comment=Drawpile ListServer
Terminal=false
Exec=/usr/bin/chromium %U https://$hostname
Type=Application
Icon=$list_server_shortcut_png
Name[en_GB]=Drawpile ListServer
EOF
		else
			# Raspbian for Pi
			cat <<EOF | sudo tee "$option_loc_2/Drawpile ListServer.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile ListServer
Comment=Drawpile ListServer
Terminal=false
Exec=chromium-browser https://$hostname
Type=Application
Icon=$list_server_shortcut_png
Name[en_GB]=Drawpile ListServer
EOF
		fi
	sudo chown $current_username "$option_loc_2/Drawpile ListServer.desktop"
	sudo chmod 754 "$option_loc_2/Drawpile ListServer.desktop"
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
		# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
		gio set "$option_loc_2/Drawpile ListServer.desktop" metadata::trusted true
	fi
	else
		echo Shortcut for Drawpile ListServer already exists on Desktop.
	fi
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile Admin.desktop" ]]; then
		echo Creating shortcut for Drawpile Admin on Desktop.
		echo
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ] && [ "$verify_if_this_is_raspbian_or_debian" == "" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin
Comment=Drawpile Admin
Terminal=false
Exec=/usr/bin/firefox https://$hostname/admin
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin
EOF
		elif [ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" ] && [ "$what_architecture" == "Architecture: x86-64" ]; then
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin
Comment=Drawpile Admin
Terminal=false
Exec=/usr/bin/chromium %U https://$hostname/admin
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin
EOF
		else
			# Raspbian for Pi
			cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin
Comment=Drawpile Admin
Terminal=false
Exec=chromium-browser https://$hostname/admin/
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin
EOF
		fi
	sudo chown $current_username "$option_loc_2/Drawpile Admin.desktop"
	sudo chmod 754 "$option_loc_2/Drawpile Admin.desktop"
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
		# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
		gio set "$option_loc_2/Drawpile Admin.desktop" metadata::trusted true
		echo
	fi
	else
		echo Shortcut for Drawpile Admin already exists on Desktop.
	fi
	# --------------------------------------------------------------------------------
	if [[ ! -e "$option_loc_2/Drawpile Admin GUI.desktop" ]]; then
		echo Creating shortcut for Drawpile Admin GUI on Desktop.
		echo
		cat <<EOF | sudo tee "$option_loc_2/Drawpile Admin GUI.desktop" >/dev/null
[Desktop Entry]
Name=Drawpile Admin GUI
Comment=Drawpile Admin GUI
Terminal=false
Exec=drawpile-srv --gui --remote http://localhost:27780/api/
Type=Application
Icon=$server_web_admin_shortcut_png
Name[en_GB]=Drawpile Admin GUI
EOF
		sudo chown $current_username "$option_loc_2/Drawpile Admin GUI.desktop"
		sudo chmod 754 "$option_loc_2/Drawpile Admin GUI.desktop"
		if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
			# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
			gio set "$option_loc_2/Drawpile Admin GUI.desktop" metadata::trusted true
			echo
		fi
	else
		echo Shortcut for Drawpile Admin GUI already exists on Desktop.
	fi
	# --------------------------------------------------------------------------------
elif [[ ! -d "$option_loc_2" ]]; then
	echo "Creating file in script directory with server info:"
	echo "     $script_directory/My Server Information.txt"
	echo
	echo "Please save this somewhere securely, then delete the file."
	echo
	echo "${bold}${cyan}**** Drawpile List Server Page For Drawpile Client ****${normal}"
	if [[ "$ssl_encryption_config" = "1" ]]; then echo "http://$hostname/listing/"; fi
	if [[ "$ssl_encryption_config" = "2" ]]; then echo "https://$hostname/listing/"; fi
	if [[ "$ssl_encryption_config" = "3" ]]; then echo "Not Available without SSL enabled"; fi
	echo
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${bold}${cyan}**** Drawpile Admin Web Page ****${normal}"
	if [[ "$ssl_encryption_config" = "1" ]]; then echo "https://$hostname/admin/"; fi
	if [[ "$ssl_encryption_config" = "2" ]]; then echo "https://$hostname/admin/"; fi
	if [[ "$ssl_encryption_config" = "3" ]]; then echo "Not Available without SSL enabled"; fi
	
	cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
***********************************************************************
************************ My Server Information ************************
***********************************************************************

**** Drawpile Server Files ****
$dp_install_loc/Programs/Drawpile-Srv-Files

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

**** Drawpile List Server Page ****
http://$hostname

**** Drawpile List Server Page For Drawpile Client ****
EOF
	wait $!
	if [[ "$ssl_encryption_config" = "1" ]]; then
		cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
http://$hostname/listing/
EOF
		wait $!
	fi
	if [[ "$ssl_encryption_config" = "2" ]]; then
		cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
https://$hostname/listing/
EOF
		wait $!
	fi
	if [[ "$ssl_encryption_config" = "3" ]]; then
		cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
Not Available without SSL enabled
EOF
		wait $!
	fi
	cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

EOF
	if [ "$nginx_username_password_consent_query" == "y" ] || [ "$nginx_username_password_consent_query" == "Y" ] || [ "$nginx_username_password_consent_query" == "yes" ] || [ "$nginx_username_password_consent_query" == "YES" ] || [ "$nginx_username_password_consent_query" == "Yes" ]; then
		cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
**** Drawpile Admin Web Page Login Information ****
nginx_username_1=$nginx_username_1
nginx_htpasswd_1=$nginx_htpasswd_1

EOF
	fi
	cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
**** Drawpile Admin Web Page ****
EOF
	if [[ "$ssl_encryption_config" = "1" ]] || [[ "$ssl_encryption_config" = "2" ]]; then
		cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
https://$hostname/admin/
EOF
		wait $!
	fi
	if [[ "$ssl_encryption_config" = "3" ]]; then
		cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
Not Available without SSL enabled
EOF
		wait $!
	fi
	cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
***** Drawpile Admin GUI Desktop on another machine *****
**** (For Emergency Use Only, messes with web admin) ****
drawpile-srv --gui --remote http://$hostname:8081/

EOF
if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
	cat <<EOF | sudo tee -a "$script_directory/My Server Information.txt" >/dev/null
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"

**** Samba Network Configuration ****
Type this into address bar of file explorer to check contents of local server.
\\$HOSTNAME"

EOF
fi
else
	echo "This message for Desktop Icon should not be visible. (Drawpile Admin and Drawpile Admin GUI)"
fi

echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${green}***********************************************************${normal}"
echo "${bold}${green}**********    Displaying Server Status  . . .    **********${normal}"
echo "${bold}${green}***********************************************************${normal}"
echo 
echo "${bold}${green}If socket activation is enabled, it will say enabled on the line starting with${normal}"
echo "${bold}${green}\"Loaded:\" and it should be running. Ignore the part after vendor preset.${normal}"
echo
systemctl status drawpile-srv.socket --no-pager
wait $!
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${green}If start up on Pi power up is enabled, it will say enabled on the line starting${normal}"
echo "${bold}${green}with \"Loaded:\" and it should be running. Ignore the part after vendor preset.${normal}"
echo
systemctl status drawpile-srv.service --no-pager
wait $!
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
if [[ -d "$option_loc_2" ]] && [[ "$USER" = "root" || "$USER" = "Root" || "$USER" = "ROOT" || $EUID == 0 ]]; then
	if [[ "$what_linux_name" == "NAME=\"Fedora Linux\"" || "$what_linux_name" == "NAME=Fedora" ]] || [ "$what_linux_name" == "NAME=\"Ubuntu\"" ] || [[ "$what_linux_name" == "NAME=\"Debian GNU/Linux\"" && "$what_architecture" == "Architecture: x86-64" && "$verify_if_this_is_raspbian_or_debian" == "" ]]; then
		cat <<EOF | sudo tee "$option_loc_2/trusted_shortcuts.sh" >/dev/null
#!/bin/bash
gio set "$option_loc_2/Drawpile Client.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile ListServer.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile Admin.desktop" metadata::trusted true
gio set "$option_loc_2/Drawpile Admin GUI.desktop" metadata::trusted true
EOF
		wait $!
		sudo chmod 777 "$option_loc_2/trusted_shortcuts.sh"
		wait $!
		su -c "$option_loc_2/trusted_shortcuts.sh" $current_username
		wait $!
		sudo rm -rf $option_loc_2/trusted_shortcuts.sh
	fi
fi
<<comment_EOF_delete
if [[ "$what_linux_name" == "NAME=\"Ubuntu\"" && -d "$option_loc_2" ]]; then
	# Originally made this mess because I couldn't get gio set to work with a variable set location, had to be explicitly noted.
	if [[ -e "$option_loc_2/Drawpile Client.desktop" ]]; then
		sudo desktop-file-install "$option_loc_2/Drawpile Client.desktop"
		desktop_shortcut_is_trusted=$( gio info "$option_loc_2/Drawpile Client.desktop" | grep trusted | xargs )
		if [[ "$desktop_shortcut_is_trusted" == "metadata::trusted: true" ]]; then
			# echo Trusted
			:
		else
			# echo Not Trusted
			cd "$option_loc_2"
			gio set "Drawpile Client.desktop" "metadata::trusted" true
		fi
		mv "$option_loc_2/Drawpile Client.desktop" "$script_directory/Drawpile Client.desktop"
	fi
	if [[ -e "$option_loc_2/Drawpile ListServer.desktop" ]] || [[ -e "$option_loc_2/Drawpile Admin.desktop" ]] || [[ -e "$option_loc_2/Drawpile Admin GUI.desktop" ]]; then
		sudo desktop-file-install "$option_loc_2/Drawpile ListServer.desktop"
		sudo desktop-file-install "$option_loc_2/Drawpile Admin.desktop"
		sudo desktop-file-install "$option_loc_2/Drawpile Admin GUI.desktop"
		desktop_shortcut_is_trusted=$( gio info "$option_loc_2/Drawpile ListServer.desktop" | grep trusted | xargs )
		if [[ "$desktop_shortcut_is_trusted" == "metadata::trusted: true" ]]; then
			# echo Trusted
			:
		else
			# echo Not Trusted
			cd "$option_loc_2"
			gio set "Drawpile ListServer.desktop" "metadata::trusted" true
		fi
		desktop_shortcut_is_trusted=$( gio info "$option_loc_2/Drawpile Admin.desktop" | grep trusted | xargs )
		if [[ "$desktop_shortcut_is_trusted" == "metadata::trusted: true" ]]; then
			# echo Trusted
			:
		else
			# echo Not Trusted
			cd "$option_loc_2"
			gio set "Drawpile Admin.desktop" "metadata::trusted" truee
		fi
		desktop_shortcut_is_trusted=$( gio info "$option_loc_2/Drawpile Admin GUI.desktop" | grep trusted | xargs )
		if [[ "$desktop_shortcut_is_trusted" == "metadata::trusted: true" ]]; then
			# echo Trusted
			:
		else
			# echo Not Trusted
			cd "$option_loc_2"
			gio set "Drawpile Admin GUI.desktop" "metadata::trusted" true
		fi
		# Trust the Desktop shortcut so it's launchable. --> https://askubuntu.com/questions/1218954/desktop-files-allow-launching-set-this-via-cli
		
		mv "$option_loc_2/Drawpile ListServer.desktop" "$script_directory/Drawpile ListServer.desktop"
		mv "$option_loc_2/Drawpile Admin.desktop" "$script_directory/Drawpile Admin.desktop"
		mv "$option_loc_2/Drawpile Admin GUI.desktop" "$script_directory/Drawpile Admin GUI.desktop"
	fi
	
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo
	echo "Shortcuts should now exist in the directory the script was ran."
	echo "Drag to desktop to enable the shortcuts for use on Ubuntu."
	echo "Right click, select 'Allow Launching'."
	echo
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
	echo
fi
comment_EOF_delete

echo "${bold}${cyan}***********************************************************************${normal}"
echo "${bold}${cyan}************************ My Server Information ************************${normal}"
echo "${bold}${cyan}***********************************************************************${normal}"
echo
echo "${bold}${cyan}**** Drawpile Server Files ****${normal}"
echo "$dp_install_loc/Programs/Drawpile-Srv-Files"
echo
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo "${bold}${cyan}**** Drawpile List Server Page ****${normal}"
echo "http://$hostname"
echo
echo "${bold}${cyan}**** Drawpile List Server Page For Drawpile Client ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]]; then echo "http://$hostname/listing/"; fi
if [[ "$ssl_encryption_config" = "2" ]]; then echo "https://$hostname/listing/"; fi
if [[ "$ssl_encryption_config" = "3" ]]; then echo "Not Available without SSL enabled"; fi
echo
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo "${bold}${cyan}**** Drawpile Admin Web Page Login Information ****${normal}"
echo "Web Admin Username = $nginx_username_1"
echo "Web Admin Password = $nginx_htpasswd_1"
echo
echo "${bold}${cyan}**** Drawpile Admin Web Page ****${normal}"
if [[ "$ssl_encryption_config" = "1" ]]; then echo "https://$hostname/admin/"; fi
if [[ "$ssl_encryption_config" = "2" ]]; then echo "https://$hostname/admin/"; fi
if [[ "$ssl_encryption_config" = "3" ]]; then echo "Not Available without SSL enabled"; fi
echo
echo "${bold}${cyan}***** Drawpile Admin GUI Desktop on another machine *****${normal}"
echo "${bold}${cyan}**** (For Emergency Use Only, messes with web admin) ****${normal}"
echo "drawpile-srv --gui --remote http://$hostname:8081/"
echo
if [ "$samba_choice" == "1" ] || [ "$samba_choice" == "2" ] || [ "$samba_choice" == "3" ]; then
	echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
	echo
	echo "${bold}${cyan}**** Samba Network Configuration ****${normal}"
	echo "Type this into address bar of file explorer to check contents of local server."
	echo "\\\\$HOSTNAME"
	echo
fi
echo "${bold}${cyan}~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~${normal}"
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}${green}*****Drawpile Server Installation and Setup Complete . . .*****${normal}"
echo
drawpile_credits_urls_functions 
echo
drawpile_credits_function
echo
echo "Device IP Address:"
hostname -I
echo
echo "To set up remote server administration instead of the web interface, read more"
echo "here in Google Docs:"
echo "     https://tinyurl.com/y8xq4qta "
echo
echo
echo "${bold}Note:${normal} Automatic Session resets are determined by 70% of the setting Session "
echo '     Size Limit. What this means is that a server set to 15 MB will automatically reset at'
echo '     10.50 MB. A server set to 20 MB will auto reset at 14 MB. A server set to 25 MB will '
echo '     auto reset at 17.50 MB. This is especially important to make the value large to account '
echo '     for large boards being hosted on the server. I suggest using 25 MB for the setting '
echo '     when remotely accessing the server to administrate the server settings.'
echo

# The sort command used at the end sorts the list alphabetically.
sudo sort $app_installation_status_file -o $app_installation_status_file
wait $!
# This removes any duplicates that may exist in the file.
perl -i -ne 'print if ! $a{$_}++' $app_installation_status_file
wait $!

# sudo sort $drawpile_configuration_values_file -o $drawpile_configuration_values_file
sudo sed -i '\!^drawpile_script_completed =!{h;s!=.*!= '"yes"'!};${x;\!^$!{s!!drawpile_script_completed = '"yes"'!;H};x}' $drawpile_configuration_values_file
sleep 5
# wait $!
# sudo chmod 770 /home/drawpileuser/ -R
sudo chmod 770 $app_installation_status_file
sudo chmod 770 $drawpile_configuration_values_file

if [ "$journalctl_log_limit" != "9" ]; then
	echo
	echo "Journalctl was modified."
	echo 
	echo "To reload the configuration, you should restart the server now that the"
	echo "script has completed, as this is much easier than reloading every single"
	echo "running service. Be sure to copy server info located just above before"
	echo "you reboot."
	echo
	echo "Read more on why this required here (warning for technical content):"
	echo "https://unix.stackexchange.com/questions/253203/how-to-tell-journald-to-re-read-its-configuration"
	echo
	echo "The script can reboot the system with this command:"
	echo "sudo reboot"
	echo
	while :; do
		read -r -p "${bold}${red}Type (y)es to confirm reboot, or (n)o to skip the reboot:${normal} " script_complete_reboot_for_journalctl
		echo
		if [ "$script_complete_reboot_for_journalctl" == "y" ] || [ "$script_complete_reboot_for_journalctl" == "Y" ] || [ "$script_complete_reboot_for_journalctl" == "yes" ] || [ "$script_complete_reboot_for_journalctl" == "YES" ] || [ "$script_complete_reboot_for_journalctl" == "Yes" ] || [ "$script_complete_reboot_for_journalctl" == "n" ] || [ "$script_complete_reboot_for_journalctl" == "N" ] || [ "$script_complete_reboot_for_journalctl" == "no" ] || [ "$script_complete_reboot_for_journalctl" == "NO" ] || [ "$script_complete_reboot_for_journalctl" == "No" ]; then
			break
		else
			echo
			echo "${bold}${red}Invalid input selection, try again.${normal}"
			echo
			echo ----------------------------------------------------------------------------------
			echo
		fi
	done
	if [ "$script_complete_reboot_for_journalctl" == "y" ] || [ "$script_complete_reboot_for_journalctl" == "Y" ] || [ "$script_complete_reboot_for_journalctl" == "yes" ] || [ "$script_complete_reboot_for_journalctl" == "YES" ] || [ "$script_complete_reboot_for_journalctl" == "Yes" ]; then
		echo "${bold}${red}RECOMMENDED - Rebooting in 30 seconds${normal}"
		sleep 30
		sudo reboot
	elif [ "$script_complete_reboot_for_journalctl" == "n" ] || [ "$script_complete_reboot_for_journalctl" == "N" ] || [ "$script_complete_reboot_for_journalctl" == "no" ] || [ "$script_complete_reboot_for_journalctl" == "NO" ] || [ "$script_complete_reboot_for_journalctl" == "No" ]; then
		echo "${bold}${red}NOT RECOMMENDED - Skipping Reboot${normal}"
	else
		echo "${bold}${red}This message should not be visible for system reboot.${normal}"
	fi
fi

read -r -p 'Press [Enter] key to close window...'
echo
#
# - End of Script. -
#
} # this ensures the entire script is downloaded, the other part of this is located just after the script update and wget check. #