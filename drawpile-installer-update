#!/bin/bash
drawpilescriptversion=2.86
scriptname=drawpile-installer-update
scriptmgmtupdate=drawpile-installer-official-build-from-sources-server-mgmt-for-update
SCRIPTDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
bold=$(tput bold)
underline=$(tput smul)
red=$(tput setaf 1)
green=$(tput setaf 2)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
magenta=$(tput setaf 5)
cyan=$(tput setaf 6)
normal=$(tput sgr0)
#
# Text Formatting - Yellow looks orange unless used in bold mode.
# https://stackoverflow.com/questions/2924697/how-does-one-output-bold-text-in-bash
# http://linuxcommand.org/lc3_adv_tput.php
echo
echo 'Made with the assistance of the Creator of Drawpile! His PayPal E-mail if'
echo 'you want to donate some money as thanks for all that he does!'
echo "${underline}laakkonenc@gmail.com${normal}"
echo
echo "Script Version ${bold}$drawpilescriptversion${normal}"
echo "'Google Doc --> ${underline}http://tinyurl.com/jx5oe4h ${normal}"
echo "GitHub --> ${underline}https://github.com/Wade821/PiDrawpile.git ${normal}"
echo
echo 'Please make sure you are using the latest version of this script before'
echo 'continuing. You can get the latest version from Github or by making sure'
echo 'the script number above matches the Drawpile Google document version number'
echo 'in the upper right of every page where this script was obtained. If you do'
echo 'not have the newest version, this script should auoto retrieve the newest'
echo 'version of the script. If not, close this window and get the newest'
echo 'version before proceeding.'
echo
read -p 'Press [Enter] key to continue...'
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo 'Pick an install location for the use of the Drawpile Server folders.'
echo 'This includes session recordings, file backed sessions which help the'
echo 'server survive crashes or power outages, or template files which help'
echo 'create rooms with specific settings that exist on the server at all'
echo 'times.'
echo
echo "1 - Public Folder ${underline}(Recommended)${normal}			- /home/pi/Public"
echo '2 - Desktop Folder				- /home/pi/Desktop'
echo '3 - Documents Folder				- /home/pi/Documents'
echo '4 - Pictures Folder				- /home/pi/Pictures'
echo '  - Other, simply enter the exact location desired without a / at the end.'
echo '    This is an advanced option and not suggested for average users.'
echo '    If using a path with spaces, do NOT use double or single quotes as'
echo '        the script will not work if you do.'
echo "    ${underline}Acceptable Example:${normal} /home/pi/Desktop/My Drawpile Server"
echo
echo "${bold}Note:${normal} If you use Windows and Share files across the network, this script"
echo 'will give you the option later to share just the Public folder, or'
echo 'the Music, Pictures, Public, and Videos folders, or the other location'
echo 'personally specified, or no folders.'
echo
echo 'Please make your selection now by entering the number or folder path:'
echo 
read dpinstallloc
echo
if [ "$dpinstallloc" == "1" ]; then
  dpinstallloc=/home/pi/Public
  echo "Install location chosen is $dpinstallloc"
elif [ "$dpinstallloc" == "2" ]; then
  dpinstallloc=/home/pi/Desktop
  echo "Install location chosen is $dpinstallloc"
elif [ "$dpinstallloc" == "3" ]; then
  dpinstallloc=/home/pi/Documents
  echo "Install location chosen is $dpinstallloc"
elif [ "$dpinstallloc" == "4" ]; then
  dpinstallloc=/home/pi/Pictures
  echo "Install location chosen is $dpinstallloc"
else
  echo "Install location chosen is $dpinstallloc"
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
cd "$dpinstallloc/"
sudo mkdir -p -v Programs
cd "$dpinstallloc/Programs"
sudo wget "https://raw.githubusercontent.com/Wade821/PiDrawpile/master/$scriptname"
echo
sudo wget "https://raw.githubusercontent.com/Wade821/PiDrawpile/master/scripts-for-other-scripts-only/$scriptmgmtupdate"
sudo chmod 777 "$dpinstallloc/Programs" -R
sudo chmod 777 "$dpinstallloc/Programs/$scriptmgmtupdate"
echo
dpcheckversion=$(grep -m 1 "drawpilescriptversion=" "$dpinstallloc/Programs/$scriptname" | cut -c 23-26)
currentscriptname="$(basename "$(test -L "$0" && readlink "$0" || echo "$0")")"

if [[ "$drawpilescriptversion" < "$dpcheckversion" ]]; then
	echo "Newest Script is using version $dpcheckversion."
	echo "Newer version of script available, the old script has been copied over"
	echo "the old script. Please re-run this script to use newest version."
	cd "$dpinstallloc"
	sudo rm -rf "$SCRIPTDIR/$currentscriptname"
	sudo cp "$dpinstallloc/Programs/$scriptname" "$SCRIPTDIR/$currentscriptname"
	sudo chmod 777 "$SCRIPTDIR/$currentscriptname"
	sudo rm -rf "$dpinstallloc/Programs/$scriptname"
	echo "Terminating script in 30 seconds."
	echo
	sleep 30s
	exit
elif [[ "$drawpilescriptversion" = "$dpcheckversion" ]]; then
	echo "Script is newest version available."
	sudo rm -rf "$dpinstallloc/Programs/$scriptname"
elif [[ "$drawpilescriptversion" > "$dpcheckversion" ]]; then
	echo "It appears the creator of the script has failed to update github with the newest version."
	echo "Please contact him to update the script there by emailing him at wadeschlueter@gmail.com"
	echo
	echo "Script in use: $drawpilescriptversion"
	echo "Github Script: $dpcheckversion"
	echo
	echo "Pausing script for 30 seconds before continuing."
	sudo rm -rf "$dpinstallloc/Programs/$scriptname"
	sleep 30s
else
	echo "Unable to determine script version, proceeding with script."
fi
echo
. ./$scriptmgmtupdate
echo
sudo rm -rf "$dpinstallloc/Programs/$scriptmgmtupdate"
cd "$dpinstallloc/Programs"
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
sudo systemctl stop --now drawpile-srv.socket
sudo systemctl stop --now drawpile-srv.service
sudo pkill drawpile-srv
sudo pkill -9 drawpile-srv
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}*****Updating software list available for updates and new packages. . . .*****${normal}"
echo
sudo apt-get -q -y update
echo
echo 'Would you like to update all installed packages? This step may take a while' 
echo 'to complete if you choose to do this. It is highly recommended to do so'
echo 'however as the upgrade may fail if it relies on newer versions of installed'
echo 'system packages. Required packages are upgraded in the next step.'
echo
echo 'Enter a letter and hit enter to continue.'
echo
echo 'y for yes'
echo 'n for no'
echo
read x
echo
if [ "$x" == "y" ]; then
  echo 'Updating already installed packages . . .'
  echo
  sudo apt-get -q -y upgrade
else
  echo 'Skipping update of all installed packages.'
fi
echo
echo 'Upgrading dependencies . . .'
echo
sudo apt-get -q -y install cmake libqt5network5 libkf5dnssd-dev libkf5archive-dev libqt5svg5-dev qtmultimedia5-dev libsystemd-dev libminiupnpc-dev  libsodium-dev
echo
sudo apt-get -q -y install qtbase5-dev g++ miniupnpc libgif-dev qttools5-dev libmicrohttpd-dev extra-cmake-modules mini-httpd nginx openssl
echo
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}*****Updating Repository . . .*****${normal}"
echo
cd "$dpinstallloc/Programs/"
sudo rm Drawpile -R
sudo chmod 777 "$dpinstallloc/Programs/" -R
git clone https://github.com/drawpile/Drawpile.git
echo
#
# Read more (Answer at the bottom)
# https://stackoverflow.com/questions/4068453/git-how-to-overwrite-local-change
# And read more here
# https://stackoverflow.com/questions/61212/how-to-remove-local-untracked-files-from-the-current-git-working-tree
#
echo "--------------------------------------------------------------------------------"
echo "--------------------------------------------------------------------------------"
echo
echo "${bold}*****Preparing to Build Drawpile . . .*****${normal}"
echo
cd "$dpinstallloc/Programs/Drawpile"
sudo mkdir -p -v build
sudo chmod 777 "$dpinstallloc/Programs/Drawpile/build" -R
cd "$dpinstallloc/Programs/Drawpile/build"
echo
#
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
# These lines are to fix an issue with an older version of KArchive which cannot be easily upgraded.
# KArchive apparently doesn't supply a version number macro so this can't be detected at compile time as a problem.
# File is located under Drawpile/src/client/ora/orawriter.cpp and replaces the following text
# zip.errorLine() 
# zf.errorLine() 
#
# with this instead as per the creator of Drawpile
#
# QString("ZIP error")
#
# It is presumable that the current (09/18/2017)  stable release of KArchive at 5.28.0-2 has this issue fixed with 
# the testing version of KArchive which is 5.37.0-2. Once updated to or past that number, this section below should
# no longer be necessary to use.
#
# Page for newest KArchive download ---> https://api.kde.org/frameworks/karchive/html/index.html
# Also see https://tracker.debian.org/pkg/karchive
# Or see https://packages.qa.debian.org/k/karchive.html
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
echo
version=$(apt-cache policy libkf5archive-dev | grep "Installed:" | cut -c 14-40)
echo "K Archive is using version $version"
echo

if [[ "$version" > "5.29" ]]; then
	echo "Installed version of K Archive is greater than 5.29."
	echo "No modification of source files required."
elif [[ "$version" = "5.29" ]]; then
	echo "Installed version of K Archive is equal to 5.29."
	echo "No modification of source files required."
elif [[ "$version" < "5.29" ]]; then
	echo "Installed version of K Archive is less than 5.29."
	echo "Modification of source files required."
	echo
	echo 'Creating backup of file orawriter.cpp before modification.'
	sudo cp "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp" "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp.backup"
	echo
	echo 'Modifying file orawriter.cpp for use with older version of KArchive (5.28.0-2).'
	sudo sed -i -e 's/zip.errorString()/QString("ZIP error")/g' "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp"
	sudo sed -i -e 's/zf.errorString()/QString("ZIP error")/g' "$dpinstallloc/Programs/Drawpile/src/client/ora/orawriter.cpp"
else
	echo "Unable to make a determination of which version of K Archive is installed."
fi
echo
echo
#---------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------
echo
echo "${bold}*****Drawpile Build Configuration . . .*****${normal}"
echo
echo 'These options configure the installation of Drawpile for your device.'
echo 'All options with the server assume systemd will be in use.'
echo 'Recommended Options: 1, 3, or 4.'
echo
echo 'Enter a number and hit enter to continue.'
echo
echo 'Drawpile Server Only Options:'
echo '1 for Drawpile Server Only - connect from a desktop or laptop.'
echo '2 for Drawpile Server Only - No GUI or graphics interface - headless'
echo
echo 'Drawpile Server & Client Options:'
echo '3 - Server & Client with Wacom'
echo '4 - Server & Client'
echo '5 - Server & Client - dprectool and debugging version'
echo
echo 'Drawpile Client Only Options:'
echo '6 for Drawpile Client Only with Wacom'
echo '7 for Drawpile Client Only'
echo
read x
echo
echo
echo "${bold}*****Determine Compile Speed . . .*****${normal}"
echo
tMax=$(grep -c ^processor /proc/cpuinfo)

echo 'You can hit enter to continue here, as it will pick the maximum amount of'
echo 'threads available from the processor. If the script froze at this stage, try'
echo "a lower number than $tMax. This uses less system resources on the Pi and is "
echo 'more likely to complete without freezing up.'
echo
echo 'This is the command to be run, where # is a number input by you:'
echo 'sudo make -j #'
echo
read -p "Enter compiling thread count (blank for maximum of $tMax): " threadCount
echo
while [ true ] ; do
    if [ -z "$threadCount"  ] ; then
		echo "Compiling using maximum"
        threadCount=$tMax
		echo
        break
    elif [[ $threadCount =~ ^[0-9]+$ ]] ; then
        if (($threadCount>0)) && (($threadCount<=$tMax)) ; then
            break
        else
			echo "Value: '$threadCount' is not within the range [1,$tMax]"
			echo
        fi
    else
		echo "Value: '$threadCount' is not a positive integer"
		echo
    fi
    read -p "Enter compiling thread count (blank for maximum of $tMax): " threadCount
	echo
done
echo
echo
if [ "$x" == "2" ]; then
  sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF -DSERVERGUI=off
elif [ "$x" == "3" ]; then
  sudo cmake .. -DINITSYS=systemd
  sudo apt-get -q -y install libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
  echo
  xsetwacom --list devices
  echo
  xsetwacom --list parameters
  echo
  echo 'Use the following in the terminal more information.'
  echo 'man wacom'
  echo
  echo 'You can set the tablet from absolute positioning to relative via this command.'
  echo 'xsetwacom set stylus mode relative'
  echo
  echo 'You may have to replace stylus with the ID listed for the device, which you'
  echo 'can find by typing the following: xwacom --list devices'
  echo 'Additionally, you may use the full name of the device in single quotes as well'
  echo 'To represent the device. For example, the following could be used . . .'
  echo 'Wacom Intuos3 6x8 Pen stylus'
  echo
  echo 'There does not appear to be any working graphical based configuration program'
  echo 'for the wacom tablet that I have been able to find as of yet.'
  echo
  echo 'Read more on configuring your Wacom Tablet here --> http://tinyurl.com/blhyk7m'
  echo 'write the following command in the terminal to read more on Wacom Configuration:'
  echo 'man wacom'
  echo
elif [ "$x" == "4" ]; then
  sudo cmake .. -DINITSYS=systemd
elif [ "$x" == "5" ]; then
  sudo cmake .. -DINITSYS=systemd -DTOOLS=on -DCMAKE_BUILD_TYPE=debug
elif [ "$x" == "6" ]; then
  sudo cmake .. -DSERVER=off
  sudo apt-get -q -y install libwacom-bin libwacom-common libwacom-dev libwacom2 libwacom2-dbg xserver-xorg-input-wacom
  echo
  xsetwacom --list devices
  echo
  xsetwacom --list parameters
  echo
  echo 'Use the following in the terminal more information.'
  echo 'man wacom'
  echo
  echo 'You can set the tablet from absolute positioning to relative via this command.'
  echo 'xsetwacom set stylus mode relative'
  echo
  echo 'You may have to replace stylus with the ID listed for the device, which you'
  echo 'can find by typing the following: xwacom --list devices'
  echo 'Additionally, you may use the full name of the device in single quotes as well'
  echo 'To represent the device. For example, the following could be used . . .'
  echo 'Wacom Intuos3 6x8 Pen stylus'
  echo
  echo 'There does not appear to be any working graphical based configuration program'
  echo 'for the wacom tablet that I have been able to find as of yet.'
  echo
  echo 'Read more on configuring your Wacom Tablet here --> http://tinyurl.com/blhyk7m'
  echo 'write the following command in the terminal to read more on Wacom Configuration:'
  echo 'man wacom'
  echo
  echo
  echo "Compiling with $threadCount threads."
  echo
  sudo make -j $threadCount
  echo
  echo 'Making installation of compiled program, libraries, and documentation to proper locations.'
  sudo make install
  #Location of created executable --> /usr/local/bin/
  echo
  echo "Compiling complete, exiting script since no further config is required."
  echo
  sleep 30s
  exit
elif [ "$x" == "7" ]; then
  sudo cmake .. -DSERVER=off
  echo
  echo "Compiling with $threadCount threads."
  echo
  sudo make -j $threadCount
  echo
  echo 'Making installation of compiled program, libraries, and documentation to proper locations.'
  sudo make install
  #Location of created executable --> /usr/local/bin/
  echo
  echo "Compiling complete, exiting script since no further config is required."
  echo
  sleep 30s
  exit
else
  sudo cmake .. -DINITSYS=systemd -DCLIENT=OFF
fi

echo
echo "Compiling with $threadCount threads."
echo
sudo make -j $threadCount
echo
echo 'Making installation of compiled program, libraries, and documentation to proper locations.'
sudo make install
#Location of created executable --> /usr/local/bin/
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "${bold}*****Drawpile is Compiled . . *****${normal}"
echo
echo
echo "${bold}***** Now setting up for automated startup . . .*****${normal}"
echo
echo 'This script assumes you have a hostname, and it is required for'
echo 'encrypted server connections to protect private conversations'
echo 'and also to mask your Public IP address when connecting to the'
echo 'server.'
echo
echo 'Make sure this is correctly typed both times before proceeding'
echo 'with the script. If you do not enter it correctly, users will'
echo 'not be able to connect to hosted sessions with the server using'
echo 'encryption by SSL.'
echo
echo "${bold}For example:${normal}"
echo "${underline}example.hostwebsite.com ${normal}"
echo
echo 'If you do not have one, simply leave it blank and hit enter'
echo 'twice. However, it is highly recommended to have one, they'
echo 'are free after all!'
echo
echo "${bold}Note:${normal} If you do make a mistake, you can always run"
echo "Option ${underline}6 - Change all startup options.${normal} via the script"
echo 'drawpile-server.sh later on.'
echo
echo 'If you have a hostname please enter it now.'
echo
read -p "Enter hostname: " hostname1
read -p "Enter hostname again: " hostname2
while [[ $hostname1 != $hostname2 ]]
do
	echo
        echo "Hostnames entered do not match!"
	echo
        read -p "Enter hostname: " hostname1
        read -p "Enter hostname again: " hostname2
done
#
hostname=$hostname1
echo
echo "Your hostname is: $hostname"
echo
echo 'This will be used to display in the session listing instead of your'
echo 'public IP address.'
echo
hostname="--local-host $hostname"
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo 'Making backup of drawpile-srv.service before modification.'
echo
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service" "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service.backup"
echo
echo 'Modifying drawpile-srv.service . . .'
echo
sudo chmod 777 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service"
#
cd "$dpinstallloc"
sudo chmod 777 "$dpinstallloc" -R
cd "$dpinstallloc/Programs"
sudo mkdir -p -v Drawpile-Srv-Files
cd Drawpile-Srv-Files
sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/" -R
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
#
# This is for session recordings, however it is not necessary when using file backed sessions. 
# --record "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec"
#
# Code to place after the database file in order to use httpd to authenticate instead. Username and password is plain text, no hash.
# --web-admin-port 8080 --web-admin-access all --web-admin-auth user:pass
#
# Default location of the GUI Database if no location is specified.
# /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
# sudo chmod 777 /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
#
# Location provided by Calle for drawpileuser database. Can be used when drawpile-srv supports socket activation for web admin.
# /home/drawpileuser/server.db
#
echo
echo "Determine how you want drawpile-srv to run now. ${underline}Option 2${normal} is recommended"
echo 'if you have a hostname. If you do not have a hostname, option 15 instead.'
echo 'All settings will automatically work, though some additional setup for'
echo 'session templates is required. Read more on the hyperlink below.'
echo
echo "${bold}${cyan}Short summary of options:${normal}"
echo "    Read more --> ${underline}https://drawpile.net/help/server/${normal}"
echo "${bold}web remote admin${normal} - add users, ban users, set auto session reset, etc."
echo "${bold}file backed sessions${normal} - write sessions to file, helps sessions to survive"
echo '    power outages and server crashes. Can serve as a recording if server'
echo '    database set to Archive terminated sessions, however filenames are'
echo '    saved like 926a80d5-3168-401d-b406-f05d3fc05c32.dprec with a'
echo '    corresponding text file, the session title is inside the text file.'
echo "${bold}recording${normal} - records all sessions, may not be necessary with file backed"
echo '    sessions turned on, though it can be useful for debugging broken boards or '
echo '    recovering art from broken boards. This can be turned on an individual basis'
echo '    when a room is active on the server by going to File and then Record... ,'
echo "    or by combining the file backed sessions option and checking ${underline}Archive"
echo "    terminated sessions${normal}."
echo "${bold}templates${normal} - provide default sessions that always exist on the server."
echo '    This feature is not yet implemented in the graphical user interface but they can be'
echo '    turned on using one of the options provided below.'
echo "${bold}ssl${normal} - Encrypt data sent so conversations and drawings are kept private."
echo '    If you do not have this option on, sensitive information should not'
echo '    be shared in sessions. I.E. credit cards.'
echo
echo "${bold}${cyan}These options assume you have a host name.${normal}"
echo '  1  - all options.'
echo "  2  - all options except session recording - ${underline}recommended${normal}"
echo '  3  - web admin, session recording, ssl, & templates'
echo '  4  - web admin, file backed sessions, & ssl'
echo '  5  - web admin, file backed sessions, & templates'
echo '  6  - web admin, session recording, & ssl'
echo '  7  - web admin, session recording, & templates'
echo '  8  - web admin, ssl, & templates'
echo '  9  - web admin & file backed sessions'
echo '  10 - web admin & session recording'
echo '  11 - web admin & ssl'
echo '  12 - web admin & templates'
echo '  13 - web admin'
echo
echo "${bold}${cyan}These options assume you do not have a host name.${normal}"
echo '  14  - all options.'
echo '  15  - all options except session recording'
echo '  16  - web admin, session recording, & templates'
echo '  17  - web admin & file backed sessions'
echo '  18  - web admin & session recording'
echo '  19  - web admin & templates'
echo '  20  - web admin'
echo
read systemd
echo
if [ "$systemd" == "1" ]; then
  echo 'Selected - 1 - all options.'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "2" ]; then
  echo 'Selected - 2 - all options except session recording'
  echo '         - recommended'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "3" ]; then
  echo 'Selected - 3 - web admin, session recording, ssl, & templates'
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "4" ]; then
  echo 'Selected - 4 - web admin, file backed sessions, & ssl'
  sudo mkdir -p -v sessions
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  systemd="--sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "5" ]; then
  echo 'Selected - 5  - web admin, file backed sessions, & templates'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "6" ]; then
  echo 'Selected - 6  - web admin, session recording, & ssl'
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "7" ]; then
  echo 'Selected - 7  - web admin, session recording, & templates'
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "8" ]; then
  echo 'Selected - 8  - web admin, ssl, & templates'
  sudo mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "9" ]; then
  echo 'Selected - 9  - web admin & file backed sessions'
  sudo mkdir -p -v sessions
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  systemd="--sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "10" ]; then
  echo 'Selected - 10 - web admin & session recording'
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "11" ]; then
  echo 'Selected - 11 - web admin & ssl'
  systemd="--secure --ssl-cert /home/drawpileuser/cert.pem --ssl-key /home/drawpileuser/key.pem $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "12" ]; then
  echo 'Selected - 12 - web admin & templates'
  sudo mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" $hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "13" ]; then
  echo 'Selected - 13 - w web admin'
  systemd="$hostname --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "14" ]; then
  echo 'Selected - 14 - all options.'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "15" ]; then
  echo 'Selected - 15 - all options except session recording'
  echo '         - recommended'
  sudo mkdir -p -v sessions
  sudo mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/" 
  elif [ "$systemd" == "16" ]; then
  echo 'Selected - 16 - web admin, session recording, & templates'
  sudo mkdir -p -v templates
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "17" ]; then
  echo 'Selected - 17 - web admin & file backed sessions'
  sudo mkdir -p -v sessions
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/sessions" -R
  systemd="--sessions \"$dpinstallloc/Programs/Drawpile-Srv-Files/sessions/\" --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "18" ]; then
  echo 'Selected - 18  - web admin, session recording'
  sudo mkdir -p -v session-record
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/session-record" -R
  systemd="--record \"$dpinstallloc/Programs/Drawpile-Srv-Files/session-record/%d--%a--%a.dprec\" --extauth https://drawpile.net/api/ext-auth/"
elif [ "$systemd" == "19" ]; then
  echo 'Selected - 19  - web admin & templates'
  sudo mkdir -p -v templates
  sudo chmod 777 "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  sudo chown drawpileuser "$dpinstallloc/Programs/Drawpile-Srv-Files/templates" -R
  systemd="--templates \"$dpinstallloc/Programs/Drawpile-Srv-Files/templates/\" --extauth https://drawpile.net/api/ext-auth/"
else [ "$systemd" == "20" ]
  echo 'Selected - 20 - web admin'
  systemd="--extauth https://drawpile.net/api/ext-auth/"
fi
#
#
#1 - Socket Activation
echo "[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv

[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=/usr/local/bin/drawpile-srv -d /home/drawpileuser/server.db $systemd

# The AppImage is not built with systemd integration at the moment,
# so type=simple should be used with it:
# Type=simple
Restart=always

# If you're using a self-built or distribution provided version with
# systemd integration, use this to enable socket activation:
Type=notify
NotifyAccess=main

# Note: in order to use session recording and SSL safely,
# a dedicated user account should be created for drawpile-srv.
User=drawpileuser

[Install]
WantedBy=multi-user.target" > "$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service"
#
#
#2 - Server starts on Raspberry Pi power up
echo "[Unit]
Description=Drawpile dedicated server
After=network.target
Documentation=man:drawpile-srv

[Service]
# Note: set this to the correct path and add -d or -c to load the right configuration file
ExecStart=/usr/local/bin/drawpile-srv -d /home/drawpileuser/server.db --web-admin-port 27780 $systemd

# The AppImage is not built with systemd integration at the moment,
# so type=simple should be used with it:
Type=simple
Restart=always

# If you're using a self-built or distribution provided version with
# systemd integration, use this to enable socket activation:
#Type=notify
#NotifyAccess=main

# Note: in order to use session recording and SSL safely,
# a dedicated user account should be created for drawpile-srv.
User=drawpileuser

[Install]
WantedBy=multi-user.target" > "$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service"
echo
sudo chmod 655 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service"
sudo chmod 777 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.service.backup"
sudo chmod 655 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service"
sudo chmod 655 "$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service"
echo
echo 'Copying files drawpile-srv.service and drawpile-srv.socket to make systemd work.'
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv01.service" /etc/systemd/system/
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv02.service" /etc/systemd/system/
sudo cp "$dpinstallloc/Programs/Drawpile/server/drawpile-srv.socket" /etc/systemd/system/
echo
sudo systemctl daemon-reload
sudo systemctl restart systemd-modules-load
echo
sudo sed -i 's!proxy_pass http://127.0.0.1:8080/\;!proxy_pass http://127.0.0.1:27780/\;!' /etc/nginx/nginx.conf
sudo /etc/init.d/nginx restart
sudo nginx -s reload
sudo /etc/init.d/nginx restart
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
echo
echo "Checking server database file to ensure no issues with setup."
echo
sudo mkdir -p -v /home/pi/.local/share/drawpile/drawpile-srv/
echo
if [[ -e  "/home/drawpileuser/server.db" && ! -e "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" ]]; then
	echo "Server.db file exists and guiserver.db does not exist. Making backup."
	echo
	sudo cp -p "/home/drawpileuser/server.db" "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db"
elif [[ ! -e  "/home/drawpileuser/server.db" &&  -e "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" ]]; then
	echo "Server.db file does not exist and Guiserver.db file exists."
	echo "Minor step needed to resolve issue."
	echo
	sudo cp -p "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" "/home/drawpileuser/server.db"
	sudo chmod 777 /home/drawpileuser/server.db
	sudo chown drawpileuser /home/drawpileuser/server.db
elif [[ -e  "/home/drawpileuser/server.db" && -e "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" ]]; then
	echo "Server.db file exists and Guiserver.db file exists. Determining which file is newer."
	echo
	if [[ "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" -nt "/home/drawpileuser/server.db" ]]; then
		echo "Copying newer guiserver.db file over older server.db file."
		sudo cp -p /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db /home/drawpileuser/server.db
	elif [[ "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" -ot "/home/drawpileuser/server.db" ]]; then
		echo "Copying newer server.db file over guiserver.db file."
		sudo cp -p /home/drawpileuser/server.db /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
	elif cmp -s /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db /home/drawpileuser/server.db ; then
    		echo 'Database files are the exact same, byte for byte.'
	else
		echo "Unable to make a determination of when the files were last modified."
	fi
	#
	#stat 	--> https://ss64.com/bash/stat.html
	#	Uses block size. Not accurate.
	#	Old Command: elif [[ "$drawpileuser_server_db_stat" -eq "$drawpileuser_guiserver_db_stat" ]]; then
	#cmp 	--> https://ss64.com/bash/cmp.html
	#	Compares files byte by byte, much better accuracy.
	#diff 	--> https://ss64.com/bash/diff.html
	#	Should be just as effective as cmp.
	#
elif [[ ! -e  "/home/drawpileuser/server.db" && ! -e "/home/pi/.local/share/drawpile/drawpile-srv/guiserver.db" ]]; then
	echo "Files server.db and guiserver.db do not exist."
	echo "Resolving issue now to ensure drawpileuser"
	echo "can access database. . ."
	echo
	sudo cp /etc/systemd/system/drawpile-srv02.service /etc/systemd/system/drawpile-srv.service
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	sudo systemctl start --now drawpile-srv.service & sleep 1
	sudo systemctl stop --now drawpile-srv.service
	sudo chmod 777 /home/drawpileuser/server.db
	sudo chown drawpileuser /home/drawpileuser/server.db
	sudo cp -p /home/drawpileuser/server.db /home/pi/.local/share/drawpile/drawpile-srv/guiserver.db
else
	echo "Unable to determine if files exist or not, must be an error in script. Proceeding with script."
fi
echo
echo '--------------------------------------------------------------------------------'
echo '--------------------------------------------------------------------------------'
#
echo "${bold}*****Starting Drawpile Server . . .*****${normal}"
echo
if [ "`systemctl is-enabled drawpile-srv.socket`" = "enabled" ]; then 
	sudo cp "/etc/systemd/system/drawpile-srv01.service" /etc/systemd/system/drawpile-srv.service
	echo
	echo 'Reloading systemctl and systemd.'
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	echo
	echo "drawpile-srv.socket previously enabled, starting up server."
	sudo systemctl disable drawpile-srv.service
	sudo systemctl start --now drawpile-srv.socket
elif [ "`systemctl is-enabled drawpile-srv.service`" = "enabled" ]; then
	sudo cp "/etc/systemd/system/drawpile-srv02.service" /etc/systemd/system/drawpile-srv.service
	echo
	echo 'Reloading systemctl and systemd.'
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	echo
	echo "drawpile-srv.service previously enabled, starting up server."
	echo
	echo "However, socket activation with web management was made"
	echo "available as of Drawpile 2.0.8. It is recommended to"
	echo "switch the server startup type using the server management"
	echo "script to make the change."
	echo
	sudo systemctl disable drawpile-srv.socket
	sudo systemctl stop --now drawpile-srv.socket
	sudo systemctl start drawpile-srv.service
else
  	sudo cp "/etc/systemd/system/drawpile-srv01.service" /etc/systemd/system/drawpile-srv.service
	echo
	echo 'Reloading systemctl and systemd.'
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-modules-load
	echo
	echo "No Drawpile automated startup is detected, setting up Socket Activation."
	sudo systemctl enable drawpile-srv.socket
	sudo systemctl start --now drawpile-srv.socket
fi
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo 'If socket activation is enabled, it will say enabled on the line starting with'
echo '\"Loaded:\" and it should be running. Ignore the part after vendor preset.'
echo
systemctl status drawpile-srv.socket --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo 'If start up on Pi power up is enabled, it will say enabled on the line starting'
echo 'with \"Loaded:\" and it should be running. Ignore the part after vendor preset.'
echo
systemctl status drawpile-srv.service --no-pager
echo
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo '~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~'
echo
echo "${bold}*****Drawpile Server Installation and Setup Complete . . .*****${normal}"
echo
echo 'Made with the assistance of the Creator of Drawpile! His PayPal E-mail if'
echo 'you want to donate some money as thanks for all that he does!'
echo "${underline}laakkonenc@gmail.com${normal}"
echo
echo 'Drawpile now supports saved username logins. To enable this feature, you'
echo 'must login to the server using the remote administration feature and then'
echo "you must copy in the following line into the ${underline}Validation key:${normal}"
echo
echo '9eJ2tMJlqgSqHOIK/GI/qzS14WqIxHeB1Im5Hs/CCCk='
echo
echo "${underline}External authentication${normal} must also be checked. It is highly suggested that"
echo "the ${underline}Permit guest logins when ext-auth server is unreachable${normal} is checked and"
echo "${underline}Allow ext-auth moderators${normal} is unchecked."
echo
echo "To set up remote server administration, read here in Google Docs:"
echo "https://tinyurl.com/y8xq4qta"
echo
echo "To read more on ${bold}External authentication${normal}, go to this link"
echo "and find that header on the website."
echo "https://drawpile.net/help/server/"
echo
echo "${bold}Note:${normal} Automatic Session resets are determined by 70% of the setting Session Size Limit. What this"
echo '     means is that a server set to 15 MB will automatically reset at 10.50 MB. A server set to'
echo '     20 MB will auto reset at 14 MB. A server set to 25 MB will auto reset at 17.50 MB. This is'
echo '     especially important to make the value large to account for large boards being hosted on the'
echo '     server. I suggest using 25 MB for the setting when remotely accessing the server to'
echo '     administrate the server settings.'
echo
read -p 'Press [Enter] key to close window...'
echo
#
#
# - End of Script. -